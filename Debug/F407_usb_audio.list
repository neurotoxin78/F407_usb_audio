
F407_usb_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000955c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098e0  080098e0  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  080098e0  080098e0  000198e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e8  080098e8  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e8  080098e8  000198e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  080098f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002012c  2**0
                  CONTENTS
 10 .bss          00004708  2000012c  2000012c  0002012c  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20004834  20004834  0002012c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122a3  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000388d  00000000  00000000  000323ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00035c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd8  00000000  00000000  00036b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242db  00000000  00000000  000377f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015925  00000000  00000000  0005bad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a03  00000000  00000000  000713f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137dfb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038f4  00000000  00000000  00137e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080096cc 	.word	0x080096cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	080096cc 	.word	0x080096cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Audio_Player_Play>:
#define DMA_MAX_SZE                     0xFFFF
#define DMA_MAX(_X_)                (((_X_) <= DMA_MAX_SZE)? (_X_):DMA_MAX_SZE)
#define AUDIODATA_SIZE                  2   /* 16-bits audio data size */

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004dc:	d307      	bcc.n	80004ee <Audio_Player_Play+0x22>
		Size = 0xFFFF;
 80004de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e2:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <Audio_Player_Play+0x38>)
 80004ea:	f001 fd21 	bl	8001f30 <HAL_GPIO_TogglePin>
	}
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)pBuffer, Size);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <Audio_Player_Play+0x3c>)
 80004f8:	f001 ff2a 	bl	8002350 <HAL_I2S_Transmit_DMA>
//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800
 8000508:	20000148 	.word	0x20000148

0800050c <Audio_Player_Stop>:
{
	HAL_I2S_DMAResume(&hi2s2);
}

void Audio_Player_Stop(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_I2S_DMAStop(&hi2s2);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <Audio_Player_Stop+0x10>)
 8000512:	f001 ffc5 	bl	80024a0 <HAL_I2S_DMAStop>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000148 	.word	0x20000148

08000520 <HAL_I2S_TxHalfCpltCallback>:
{
//	WM8978_VolumeCtl(vol);
}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800052e:	f001 fcff 	bl	8001f30 <HAL_GPIO_TogglePin>
	HalfTransfer_CallBack_FS();
 8000532:	f008 fc71 	bl	8008e18 <HalfTransfer_CallBack_FS>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40020800 	.word	0x40020800

08000544 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800054c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <HAL_I2S_TxCpltCallback+0x20>)
 8000552:	f001 fced 	bl	8001f30 <HAL_GPIO_TogglePin>
	TransferComplete_CallBack_FS();
 8000556:	f008 fc55 	bl	8008e04 <TransferComplete_CallBack_FS>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40020800 	.word	0x40020800

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	200f      	movs	r0, #15
 8000590:	f000 fc10 	bl	8000db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000594:	200f      	movs	r0, #15
 8000596:	f000 fc39 	bl	8000e0c <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b26      	ldr	r3, [pc, #152]	; (800065c <MX_GPIO_Init+0xb4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a25      	ldr	r2, [pc, #148]	; (800065c <MX_GPIO_Init+0xb4>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b23      	ldr	r3, [pc, #140]	; (800065c <MX_GPIO_Init+0xb4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <MX_GPIO_Init+0xb4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a1e      	ldr	r2, [pc, #120]	; (800065c <MX_GPIO_Init+0xb4>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <MX_GPIO_Init+0xb4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_GPIO_Init+0xb4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a17      	ldr	r2, [pc, #92]	; (800065c <MX_GPIO_Init+0xb4>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_GPIO_Init+0xb4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_GPIO_Init+0xb4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <MX_GPIO_Init+0xb4>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_GPIO_Init+0xb4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2101      	movs	r1, #1
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <MX_GPIO_Init+0xb8>)
 8000634:	f001 fc4a 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_GPIO_Init+0xb8>)
 8000650:	f001 f95a 	bl	8001908 <HAL_GPIO_Init>

}
 8000654:	bf00      	nop
 8000656:	3728      	adds	r7, #40	; 0x28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40020800 	.word	0x40020800

08000664 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_I2S2_Init+0x54>)
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <MX_I2S2_Init+0x58>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2S2_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2S2_Init+0x54>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2S2_Init+0x54>)
 800067e:	2201      	movs	r2, #1
 8000680:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_I2S2_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_I2S2_Init+0x54>)
 800068a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800068e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2S2_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_I2S2_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2S2_Init+0x54>)
 800069e:	2201      	movs	r2, #1
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_I2S2_Init+0x54>)
 80006a4:	f001 fc6c 	bl	8001f80 <HAL_I2S_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80006ae:	f000 f947 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000148 	.word	0x20000148
 80006bc:	40003800 	.word	0x40003800

080006c0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	; 0x38
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a4e      	ldr	r2, [pc, #312]	; (8000824 <HAL_I2S_MspInit+0x164>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	f040 8094 	bne.w	800081a <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80006f6:	2332      	movs	r3, #50	; 0x32
 80006f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fd0a 	bl	800511c <HAL_RCCEx_PeriphCLKConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800070e:	f000 f917 	bl	8000940 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b44      	ldr	r3, [pc, #272]	; (8000828 <HAL_I2S_MspInit+0x168>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a43      	ldr	r2, [pc, #268]	; (8000828 <HAL_I2S_MspInit+0x168>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
 8000722:	4b41      	ldr	r3, [pc, #260]	; (8000828 <HAL_I2S_MspInit+0x168>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b3d      	ldr	r3, [pc, #244]	; (8000828 <HAL_I2S_MspInit+0x168>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a3c      	ldr	r2, [pc, #240]	; (8000828 <HAL_I2S_MspInit+0x168>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <HAL_I2S_MspInit+0x168>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b36      	ldr	r3, [pc, #216]	; (8000828 <HAL_I2S_MspInit+0x168>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a35      	ldr	r2, [pc, #212]	; (8000828 <HAL_I2S_MspInit+0x168>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <HAL_I2S_MspInit+0x168>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000766:	2304      	movs	r3, #4
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000776:	2306      	movs	r3, #6
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077e:	4619      	mov	r1, r3
 8000780:	482a      	ldr	r0, [pc, #168]	; (800082c <HAL_I2S_MspInit+0x16c>)
 8000782:	f001 f8c1 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8000786:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000798:	2305      	movs	r3, #5
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a0:	4619      	mov	r1, r3
 80007a2:	4823      	ldr	r0, [pc, #140]	; (8000830 <HAL_I2S_MspInit+0x170>)
 80007a4:	f001 f8b0 	bl	8001908 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007aa:	4a23      	ldr	r2, [pc, #140]	; (8000838 <HAL_I2S_MspInit+0x178>)
 80007ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007b6:	2240      	movs	r2, #64	; 0x40
 80007b8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ce:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007e4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007ee:	2203      	movs	r2, #3
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_I2S_MspInit+0x174>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <HAL_I2S_MspInit+0x174>)
 8000800:	f000 fb28 	bl	8000e54 <HAL_DMA_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 800080a:	f000 f899 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_I2S_MspInit+0x174>)
 8000812:	639a      	str	r2, [r3, #56]	; 0x38
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <HAL_I2S_MspInit+0x174>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800081a:	bf00      	nop
 800081c:	3738      	adds	r7, #56	; 0x38
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40003800 	.word	0x40003800
 8000828:	40023800 	.word	0x40023800
 800082c:	40020800 	.word	0x40020800
 8000830:	40020400 	.word	0x40020400
 8000834:	20000190 	.word	0x20000190
 8000838:	40026070 	.word	0x40026070

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 f932 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f810 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f7ff feae 	bl	80005a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800084c:	f008 fa44 	bl	8008cd8 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 8000850:	f7ff fe8a 	bl	8000568 <MX_DMA_Init>
  MX_I2S2_Init();
 8000854:	f7ff ff06 	bl	8000664 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000858:	2101      	movs	r1, #1
 800085a:	4802      	ldr	r0, [pc, #8]	; (8000864 <main+0x28>)
 800085c:	f001 fb68 	bl	8001f30 <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000860:	e7fe      	b.n	8000860 <main+0x24>
 8000862:	bf00      	nop
 8000864:	40020800 	.word	0x40020800

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	; 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f008 ff20 	bl	80096bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <SystemClock_Config+0xd0>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a28      	ldr	r2, [pc, #160]	; (8000938 <SystemClock_Config+0xd0>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <SystemClock_Config+0xd0>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <SystemClock_Config+0xd4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a22      	ldr	r2, [pc, #136]	; (800093c <SystemClock_Config+0xd4>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <SystemClock_Config+0xd4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008dc:	23a8      	movs	r3, #168	; 0xa8
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e4:	2307      	movs	r3, #7
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fe25 	bl	800453c <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f8:	f000 f822 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000908:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2105      	movs	r1, #5
 800091a:	4618      	mov	r0, r3
 800091c:	f004 f936 	bl	8004b8c <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000926:	f000 f80b 	bl	8000940 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800092a:	f004 fabd 	bl	8004ea8 <HAL_RCC_EnableCSS>
}
 800092e:	bf00      	nop
 8000930:	3750      	adds	r7, #80	; 0x50
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>

0800094a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80009b4:	f004 fb96 	bl	80050e4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x8>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f8a4 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <DMA1_Stream4_IRQHandler+0x10>)
 8000a0e:	f000 fd11 	bl	8001434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000190 	.word	0x20000190

08000a1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <OTG_FS_IRQHandler+0x10>)
 8000a22:	f002 fc5e 	bl	80032e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200006d4 	.word	0x200006d4

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ffd7 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f008 fdf7 	bl	8009674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fed9 	bl	800083c <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000a98:	080098f0 	.word	0x080098f0
  ldr r2, =_sbss
 8000a9c:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000aa0:	20004834 	.word	0x20004834

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f94f 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff ff40 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f996 	bl	8000e3c <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f944 	bl	8000db4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	200001f0 	.word	0x200001f0

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	200001f0 	.word	0x200001f0

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b07      	cmp	r3, #7
 8000d80:	d00f      	beq.n	8000da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b06      	cmp	r3, #6
 8000d86:	d00c      	beq.n	8000da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d009      	beq.n	8000da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d006      	beq.n	8000da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d003      	beq.n	8000da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d9a:	2190      	movs	r1, #144	; 0x90
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000d9e:	f7ff fdd4 	bl	800094a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff16 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	080096e4 	.word	0x080096e4

08000db4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d903      	bls.n	8000dd4 <HAL_NVIC_SetPriority+0x20>
 8000dcc:	21a8      	movs	r1, #168	; 0xa8
 8000dce:	480e      	ldr	r0, [pc, #56]	; (8000e08 <HAL_NVIC_SetPriority+0x54>)
 8000dd0:	f7ff fdbb 	bl	800094a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	d903      	bls.n	8000de2 <HAL_NVIC_SetPriority+0x2e>
 8000dda:	21a9      	movs	r1, #169	; 0xa9
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <HAL_NVIC_SetPriority+0x54>)
 8000dde:	f7ff fdb4 	bl	800094a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de2:	f7ff ff1b 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000de6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	6978      	ldr	r0, [r7, #20]
 8000dee:	f7ff ff6b 	bl	8000cc8 <NVIC_EncodePriority>
 8000df2:	4602      	mov	r2, r0
 8000df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff3a 	bl	8000c74 <__NVIC_SetPriority>
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	080096e4 	.word	0x080096e4

08000e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da03      	bge.n	8000e26 <HAL_NVIC_EnableIRQ+0x1a>
 8000e1e:	21bc      	movs	r1, #188	; 0xbc
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_NVIC_EnableIRQ+0x2c>)
 8000e22:	f7ff fd92 	bl	800094a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff04 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	080096e4 	.word	0x080096e4

08000e3c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff73 	bl	8000d30 <SysTick_Config>
 8000e4a:	4603      	mov	r3, r0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff fe88 	bl	8000b74 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d101      	bne.n	8000e70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e203      	b.n	8001278 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a8b      	ldr	r2, [pc, #556]	; (80010a4 <HAL_DMA_Init+0x250>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d04e      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a8a      	ldr	r2, [pc, #552]	; (80010a8 <HAL_DMA_Init+0x254>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d049      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a88      	ldr	r2, [pc, #544]	; (80010ac <HAL_DMA_Init+0x258>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d044      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a87      	ldr	r2, [pc, #540]	; (80010b0 <HAL_DMA_Init+0x25c>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d03f      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a85      	ldr	r2, [pc, #532]	; (80010b4 <HAL_DMA_Init+0x260>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d03a      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <HAL_DMA_Init+0x264>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d035      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a82      	ldr	r2, [pc, #520]	; (80010bc <HAL_DMA_Init+0x268>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d030      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a81      	ldr	r2, [pc, #516]	; (80010c0 <HAL_DMA_Init+0x26c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d02b      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a7f      	ldr	r2, [pc, #508]	; (80010c4 <HAL_DMA_Init+0x270>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d026      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a7e      	ldr	r2, [pc, #504]	; (80010c8 <HAL_DMA_Init+0x274>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d021      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a7c      	ldr	r2, [pc, #496]	; (80010cc <HAL_DMA_Init+0x278>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d01c      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a7b      	ldr	r2, [pc, #492]	; (80010d0 <HAL_DMA_Init+0x27c>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d017      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a79      	ldr	r2, [pc, #484]	; (80010d4 <HAL_DMA_Init+0x280>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d012      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a78      	ldr	r2, [pc, #480]	; (80010d8 <HAL_DMA_Init+0x284>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00d      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a76      	ldr	r2, [pc, #472]	; (80010dc <HAL_DMA_Init+0x288>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d008      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a75      	ldr	r2, [pc, #468]	; (80010e0 <HAL_DMA_Init+0x28c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d003      	beq.n	8000f18 <HAL_DMA_Init+0xc4>
 8000f10:	21b7      	movs	r1, #183	; 0xb7
 8000f12:	4874      	ldr	r0, [pc, #464]	; (80010e4 <HAL_DMA_Init+0x290>)
 8000f14:	f7ff fd19 	bl	800094a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d026      	beq.n	8000f6e <HAL_DMA_Init+0x11a>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f28:	d021      	beq.n	8000f6e <HAL_DMA_Init+0x11a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f32:	d01c      	beq.n	8000f6e <HAL_DMA_Init+0x11a>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8000f3c:	d017      	beq.n	8000f6e <HAL_DMA_Init+0x11a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000f46:	d012      	beq.n	8000f6e <HAL_DMA_Init+0x11a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8000f50:	d00d      	beq.n	8000f6e <HAL_DMA_Init+0x11a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8000f5a:	d008      	beq.n	8000f6e <HAL_DMA_Init+0x11a>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8000f64:	d003      	beq.n	8000f6e <HAL_DMA_Init+0x11a>
 8000f66:	21b8      	movs	r1, #184	; 0xb8
 8000f68:	485e      	ldr	r0, [pc, #376]	; (80010e4 <HAL_DMA_Init+0x290>)
 8000f6a:	f7ff fcee 	bl	800094a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00b      	beq.n	8000f8e <HAL_DMA_Init+0x13a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b40      	cmp	r3, #64	; 0x40
 8000f7c:	d007      	beq.n	8000f8e <HAL_DMA_Init+0x13a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b80      	cmp	r3, #128	; 0x80
 8000f84:	d003      	beq.n	8000f8e <HAL_DMA_Init+0x13a>
 8000f86:	21b9      	movs	r1, #185	; 0xb9
 8000f88:	4856      	ldr	r0, [pc, #344]	; (80010e4 <HAL_DMA_Init+0x290>)
 8000f8a:	f7ff fcde 	bl	800094a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f96:	d007      	beq.n	8000fa8 <HAL_DMA_Init+0x154>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_DMA_Init+0x154>
 8000fa0:	21ba      	movs	r1, #186	; 0xba
 8000fa2:	4850      	ldr	r0, [pc, #320]	; (80010e4 <HAL_DMA_Init+0x290>)
 8000fa4:	f7ff fcd1 	bl	800094a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb0:	d007      	beq.n	8000fc2 <HAL_DMA_Init+0x16e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_DMA_Init+0x16e>
 8000fba:	21bb      	movs	r1, #187	; 0xbb
 8000fbc:	4849      	ldr	r0, [pc, #292]	; (80010e4 <HAL_DMA_Init+0x290>)
 8000fbe:	f7ff fcc4 	bl	800094a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_DMA_Init+0x192>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fd2:	d008      	beq.n	8000fe6 <HAL_DMA_Init+0x192>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fdc:	d003      	beq.n	8000fe6 <HAL_DMA_Init+0x192>
 8000fde:	21bc      	movs	r1, #188	; 0xbc
 8000fe0:	4840      	ldr	r0, [pc, #256]	; (80010e4 <HAL_DMA_Init+0x290>)
 8000fe2:	f7ff fcb2 	bl	800094a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00d      	beq.n	800100a <HAL_DMA_Init+0x1b6>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff6:	d008      	beq.n	800100a <HAL_DMA_Init+0x1b6>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001000:	d003      	beq.n	800100a <HAL_DMA_Init+0x1b6>
 8001002:	21bd      	movs	r1, #189	; 0xbd
 8001004:	4837      	ldr	r0, [pc, #220]	; (80010e4 <HAL_DMA_Init+0x290>)
 8001006:	f7ff fca0 	bl	800094a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00c      	beq.n	800102c <HAL_DMA_Init+0x1d8>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800101a:	d007      	beq.n	800102c <HAL_DMA_Init+0x1d8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	2b20      	cmp	r3, #32
 8001022:	d003      	beq.n	800102c <HAL_DMA_Init+0x1d8>
 8001024:	21be      	movs	r1, #190	; 0xbe
 8001026:	482f      	ldr	r0, [pc, #188]	; (80010e4 <HAL_DMA_Init+0x290>)
 8001028:	f7ff fc8f 	bl	800094a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d012      	beq.n	800105a <HAL_DMA_Init+0x206>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103c:	d00d      	beq.n	800105a <HAL_DMA_Init+0x206>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001046:	d008      	beq.n	800105a <HAL_DMA_Init+0x206>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001050:	d003      	beq.n	800105a <HAL_DMA_Init+0x206>
 8001052:	21bf      	movs	r1, #191	; 0xbf
 8001054:	4823      	ldr	r0, [pc, #140]	; (80010e4 <HAL_DMA_Init+0x290>)
 8001056:	f7ff fc78 	bl	800094a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_DMA_Init+0x21e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	2b04      	cmp	r3, #4
 8001068:	d003      	beq.n	8001072 <HAL_DMA_Init+0x21e>
 800106a:	21c0      	movs	r1, #192	; 0xc0
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <HAL_DMA_Init+0x290>)
 800106e:	f7ff fc6c 	bl	800094a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	2b00      	cmp	r3, #0
 8001078:	d064      	beq.n	8001144 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107e:	2b00      	cmp	r3, #0
 8001080:	d032      	beq.n	80010e8 <HAL_DMA_Init+0x294>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	2b01      	cmp	r3, #1
 8001088:	d02e      	beq.n	80010e8 <HAL_DMA_Init+0x294>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108e:	2b02      	cmp	r3, #2
 8001090:	d02a      	beq.n	80010e8 <HAL_DMA_Init+0x294>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	2b03      	cmp	r3, #3
 8001098:	d026      	beq.n	80010e8 <HAL_DMA_Init+0x294>
 800109a:	21c5      	movs	r1, #197	; 0xc5
 800109c:	4811      	ldr	r0, [pc, #68]	; (80010e4 <HAL_DMA_Init+0x290>)
 800109e:	f7ff fc54 	bl	800094a <assert_failed>
 80010a2:	e021      	b.n	80010e8 <HAL_DMA_Init+0x294>
 80010a4:	40026010 	.word	0x40026010
 80010a8:	40026028 	.word	0x40026028
 80010ac:	40026040 	.word	0x40026040
 80010b0:	40026058 	.word	0x40026058
 80010b4:	40026070 	.word	0x40026070
 80010b8:	40026088 	.word	0x40026088
 80010bc:	400260a0 	.word	0x400260a0
 80010c0:	400260b8 	.word	0x400260b8
 80010c4:	40026410 	.word	0x40026410
 80010c8:	40026428 	.word	0x40026428
 80010cc:	40026440 	.word	0x40026440
 80010d0:	40026458 	.word	0x40026458
 80010d4:	40026470 	.word	0x40026470
 80010d8:	40026488 	.word	0x40026488
 80010dc:	400264a0 	.word	0x400264a0
 80010e0:	400264b8 	.word	0x400264b8
 80010e4:	08009720 	.word	0x08009720
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d012      	beq.n	8001116 <HAL_DMA_Init+0x2c2>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80010f8:	d00d      	beq.n	8001116 <HAL_DMA_Init+0x2c2>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001102:	d008      	beq.n	8001116 <HAL_DMA_Init+0x2c2>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800110c:	d003      	beq.n	8001116 <HAL_DMA_Init+0x2c2>
 800110e:	21c6      	movs	r1, #198	; 0xc6
 8001110:	485b      	ldr	r0, [pc, #364]	; (8001280 <HAL_DMA_Init+0x42c>)
 8001112:	f7ff fc1a 	bl	800094a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	2b00      	cmp	r3, #0
 800111c:	d012      	beq.n	8001144 <HAL_DMA_Init+0x2f0>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001126:	d00d      	beq.n	8001144 <HAL_DMA_Init+0x2f0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001130:	d008      	beq.n	8001144 <HAL_DMA_Init+0x2f0>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800113a:	d003      	beq.n	8001144 <HAL_DMA_Init+0x2f0>
 800113c:	21c7      	movs	r1, #199	; 0xc7
 800113e:	4850      	ldr	r0, [pc, #320]	; (8001280 <HAL_DMA_Init+0x42c>)
 8001140:	f7ff fc03 	bl	800094a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2202      	movs	r2, #2
 8001148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001164:	e00f      	b.n	8001186 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001166:	f7ff fd05 	bl	8000b74 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b05      	cmp	r3, #5
 8001172:	d908      	bls.n	8001186 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2220      	movs	r2, #32
 8001178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e078      	b.n	8001278 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1e8      	bne.n	8001166 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <HAL_DMA_Init+0x430>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d107      	bne.n	80011f0 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4313      	orrs	r3, r2
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f023 0307 	bic.w	r3, r3, #7
 8001206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	4313      	orrs	r3, r2
 8001210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2b04      	cmp	r3, #4
 8001218:	d117      	bne.n	800124a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4313      	orrs	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00e      	beq.n	800124a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 faef 	bl	8001810 <DMA_CheckFifoParam>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d008      	beq.n	800124a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2240      	movs	r2, #64	; 0x40
 800123c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001246:	2301      	movs	r3, #1
 8001248:	e016      	b.n	8001278 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 faa6 	bl	80017a4 <DMA_CalcBaseAndBitshift>
 8001258:	4603      	mov	r3, r0
 800125a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001260:	223f      	movs	r2, #63	; 0x3f
 8001262:	409a      	lsls	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	08009720 	.word	0x08009720
 8001284:	f010803f 	.word	0xf010803f

08001288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_DMA_Start_IT+0x26>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d304      	bcc.n	80012b8 <HAL_DMA_Start_IT+0x30>
 80012ae:	f240 11cb 	movw	r1, #459	; 0x1cb
 80012b2:	4827      	ldr	r0, [pc, #156]	; (8001350 <HAL_DMA_Start_IT+0xc8>)
 80012b4:	f7ff fb49 	bl	800094a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_DMA_Start_IT+0x3e>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e040      	b.n	8001348 <HAL_DMA_Start_IT+0xc0>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d12f      	bne.n	800133a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2202      	movs	r2, #2
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 fa2a 	bl	8001748 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	223f      	movs	r2, #63	; 0x3f
 80012fa:	409a      	lsls	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0216 	orr.w	r2, r2, #22
 800130e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0208 	orr.w	r2, r2, #8
 8001326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e005      	b.n	8001346 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001342:	2302      	movs	r3, #2
 8001344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001346:	7dfb      	ldrb	r3, [r7, #23]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	08009720 	.word	0x08009720

08001354 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001362:	f7ff fc07 	bl	8000b74 <HAL_GetTick>
 8001366:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d008      	beq.n	8001386 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e052      	b.n	800142c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0216 	bic.w	r2, r2, #22
 8001394:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d103      	bne.n	80013b6 <HAL_DMA_Abort+0x62>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0208 	bic.w	r2, r2, #8
 80013c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d6:	e013      	b.n	8001400 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013d8:	f7ff fbcc 	bl	8000b74 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d90c      	bls.n	8001400 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2220      	movs	r2, #32
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2203      	movs	r2, #3
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e015      	b.n	800142c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1e4      	bne.n	80013d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	223f      	movs	r2, #63	; 0x3f
 8001414:	409a      	lsls	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001440:	4b8e      	ldr	r3, [pc, #568]	; (800167c <HAL_DMA_IRQHandler+0x248>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a8e      	ldr	r2, [pc, #568]	; (8001680 <HAL_DMA_IRQHandler+0x24c>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0a9b      	lsrs	r3, r3, #10
 800144c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145e:	2208      	movs	r2, #8
 8001460:	409a      	lsls	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01a      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0204 	bic.w	r2, r2, #4
 8001486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	2208      	movs	r2, #8
 800148e:	409a      	lsls	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001498:	f043 0201 	orr.w	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	2201      	movs	r2, #1
 80014a6:	409a      	lsls	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d012      	beq.n	80014d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	2201      	movs	r2, #1
 80014c4:	409a      	lsls	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ce:	f043 0202 	orr.w	r2, r3, #2
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014da:	2204      	movs	r2, #4
 80014dc:	409a      	lsls	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d012      	beq.n	800150c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	2204      	movs	r2, #4
 80014fa:	409a      	lsls	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001504:	f043 0204 	orr.w	r2, r3, #4
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	2210      	movs	r2, #16
 8001512:	409a      	lsls	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d043      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d03c      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	2210      	movs	r2, #16
 8001530:	409a      	lsls	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d018      	beq.n	8001576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d108      	bne.n	8001564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	2b00      	cmp	r3, #0
 8001558:	d024      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
 8001562:	e01f      	b.n	80015a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01b      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
 8001574:	e016      	b.n	80015a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d107      	bne.n	8001594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0208 	bic.w	r2, r2, #8
 8001592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2220      	movs	r2, #32
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 808f 	beq.w	80016d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8087 	beq.w	80016d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ca:	2220      	movs	r2, #32
 80015cc:	409a      	lsls	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d136      	bne.n	800164c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0216 	bic.w	r2, r2, #22
 80015ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d103      	bne.n	800160e <HAL_DMA_IRQHandler+0x1da>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0208 	bic.w	r2, r2, #8
 800161c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	223f      	movs	r2, #63	; 0x3f
 8001624:	409a      	lsls	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163e:	2b00      	cmp	r3, #0
 8001640:	d07e      	beq.n	8001740 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
        }
        return;
 800164a:	e079      	b.n	8001740 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d01d      	beq.n	8001696 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10d      	bne.n	8001684 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	2b00      	cmp	r3, #0
 800166e:	d031      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
 8001678:	e02c      	b.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
 800167a:	bf00      	nop
 800167c:	20000000 	.word	0x20000000
 8001680:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001688:	2b00      	cmp	r3, #0
 800168a:	d023      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	4798      	blx	r3
 8001694:	e01e      	b.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10f      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0210 	bic.w	r2, r2, #16
 80016b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d032      	beq.n	8001742 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d022      	beq.n	800172e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2205      	movs	r2, #5
 80016ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3301      	adds	r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	429a      	cmp	r2, r3
 800170a:	d307      	bcc.n	800171c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f2      	bne.n	8001700 <HAL_DMA_IRQHandler+0x2cc>
 800171a:	e000      	b.n	800171e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800171c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
 800173e:	e000      	b.n	8001742 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001740:	bf00      	nop
    }
  }
}
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001764:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b40      	cmp	r3, #64	; 0x40
 8001774:	d108      	bne.n	8001788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001786:	e007      	b.n	8001798 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	60da      	str	r2, [r3, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	3b10      	subs	r3, #16
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <DMA_CalcBaseAndBitshift+0x64>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <DMA_CalcBaseAndBitshift+0x68>)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d909      	bls.n	80017e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	1d1a      	adds	r2, r3, #4
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	659a      	str	r2, [r3, #88]	; 0x58
 80017e4:	e007      	b.n	80017f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	aaaaaaab 	.word	0xaaaaaaab
 800180c:	080098d8 	.word	0x080098d8

08001810 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d11f      	bne.n	800186a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d856      	bhi.n	80018de <DMA_CheckFifoParam+0xce>
 8001830:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <DMA_CheckFifoParam+0x28>)
 8001832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001836:	bf00      	nop
 8001838:	08001849 	.word	0x08001849
 800183c:	0800185b 	.word	0x0800185b
 8001840:	08001849 	.word	0x08001849
 8001844:	080018df 	.word	0x080018df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d046      	beq.n	80018e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001858:	e043      	b.n	80018e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001862:	d140      	bne.n	80018e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001868:	e03d      	b.n	80018e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001872:	d121      	bne.n	80018b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d837      	bhi.n	80018ea <DMA_CheckFifoParam+0xda>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <DMA_CheckFifoParam+0x70>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	08001891 	.word	0x08001891
 8001884:	08001897 	.word	0x08001897
 8001888:	08001891 	.word	0x08001891
 800188c:	080018a9 	.word	0x080018a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
      break;
 8001894:	e030      	b.n	80018f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d025      	beq.n	80018ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018a6:	e022      	b.n	80018ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018b0:	d11f      	bne.n	80018f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018b6:	e01c      	b.n	80018f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d903      	bls.n	80018c6 <DMA_CheckFifoParam+0xb6>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d003      	beq.n	80018cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018c4:	e018      	b.n	80018f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
      break;
 80018ca:	e015      	b.n	80018f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00e      	beq.n	80018f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
      break;
 80018dc:	e00b      	b.n	80018f6 <DMA_CheckFifoParam+0xe6>
      break;
 80018de:	bf00      	nop
 80018e0:	e00a      	b.n	80018f8 <DMA_CheckFifoParam+0xe8>
      break;
 80018e2:	bf00      	nop
 80018e4:	e008      	b.n	80018f8 <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
 80018e8:	e006      	b.n	80018f8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ea:	bf00      	nop
 80018ec:	e004      	b.n	80018f8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ee:	bf00      	nop
 80018f0:	e002      	b.n	80018f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <DMA_CheckFifoParam+0xe8>
      break;
 80018f6:	bf00      	nop
    }
  } 
  
  return status; 
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a39      	ldr	r2, [pc, #228]	; (8001a08 <HAL_GPIO_Init+0x100>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d023      	beq.n	800196e <HAL_GPIO_Init+0x66>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_GPIO_Init+0x104>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x66>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a37      	ldr	r2, [pc, #220]	; (8001a10 <HAL_GPIO_Init+0x108>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01b      	beq.n	800196e <HAL_GPIO_Init+0x66>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a36      	ldr	r2, [pc, #216]	; (8001a14 <HAL_GPIO_Init+0x10c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d017      	beq.n	800196e <HAL_GPIO_Init+0x66>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a35      	ldr	r2, [pc, #212]	; (8001a18 <HAL_GPIO_Init+0x110>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x66>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a34      	ldr	r2, [pc, #208]	; (8001a1c <HAL_GPIO_Init+0x114>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00f      	beq.n	800196e <HAL_GPIO_Init+0x66>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a33      	ldr	r2, [pc, #204]	; (8001a20 <HAL_GPIO_Init+0x118>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00b      	beq.n	800196e <HAL_GPIO_Init+0x66>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a32      	ldr	r2, [pc, #200]	; (8001a24 <HAL_GPIO_Init+0x11c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x66>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a31      	ldr	r2, [pc, #196]	; (8001a28 <HAL_GPIO_Init+0x120>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x66>
 8001966:	21ac      	movs	r1, #172	; 0xac
 8001968:	4830      	ldr	r0, [pc, #192]	; (8001a2c <HAL_GPIO_Init+0x124>)
 800196a:	f7fe ffee 	bl	800094a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_GPIO_Init+0x7c>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	041b      	lsls	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x84>
 8001984:	21ad      	movs	r1, #173	; 0xad
 8001986:	4829      	ldr	r0, [pc, #164]	; (8001a2c <HAL_GPIO_Init+0x124>)
 8001988:	f7fe ffdf 	bl	800094a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d035      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d031      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b11      	cmp	r3, #17
 80019a2:	d02d      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d029      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b12      	cmp	r3, #18
 80019b2:	d025      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80019bc:	d020      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80019c6:	d01b      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80019d0:	d016      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80019da:	d011      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80019e4:	d00c      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80019ee:	d007      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0xf8>
 80019f8:	21ae      	movs	r1, #174	; 0xae
 80019fa:	480c      	ldr	r0, [pc, #48]	; (8001a2c <HAL_GPIO_Init+0x124>)
 80019fc:	f7fe ffa5 	bl	800094a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	e242      	b.n	8001e8c <HAL_GPIO_Init+0x584>
 8001a06:	bf00      	nop
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020c00 	.word	0x40020c00
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40021400 	.word	0x40021400
 8001a20:	40021800 	.word	0x40021800
 8001a24:	40021c00 	.word	0x40021c00
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	08009758 	.word	0x08009758
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f040 821c 	bne.w	8001e86 <HAL_GPIO_Init+0x57e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d005      	beq.n	8001a66 <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d144      	bne.n	8001af0 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00f      	beq.n	8001a8e <HAL_GPIO_Init+0x186>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d00b      	beq.n	8001a8e <HAL_GPIO_Init+0x186>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x186>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x186>
 8001a86:	21c0      	movs	r1, #192	; 0xc0
 8001a88:	4881      	ldr	r0, [pc, #516]	; (8001c90 <HAL_GPIO_Init+0x388>)
 8001a8a:	f7fe ff5e 	bl	800094a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d027      	beq.n	8001b4c <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00b      	beq.n	8001b1c <HAL_GPIO_Init+0x214>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x214>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x214>
 8001b14:	21d1      	movs	r1, #209	; 0xd1
 8001b16:	485e      	ldr	r0, [pc, #376]	; (8001c90 <HAL_GPIO_Init+0x388>)
 8001b18:	f7fe ff17 	bl	800094a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	f040 80c1 	bne.w	8001cdc <HAL_GPIO_Init+0x3d4>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8098 	beq.w	8001c94 <HAL_GPIO_Init+0x38c>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	f000 8093 	beq.w	8001c94 <HAL_GPIO_Init+0x38c>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 808e 	beq.w	8001c94 <HAL_GPIO_Init+0x38c>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 8089 	beq.w	8001c94 <HAL_GPIO_Init+0x38c>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8084 	beq.w	8001c94 <HAL_GPIO_Init+0x38c>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d07f      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d07b      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d077      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d073      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d06f      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d06b      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d067      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d063      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d05f      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d05b      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d057      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d053      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b09      	cmp	r3, #9
 8001bf2:	d04f      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b06      	cmp	r3, #6
 8001bfa:	d04b      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	d047      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b07      	cmp	r3, #7
 8001c0a:	d043      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	d03f      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b07      	cmp	r3, #7
 8001c1a:	d03b      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d037      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d033      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d02f      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2b09      	cmp	r3, #9
 8001c3a:	d02b      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d027      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b0a      	cmp	r3, #10
 8001c4a:	d023      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b0a      	cmp	r3, #10
 8001c52:	d01f      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b0b      	cmp	r3, #11
 8001c5a:	d01b      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d017      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d013      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b0d      	cmp	r3, #13
 8001c72:	d00f      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d00b      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d007      	beq.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c84:	21de      	movs	r1, #222	; 0xde
 8001c86:	4802      	ldr	r0, [pc, #8]	; (8001c90 <HAL_GPIO_Init+0x388>)
 8001c88:	f7fe fe5f 	bl	800094a <assert_failed>
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_Init+0x38c>
 8001c8e:	bf00      	nop
 8001c90:	08009758 	.word	0x08009758
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80b4 	beq.w	8001e86 <HAL_GPIO_Init+0x57e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <HAL_GPIO_Init+0x598>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a5e      	ldr	r2, [pc, #376]	; (8001ea0 <HAL_GPIO_Init+0x598>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <HAL_GPIO_Init+0x598>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ea4 <HAL_GPIO_Init+0x59c>)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <HAL_GPIO_Init+0x5a0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02b      	beq.n	8001dbe <HAL_GPIO_Init+0x4b6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a50      	ldr	r2, [pc, #320]	; (8001eac <HAL_GPIO_Init+0x5a4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d025      	beq.n	8001dba <HAL_GPIO_Init+0x4b2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4f      	ldr	r2, [pc, #316]	; (8001eb0 <HAL_GPIO_Init+0x5a8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01f      	beq.n	8001db6 <HAL_GPIO_Init+0x4ae>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <HAL_GPIO_Init+0x5ac>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d019      	beq.n	8001db2 <HAL_GPIO_Init+0x4aa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <HAL_GPIO_Init+0x5b0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0x4a6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4c      	ldr	r2, [pc, #304]	; (8001ebc <HAL_GPIO_Init+0x5b4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00d      	beq.n	8001daa <HAL_GPIO_Init+0x4a2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4b      	ldr	r2, [pc, #300]	; (8001ec0 <HAL_GPIO_Init+0x5b8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x49e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4a      	ldr	r2, [pc, #296]	; (8001ec4 <HAL_GPIO_Init+0x5bc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_GPIO_Init+0x49a>
 8001d9e:	2307      	movs	r3, #7
 8001da0:	e00e      	b.n	8001dc0 <HAL_GPIO_Init+0x4b8>
 8001da2:	2308      	movs	r3, #8
 8001da4:	e00c      	b.n	8001dc0 <HAL_GPIO_Init+0x4b8>
 8001da6:	2306      	movs	r3, #6
 8001da8:	e00a      	b.n	8001dc0 <HAL_GPIO_Init+0x4b8>
 8001daa:	2305      	movs	r3, #5
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x4b8>
 8001dae:	2304      	movs	r3, #4
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x4b8>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x4b8>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x4b8>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x4b8>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd0:	4934      	ldr	r1, [pc, #208]	; (8001ea4 <HAL_GPIO_Init+0x59c>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dde:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <HAL_GPIO_Init+0x5c0>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x4fa>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e02:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <HAL_GPIO_Init+0x5c0>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e08:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <HAL_GPIO_Init+0x5c0>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x524>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e2c:	4a26      	ldr	r2, [pc, #152]	; (8001ec8 <HAL_GPIO_Init+0x5c0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e32:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_GPIO_Init+0x5c0>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x54e>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e56:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_GPIO_Init+0x5c0>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_GPIO_Init+0x5c0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x578>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e80:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_GPIO_Init+0x5c0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f adce 	bls.w	8001a30 <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40020c00 	.word	0x40020c00
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40021400 	.word	0x40021400
 8001ec0:	40021800 	.word	0x40021800
 8001ec4:	40021c00 	.word	0x40021c00
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d004      	beq.n	8001eec <HAL_GPIO_WritePin+0x20>
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x2a>
 8001eec:	f240 119d 	movw	r1, #413	; 0x19d
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <HAL_GPIO_WritePin+0x60>)
 8001ef2:	f7fe fd2a 	bl	800094a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001ef6:	787b      	ldrb	r3, [r7, #1]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_GPIO_WritePin+0x40>
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d004      	beq.n	8001f0c <HAL_GPIO_WritePin+0x40>
 8001f02:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001f06:	4809      	ldr	r0, [pc, #36]	; (8001f2c <HAL_GPIO_WritePin+0x60>)
 8001f08:	f7fe fd1f 	bl	800094a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f18:	e003      	b.n	8001f22 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	08009758 	.word	0x08009758

08001f30 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d004      	beq.n	8001f4c <HAL_GPIO_TogglePin+0x1c>
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	041b      	lsls	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <HAL_GPIO_TogglePin+0x26>
 8001f4c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001f50:	480a      	ldr	r0, [pc, #40]	; (8001f7c <HAL_GPIO_TogglePin+0x4c>)
 8001f52:	f7fe fcfa 	bl	800094a <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f5c:	887a      	ldrh	r2, [r7, #2]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	619a      	str	r2, [r3, #24]
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08009758 	.word	0x08009758

08001f80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1d1      	b.n	8002336 <HAL_I2S_Init+0x3b6>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a93      	ldr	r2, [pc, #588]	; (80021e4 <HAL_I2S_Init+0x264>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_I2S_Init+0x30>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a91      	ldr	r2, [pc, #580]	; (80021e8 <HAL_I2S_Init+0x268>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_I2S_Init+0x30>
 8001fa6:	f240 111b 	movw	r1, #283	; 0x11b
 8001faa:	4890      	ldr	r0, [pc, #576]	; (80021ec <HAL_I2S_Init+0x26c>)
 8001fac:	f7fe fccd 	bl	800094a <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_I2S_Init+0x60>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc0:	d00e      	beq.n	8001fe0 <HAL_I2S_Init+0x60>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fca:	d009      	beq.n	8001fe0 <HAL_I2S_Init+0x60>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fd4:	d004      	beq.n	8001fe0 <HAL_I2S_Init+0x60>
 8001fd6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001fda:	4884      	ldr	r0, [pc, #528]	; (80021ec <HAL_I2S_Init+0x26c>)
 8001fdc:	f7fe fcb5 	bl	800094a <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d014      	beq.n	8002012 <HAL_I2S_Init+0x92>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d010      	beq.n	8002012 <HAL_I2S_Init+0x92>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d00c      	beq.n	8002012 <HAL_I2S_Init+0x92>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b30      	cmp	r3, #48	; 0x30
 8001ffe:	d008      	beq.n	8002012 <HAL_I2S_Init+0x92>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2bb0      	cmp	r3, #176	; 0xb0
 8002006:	d004      	beq.n	8002012 <HAL_I2S_Init+0x92>
 8002008:	f240 111d 	movw	r1, #285	; 0x11d
 800200c:	4877      	ldr	r0, [pc, #476]	; (80021ec <HAL_I2S_Init+0x26c>)
 800200e:	f7fe fc9c 	bl	800094a <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_I2S_Init+0xbc>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d00c      	beq.n	800203c <HAL_I2S_Init+0xbc>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d008      	beq.n	800203c <HAL_I2S_Init+0xbc>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b05      	cmp	r3, #5
 8002030:	d004      	beq.n	800203c <HAL_I2S_Init+0xbc>
 8002032:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002036:	486d      	ldr	r0, [pc, #436]	; (80021ec <HAL_I2S_Init+0x26c>)
 8002038:	f7fe fc87 	bl	800094a <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002044:	d008      	beq.n	8002058 <HAL_I2S_Init+0xd8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_I2S_Init+0xd8>
 800204e:	f240 111f 	movw	r1, #287	; 0x11f
 8002052:	4866      	ldr	r0, [pc, #408]	; (80021ec <HAL_I2S_Init+0x26c>)
 8002054:	f7fe fc79 	bl	800094a <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002060:	d304      	bcc.n	800206c <HAL_I2S_Init+0xec>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4a62      	ldr	r2, [pc, #392]	; (80021f0 <HAL_I2S_Init+0x270>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d908      	bls.n	800207e <HAL_I2S_Init+0xfe>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d004      	beq.n	800207e <HAL_I2S_Init+0xfe>
 8002074:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002078:	485c      	ldr	r0, [pc, #368]	; (80021ec <HAL_I2S_Init+0x26c>)
 800207a:	f7fe fc66 	bl	800094a <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <HAL_I2S_Init+0x118>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b08      	cmp	r3, #8
 800208c:	d004      	beq.n	8002098 <HAL_I2S_Init+0x118>
 800208e:	f240 1121 	movw	r1, #289	; 0x121
 8002092:	4856      	ldr	r0, [pc, #344]	; (80021ec <HAL_I2S_Init+0x26c>)
 8002094:	f7fe fc59 	bl	800094a <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d008      	beq.n	80020b2 <HAL_I2S_Init+0x132>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <HAL_I2S_Init+0x132>
 80020a8:	f44f 7191 	mov.w	r1, #290	; 0x122
 80020ac:	484f      	ldr	r0, [pc, #316]	; (80021ec <HAL_I2S_Init+0x26c>)
 80020ae:	f7fe fc4c 	bl	800094a <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_I2S_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4a      	ldr	r2, [pc, #296]	; (80021f4 <HAL_I2S_Init+0x274>)
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7fe faf7 	bl	80006c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020e8:	f023 030f 	bic.w	r3, r3, #15
 80020ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2202      	movs	r2, #2
 80020f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d060      	beq.n	80021c0 <HAL_I2S_Init+0x240>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_I2S_Init+0x18c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002106:	2310      	movs	r3, #16
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e001      	b.n	8002110 <HAL_I2S_Init+0x190>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800210c:	2320      	movs	r3, #32
 800210e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b20      	cmp	r3, #32
 8002116:	d802      	bhi.n	800211e <HAL_I2S_Init+0x19e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800211e:	2001      	movs	r0, #1
 8002120:	f003 f9f6 	bl	8005510 <HAL_RCCEx_GetPeriphCLKFreq>
 8002124:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212e:	d125      	bne.n	800217c <HAL_I2S_Init+0x1fc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d010      	beq.n	800215a <HAL_I2S_Init+0x1da>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	461a      	mov	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	3305      	adds	r3, #5
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e01f      	b.n	800219a <HAL_I2S_Init+0x21a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	fbb2 f2f3 	udiv	r2, r2, r3
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	3305      	adds	r3, #5
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e00e      	b.n	800219a <HAL_I2S_Init+0x21a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fbb2 f2f3 	udiv	r2, r2, r3
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	3305      	adds	r3, #5
 8002198:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <HAL_I2S_Init+0x278>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e003      	b.n	80021c8 <HAL_I2S_Init+0x248>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d902      	bls.n	80021d4 <HAL_I2S_Init+0x254>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2bff      	cmp	r3, #255	; 0xff
 80021d2:	d913      	bls.n	80021fc <HAL_I2S_Init+0x27c>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	f043 0210 	orr.w	r2, r3, #16
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0a8      	b.n	8002336 <HAL_I2S_Init+0x3b6>
 80021e4:	40003800 	.word	0x40003800
 80021e8:	40003c00 	.word	0x40003c00
 80021ec:	08009794 	.word	0x08009794
 80021f0:	0002ee00 	.word	0x0002ee00
 80021f4:	080029e1 	.word	0x080029e1
 80021f8:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	ea42 0103 	orr.w	r1, r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	430a      	orrs	r2, r1
 800220e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800221a:	f023 030f 	bic.w	r3, r3, #15
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6851      	ldr	r1, [r2, #4]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6892      	ldr	r2, [r2, #8]
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68d2      	ldr	r2, [r2, #12]
 800222c:	4311      	orrs	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6992      	ldr	r2, [r2, #24]
 8002232:	430a      	orrs	r2, r1
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_I2S_Init+0x2da>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d004      	beq.n	800225a <HAL_I2S_Init+0x2da>
 8002250:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002254:	483a      	ldr	r0, [pc, #232]	; (8002340 <HAL_I2S_Init+0x3c0>)
 8002256:	f7fe fb78 	bl	800094a <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d161      	bne.n	8002326 <HAL_I2S_Init+0x3a6>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a37      	ldr	r2, [pc, #220]	; (8002344 <HAL_I2S_Init+0x3c4>)
 8002266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a36      	ldr	r2, [pc, #216]	; (8002348 <HAL_I2S_Init+0x3c8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_I2S_Init+0x2f6>
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_I2S_Init+0x3cc>)
 8002274:	e001      	b.n	800227a <HAL_I2S_Init+0x2fa>
 8002276:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	4931      	ldr	r1, [pc, #196]	; (8002348 <HAL_I2S_Init+0x3c8>)
 8002282:	428a      	cmp	r2, r1
 8002284:	d101      	bne.n	800228a <HAL_I2S_Init+0x30a>
 8002286:	4a31      	ldr	r2, [pc, #196]	; (800234c <HAL_I2S_Init+0x3cc>)
 8002288:	e001      	b.n	800228e <HAL_I2S_Init+0x30e>
 800228a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800228e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002292:	f023 030f 	bic.w	r3, r3, #15
 8002296:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2a      	ldr	r2, [pc, #168]	; (8002348 <HAL_I2S_Init+0x3c8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_I2S_Init+0x326>
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_I2S_Init+0x3cc>)
 80022a4:	e001      	b.n	80022aa <HAL_I2S_Init+0x32a>
 80022a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022aa:	2202      	movs	r2, #2
 80022ac:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a25      	ldr	r2, [pc, #148]	; (8002348 <HAL_I2S_Init+0x3c8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_I2S_Init+0x33c>
 80022b8:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_I2S_Init+0x3cc>)
 80022ba:	e001      	b.n	80022c0 <HAL_I2S_Init+0x340>
 80022bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022cc:	d003      	beq.n	80022d6 <HAL_I2S_Init+0x356>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <HAL_I2S_Init+0x35e>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	e001      	b.n	80022e2 <HAL_I2S_Init+0x362>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002300:	4313      	orrs	r3, r2
 8002302:	b29a      	uxth	r2, r3
 8002304:	897b      	ldrh	r3, [r7, #10]
 8002306:	4313      	orrs	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800230e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_I2S_Init+0x3c8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_I2S_Init+0x39e>
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_I2S_Init+0x3cc>)
 800231c:	e001      	b.n	8002322 <HAL_I2S_Init+0x3a2>
 800231e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002322:	897a      	ldrh	r2, [r7, #10]
 8002324:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	08009794 	.word	0x08009794
 8002344:	08002b69 	.word	0x08002b69
 8002348:	40003800 	.word	0x40003800
 800234c:	40003400 	.word	0x40003400

08002350 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_I2S_Transmit_DMA+0x1a>
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e08e      	b.n	800248c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_I2S_Transmit_DMA+0x2e>
 800237a:	2302      	movs	r3, #2
 800237c:	e086      	b.n	800248c <HAL_I2S_Transmit_DMA+0x13c>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d005      	beq.n	800239e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
 800239c:	e076      	b.n	800248c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2203      	movs	r2, #3
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d002      	beq.n	80023ca <HAL_I2S_Transmit_DMA+0x7a>
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d10a      	bne.n	80023e0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023de:	e005      	b.n	80023ec <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	88fa      	ldrh	r2, [r7, #6]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	4a28      	ldr	r2, [pc, #160]	; (8002494 <HAL_I2S_Transmit_DMA+0x144>)
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <HAL_I2S_Transmit_DMA+0x148>)
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	4a26      	ldr	r2, [pc, #152]	; (800249c <HAL_I2S_Transmit_DMA+0x14c>)
 8002402:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800240c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002414:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800241c:	f7fe ff34 	bl	8001288 <HAL_DMA_Start_IT>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00f      	beq.n	8002446 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f043 0208 	orr.w	r2, r3, #8
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e022      	b.n	800248c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002462:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0202 	orr.w	r2, r2, #2
 8002480:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	080028bf 	.word	0x080028bf
 8002498:	0800287d 	.word	0x0800287d
 800249c:	080028db 	.word	0x080028db

080024a0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	d004      	beq.n	80024c0 <HAL_I2S_DMAStop+0x20>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 80d1 	bne.w	8002662 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00f      	beq.n	80024e8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe ff41 	bl	8001354 <HAL_DMA_Abort>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f043 0208 	orr.w	r2, r3, #8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80024e8:	2364      	movs	r3, #100	; 0x64
 80024ea:	2201      	movs	r2, #1
 80024ec:	2102      	movs	r1, #2
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fb00 	bl	8002af4 <I2S_WaitFlagStateUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f043 0201 	orr.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002512:	2364      	movs	r3, #100	; 0x64
 8002514:	2200      	movs	r2, #0
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 faeb 	bl	8002af4 <I2S_WaitFlagStateUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0202 	bic.w	r2, r2, #2
 8002568:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b05      	cmp	r3, #5
 8002574:	f040 8165 	bne.w	8002842 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00f      	beq.n	80025a0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fee5 	bl	8001354 <HAL_DMA_Abort>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	f043 0208 	orr.w	r2, r3, #8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a8a      	ldr	r2, [pc, #552]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_I2S_DMAStop+0x10e>
 80025aa:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 80025ac:	e001      	b.n	80025b2 <HAL_I2S_DMAStop+0x112>
 80025ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4985      	ldr	r1, [pc, #532]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 80025ba:	428b      	cmp	r3, r1
 80025bc:	d101      	bne.n	80025c2 <HAL_I2S_DMAStop+0x122>
 80025be:	4b85      	ldr	r3, [pc, #532]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 80025c0:	e001      	b.n	80025c6 <HAL_I2S_DMAStop+0x126>
 80025c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ca:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a7e      	ldr	r2, [pc, #504]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_I2S_DMAStop+0x13e>
 80025da:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 80025dc:	e001      	b.n	80025e2 <HAL_I2S_DMAStop+0x142>
 80025de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a79      	ldr	r2, [pc, #484]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_I2S_DMAStop+0x154>
 80025f0:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 80025f2:	e001      	b.n	80025f8 <HAL_I2S_DMAStop+0x158>
 80025f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a73      	ldr	r2, [pc, #460]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d101      	bne.n	800260c <HAL_I2S_DMAStop+0x16c>
 8002608:	4b72      	ldr	r3, [pc, #456]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 800260a:	e001      	b.n	8002610 <HAL_I2S_DMAStop+0x170>
 800260c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	496e      	ldr	r1, [pc, #440]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 8002618:	428b      	cmp	r3, r1
 800261a:	d101      	bne.n	8002620 <HAL_I2S_DMAStop+0x180>
 800261c:	4b6d      	ldr	r3, [pc, #436]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 800261e:	e001      	b.n	8002624 <HAL_I2S_DMAStop+0x184>
 8002620:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800264a:	e0fa      	b.n	8002842 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5f      	ldr	r2, [pc, #380]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_I2S_DMAStop+0x1ba>
 8002656:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 8002658:	e001      	b.n	800265e <HAL_I2S_DMAStop+0x1be>
 800265a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800265e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002660:	e0ef      	b.n	8002842 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800266a:	d005      	beq.n	8002678 <HAL_I2S_DMAStop+0x1d8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002674:	f040 80e5 	bne.w	8002842 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00f      	beq.n	80026a0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fe65 	bl	8001354 <HAL_DMA_Abort>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	f043 0208 	orr.w	r2, r3, #8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	f040 809a 	bne.w	80027e2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00f      	beq.n	80026d6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fe4a 	bl	8001354 <HAL_DMA_Abort>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f043 0208 	orr.w	r2, r3, #8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80026d6:	f7fe fa4d 	bl	8000b74 <HAL_GetTick>
 80026da:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80026dc:	e012      	b.n	8002704 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80026de:	f7fe fa49 	bl	8000b74 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	; 0x64
 80026ea:	d90b      	bls.n	8002704 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_I2S_DMAStop+0x272>
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 8002710:	e001      	b.n	8002716 <HAL_I2S_DMAStop+0x276>
 8002712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d1de      	bne.n	80026de <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002720:	e012      	b.n	8002748 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002722:	f7fe fa27 	bl	8000b74 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b64      	cmp	r3, #100	; 0x64
 800272e:	d90b      	bls.n	8002748 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_I2S_DMAStop+0x2b6>
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 8002754:	e001      	b.n	800275a <HAL_I2S_DMAStop+0x2ba>
 8002756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	2b80      	cmp	r3, #128	; 0x80
 8002762:	d0de      	beq.n	8002722 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_I2S_DMAStop+0x2d2>
 800276e:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 8002770:	e001      	b.n	8002776 <HAL_I2S_DMAStop+0x2d6>
 8002772:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4914      	ldr	r1, [pc, #80]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 800277e:	428b      	cmp	r3, r1
 8002780:	d101      	bne.n	8002786 <HAL_I2S_DMAStop+0x2e6>
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 8002784:	e001      	b.n	800278a <HAL_I2S_DMAStop+0x2ea>
 8002786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800278a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_I2S_DMAStop+0x302>
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 80027a0:	e001      	b.n	80027a6 <HAL_I2S_DMAStop+0x306>
 80027a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d101      	bne.n	80027ba <HAL_I2S_DMAStop+0x31a>
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 80027b8:	e001      	b.n	80027be <HAL_I2S_DMAStop+0x31e>
 80027ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4902      	ldr	r1, [pc, #8]	; (80027d0 <HAL_I2S_DMAStop+0x330>)
 80027c6:	428b      	cmp	r3, r1
 80027c8:	d106      	bne.n	80027d8 <HAL_I2S_DMAStop+0x338>
 80027ca:	4b02      	ldr	r3, [pc, #8]	; (80027d4 <HAL_I2S_DMAStop+0x334>)
 80027cc:	e006      	b.n	80027dc <HAL_I2S_DMAStop+0x33c>
 80027ce:	bf00      	nop
 80027d0:	40003800 	.word	0x40003800
 80027d4:	40003400 	.word	0x40003400
 80027d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027dc:	f022 0202 	bic.w	r2, r2, #2
 80027e0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002820:	d10c      	bne.n	800283c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	77fb      	strb	r3, [r7, #31]
 800283a:	e002      	b.n	8002842 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800284a:	7ffb      	ldrb	r3, [r7, #31]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10e      	bne.n	80028b0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0202 	bic.w	r2, r2, #2
 80028a0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7fd fe47 	bl	8000544 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7fd fe27 	bl	8000520 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0203 	bic.w	r2, r2, #3
 80028f6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f043 0208 	orr.w	r2, r3, #8
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff ffa5 	bl	8002868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c9a      	adds	r2, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10e      	bne.n	800297a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800296a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fd fde5 	bl	8000544 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	b292      	uxth	r2, r2
 8002996:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	1c9a      	adds	r2, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10e      	bne.n	80029d8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ff3e 	bl	8002854 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d13a      	bne.n	8002a72 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d109      	bne.n	8002a1a <I2S_IRQHandler+0x3a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d102      	bne.n	8002a1a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ffb4 	bl	8002982 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d126      	bne.n	8002a72 <I2S_IRQHandler+0x92>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d11f      	bne.n	8002a72 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a40:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	f043 0202 	orr.w	r2, r3, #2
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fefb 	bl	8002868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d136      	bne.n	8002aec <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d109      	bne.n	8002a9c <I2S_IRQHandler+0xbc>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d102      	bne.n	8002a9c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ff45 	bl	8002926 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d122      	bne.n	8002aec <I2S_IRQHandler+0x10c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d11b      	bne.n	8002aec <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ac2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f043 0204 	orr.w	r2, r3, #4
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff febe 	bl	8002868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b04:	f7fe f836 	bl	8000b74 <HAL_GetTick>
 8002b08:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b0a:	e018      	b.n	8002b3e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d014      	beq.n	8002b3e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002b14:	f7fe f82e 	bl	8000b74 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d902      	bls.n	8002b2a <I2S_WaitFlagStateUntilTimeout+0x36>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e00f      	b.n	8002b5e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1d7      	bne.n	8002b0c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a92      	ldr	r2, [pc, #584]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b82:	4b92      	ldr	r3, [pc, #584]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b84:	e001      	b.n	8002b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a8b      	ldr	r2, [pc, #556]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ba0:	4b8a      	ldr	r3, [pc, #552]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ba2:	e001      	b.n	8002ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ba4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb4:	d004      	beq.n	8002bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 8099 	bne.w	8002cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d107      	bne.n	8002bda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f925 	bl	8002e24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f9c8 	bl	8002f84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d13a      	bne.n	8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d035      	beq.n	8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6e      	ldr	r2, [pc, #440]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c12:	4b6e      	ldr	r3, [pc, #440]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c14:	e001      	b.n	8002c1a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4969      	ldr	r1, [pc, #420]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c22:	428b      	cmp	r3, r1
 8002c24:	d101      	bne.n	8002c2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c26:	4b69      	ldr	r3, [pc, #420]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c28:	e001      	b.n	8002c2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c32:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0202 	orr.w	r2, r3, #2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fdfa 	bl	8002868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	f040 80c3 	bne.w	8002e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80bd 	beq.w	8002e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002ca6:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ca8:	e001      	b.n	8002cae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4944      	ldr	r1, [pc, #272]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cb6:	428b      	cmp	r3, r1
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cba:	4b44      	ldr	r3, [pc, #272]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cbc:	e001      	b.n	8002cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cc6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f043 0204 	orr.w	r2, r3, #4
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fdbc 	bl	8002868 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cf0:	e089      	b.n	8002e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d107      	bne.n	8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8be 	bl	8002e88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8fd 	bl	8002f20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d12f      	bne.n	8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d02a      	beq.n	8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d48:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d56:	e001      	b.n	8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4919      	ldr	r1, [pc, #100]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d64:	428b      	cmp	r3, r1
 8002d66:	d101      	bne.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d6a:	e001      	b.n	8002d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d74:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f043 0202 	orr.w	r2, r3, #2
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fd6c 	bl	8002868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d136      	bne.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d031      	beq.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002db0:	e001      	b.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002db2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4902      	ldr	r1, [pc, #8]	; (8002dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dbe:	428b      	cmp	r3, r1
 8002dc0:	d106      	bne.n	8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002dc2:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dc4:	e006      	b.n	8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002dc6:	bf00      	nop
 8002dc8:	40003800 	.word	0x40003800
 8002dcc:	40003400 	.word	0x40003400
 8002dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dd8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002de8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff fd32 	bl	8002868 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e04:	e000      	b.n	8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e06:	bf00      	nop
}
 8002e08:	bf00      	nop
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c99      	adds	r1, r3, #2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6251      	str	r1, [r2, #36]	; 0x24
 8002e36:	881a      	ldrh	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d113      	bne.n	8002e7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ffc9 	bl	8002e10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c99      	adds	r1, r3, #2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6251      	str	r1, [r2, #36]	; 0x24
 8002e9a:	8819      	ldrh	r1, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <I2SEx_TxISR_I2SExt+0x90>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <I2SEx_TxISR_I2SExt+0x22>
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <I2SEx_TxISR_I2SExt+0x94>)
 8002ea8:	e001      	b.n	8002eae <I2SEx_TxISR_I2SExt+0x26>
 8002eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eae:	460a      	mov	r2, r1
 8002eb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d121      	bne.n	8002f0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <I2SEx_TxISR_I2SExt+0x90>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <I2SEx_TxISR_I2SExt+0x50>
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <I2SEx_TxISR_I2SExt+0x94>)
 8002ed6:	e001      	b.n	8002edc <I2SEx_TxISR_I2SExt+0x54>
 8002ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	490d      	ldr	r1, [pc, #52]	; (8002f18 <I2SEx_TxISR_I2SExt+0x90>)
 8002ee4:	428b      	cmp	r3, r1
 8002ee6:	d101      	bne.n	8002eec <I2SEx_TxISR_I2SExt+0x64>
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <I2SEx_TxISR_I2SExt+0x94>)
 8002eea:	e001      	b.n	8002ef0 <I2SEx_TxISR_I2SExt+0x68>
 8002eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ef4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff81 	bl	8002e10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40003800 	.word	0x40003800
 8002f1c:	40003400 	.word	0x40003400

08002f20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68d8      	ldr	r0, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	1c99      	adds	r1, r3, #2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f38:	b282      	uxth	r2, r0
 8002f3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d113      	bne.n	8002f7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ff4a 	bl	8002e10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a20      	ldr	r2, [pc, #128]	; (8003014 <I2SEx_RxISR_I2SExt+0x90>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <I2SEx_RxISR_I2SExt+0x16>
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <I2SEx_RxISR_I2SExt+0x94>)
 8002f98:	e001      	b.n	8002f9e <I2SEx_RxISR_I2SExt+0x1a>
 8002f9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9e:	68d8      	ldr	r0, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	1c99      	adds	r1, r3, #2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002faa:	b282      	uxth	r2, r0
 8002fac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d121      	bne.n	800300a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <I2SEx_RxISR_I2SExt+0x90>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <I2SEx_RxISR_I2SExt+0x50>
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <I2SEx_RxISR_I2SExt+0x94>)
 8002fd2:	e001      	b.n	8002fd8 <I2SEx_RxISR_I2SExt+0x54>
 8002fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	490d      	ldr	r1, [pc, #52]	; (8003014 <I2SEx_RxISR_I2SExt+0x90>)
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	d101      	bne.n	8002fe8 <I2SEx_RxISR_I2SExt+0x64>
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <I2SEx_RxISR_I2SExt+0x94>)
 8002fe6:	e001      	b.n	8002fec <I2SEx_RxISR_I2SExt+0x68>
 8002fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ff0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff03 	bl	8002e10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40003800 	.word	0x40003800
 8003018:	40003400 	.word	0x40003400

0800301c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800301c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301e:	b08f      	sub	sp, #60	; 0x3c
 8003020:	af0a      	add	r7, sp, #40	; 0x28
 8003022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e11d      	b.n	800326a <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003036:	d008      	beq.n	800304a <HAL_PCD_Init+0x2e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a8d      	ldr	r2, [pc, #564]	; (8003274 <HAL_PCD_Init+0x258>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d003      	beq.n	800304a <HAL_PCD_Init+0x2e>
 8003042:	2187      	movs	r1, #135	; 0x87
 8003044:	488c      	ldr	r0, [pc, #560]	; (8003278 <HAL_PCD_Init+0x25c>)
 8003046:	f7fd fc80 	bl	800094a <assert_failed>

  USBx = hpcd->Instance;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f005 fff1 	bl	800904c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fbb4 	bl	80057f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	687e      	ldr	r6, [r7, #4]
 8003096:	466d      	mov	r5, sp
 8003098:	f106 0410 	add.w	r4, r6, #16
 800309c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80030ac:	1d33      	adds	r3, r6, #4
 80030ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b0:	6838      	ldr	r0, [r7, #0]
 80030b2:	f002 fa8b 	bl	80055cc <USB_CoreInit>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0d0      	b.n	800326a <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 fba2 	bl	8005818 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e04a      	b.n	8003170 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	333d      	adds	r3, #61	; 0x3d
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030ee:	7bfa      	ldrb	r2, [r7, #15]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	333c      	adds	r3, #60	; 0x3c
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	b298      	uxth	r0, r3
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3344      	adds	r3, #68	; 0x44
 8003116:	4602      	mov	r2, r0
 8003118:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3340      	adds	r3, #64	; 0x40
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3348      	adds	r3, #72	; 0x48
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334c      	adds	r3, #76	; 0x4c
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	3354      	adds	r3, #84	; 0x54
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	3301      	adds	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	429a      	cmp	r2, r3
 8003178:	d3af      	bcc.n	80030da <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
 800317e:	e044      	b.n	800320a <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	3301      	adds	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d3b5      	bcc.n	8003180 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	687e      	ldr	r6, [r7, #4]
 800321c:	466d      	mov	r5, sp
 800321e:	f106 0410 	add.w	r4, r6, #16
 8003222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800322e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003232:	1d33      	adds	r3, r6, #4
 8003234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003236:	6838      	ldr	r0, [r7, #0]
 8003238:	f002 fb3a 	bl	80058b0 <USB_DevInit>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e00d      	b.n	800326a <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f003 fc89 	bl	8006b7a <USB_DevDisconnect>

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003272:	bf00      	nop
 8003274:	40040000 	.word	0x40040000
 8003278:	080097cc 	.word	0x080097cc

0800327c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_PCD_Start+0x1c>
 8003294:	2302      	movs	r3, #2
 8003296:	e020      	b.n	80032da <HAL_PCD_Start+0x5e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d109      	bne.n	80032bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d005      	beq.n	80032bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 fa87 	bl	80057d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fc34 	bl	8006b38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032e2:	b590      	push	{r4, r7, lr}
 80032e4:	b08d      	sub	sp, #52	; 0x34
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 fcf2 	bl	8006ce2 <USB_GetMode>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	f040 848a 	bne.w	8003c1a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fc56 	bl	8006bbc <USB_ReadInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8480 	beq.w	8003c18 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f003 fc43 	bl	8006bbc <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b02      	cmp	r3, #2
 800333e:	d107      	bne.n	8003350 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f002 0202 	and.w	r2, r2, #2
 800334e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fc31 	bl	8006bbc <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b10      	cmp	r3, #16
 8003362:	d161      	bne.n	8003428 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0210 	bic.w	r2, r2, #16
 8003372:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f003 020f 	and.w	r2, r3, #15
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	0c5b      	lsrs	r3, r3, #17
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	2b02      	cmp	r3, #2
 800339e:	d124      	bne.n	80033ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d035      	beq.n	8003418 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	6a38      	ldr	r0, [r7, #32]
 80033c0:	f003 fa68 	bl	8006894 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d0:	441a      	add	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e2:	441a      	add	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
 80033e8:	e016      	b.n	8003418 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	0c5b      	lsrs	r3, r3, #17
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d110      	bne.n	8003418 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033fc:	2208      	movs	r2, #8
 80033fe:	4619      	mov	r1, r3
 8003400:	6a38      	ldr	r0, [r7, #32]
 8003402:	f003 fa47 	bl	8006894 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	6a1a      	ldr	r2, [r3, #32]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003412:	441a      	add	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0210 	orr.w	r2, r2, #16
 8003426:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f003 fbc5 	bl	8006bbc <USB_ReadInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003438:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800343c:	f040 80a7 	bne.w	800358e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f003 fbca 	bl	8006be2 <USB_ReadDevAllOutEpInterrupt>
 800344e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003450:	e099      	b.n	8003586 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 808e 	beq.w	800357a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f003 fbee 	bl	8006c4a <USB_ReadDevOutEPInterrupt>
 800346e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003486:	461a      	mov	r2, r3
 8003488:	2301      	movs	r3, #1
 800348a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800348c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fec2 	bl	8004218 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	2308      	movs	r3, #8
 80034ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 ff98 	bl	80043e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ce:	461a      	mov	r2, r3
 80034d0:	2310      	movs	r3, #16
 80034d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d030      	beq.n	8003540 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	d109      	bne.n	80034fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	78db      	ldrb	r3, [r3, #3]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d108      	bne.n	800352e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	b2db      	uxtb	r3, r3
 8003526:	4619      	mov	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f005 fe95 	bl	8009258 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353a:	461a      	mov	r2, r3
 800353c:	2302      	movs	r3, #2
 800353e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003556:	461a      	mov	r2, r3
 8003558:	2320      	movs	r3, #32
 800355a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003578:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	3301      	adds	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f af62 	bne.w	8003452 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f003 fb12 	bl	8006bbc <USB_ReadInterrupts>
 8003598:	4603      	mov	r3, r0
 800359a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035a2:	f040 80db 	bne.w	800375c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 fb33 	bl	8006c16 <USB_ReadDevAllInEpInterrupt>
 80035b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035b6:	e0cd      	b.n	8003754 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80c2 	beq.w	8003748 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 fb59 	bl	8006c86 <USB_ReadDevInEPInterrupt>
 80035d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d057      	beq.n	8003690 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	2201      	movs	r2, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003600:	4013      	ands	r3, r2
 8003602:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	461a      	mov	r2, r3
 8003612:	2301      	movs	r3, #1
 8003614:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d132      	bne.n	8003684 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	334c      	adds	r3, #76	; 0x4c
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4403      	add	r3, r0
 800363e:	3348      	adds	r3, #72	; 0x48
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4419      	add	r1, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4403      	add	r3, r0
 8003652:	334c      	adds	r3, #76	; 0x4c
 8003654:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	d113      	bne.n	8003684 <HAL_PCD_IRQHandler+0x3a2>
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3354      	adds	r3, #84	; 0x54
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800367c:	461a      	mov	r2, r3
 800367e:	2101      	movs	r1, #1
 8003680:	f003 fb60 	bl	8006d44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	b2db      	uxtb	r3, r3
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f005 fd5f 	bl	800914e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a6:	461a      	mov	r2, r3
 80036a8:	2308      	movs	r3, #8
 80036aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	461a      	mov	r2, r3
 80036c4:	2310      	movs	r3, #16
 80036c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036de:	461a      	mov	r2, r3
 80036e0:	2340      	movs	r3, #64	; 0x40
 80036e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d023      	beq.n	8003736 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f0:	6a38      	ldr	r0, [r7, #32]
 80036f2:	f002 fa41 	bl	8005b78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	3338      	adds	r3, #56	; 0x38
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	78db      	ldrb	r3, [r3, #3]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d108      	bne.n	8003724 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f005 fdac 	bl	800927c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003730:	461a      	mov	r2, r3
 8003732:	2302      	movs	r3, #2
 8003734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fcdb 	bl	80040fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	3301      	adds	r3, #1
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	2b00      	cmp	r3, #0
 8003758:	f47f af2e 	bne.w	80035b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f003 fa2b 	bl	8006bbc <USB_ReadInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800376c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003770:	d122      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800378c:	2b01      	cmp	r3, #1
 800378e:	d108      	bne.n	80037a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003798:	2100      	movs	r1, #0
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fec2 	bl	8004524 <HAL_PCDEx_LPM_Callback>
 80037a0:	e002      	b.n	80037a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f005 fd4a 	bl	800923c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f003 f9fd 	bl	8006bbc <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037cc:	d112      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d102      	bne.n	80037e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f005 fd06 	bl	80091f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 f9df 	bl	8006bbc <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	f040 80b7 	bne.w	800397a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2110      	movs	r1, #16
 8003826:	4618      	mov	r0, r3
 8003828:	f002 f9a6 	bl	8005b78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382c:	2300      	movs	r3, #0
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003830:	e046      	b.n	80038c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	461a      	mov	r2, r3
 8003840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003844:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	440a      	add	r2, r1
 800385c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003860:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003864:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003878:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388a:	0151      	lsls	r1, r2, #5
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	440a      	add	r2, r1
 8003890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003898:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038aa:	0151      	lsls	r1, r2, #5
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	440a      	add	r2, r1
 80038b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	3301      	adds	r3, #1
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d3b3      	bcc.n	8003832 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f6:	f043 030b 	orr.w	r3, r3, #11
 80038fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390c:	f043 030b 	orr.w	r3, r3, #11
 8003910:	6453      	str	r3, [r2, #68]	; 0x44
 8003912:	e015      	b.n	8003940 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003926:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800392a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393a:	f043 030b 	orr.w	r3, r3, #11
 800393e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003952:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003964:	461a      	mov	r2, r3
 8003966:	f003 f9ed 	bl	8006d44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f003 f91c 	bl	8006bbc <USB_ReadInterrupts>
 8003984:	4603      	mov	r3, r0
 8003986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800398a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398e:	d124      	bne.n	80039da <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f003 f9b2 	bl	8006cfe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 f967 	bl	8005c72 <USB_GetDevSpeed>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681c      	ldr	r4, [r3, #0]
 80039b0:	f001 fb8c 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 80039b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	4620      	mov	r0, r4
 80039c0:	f001 fe66 	bl	8005690 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f005 fbea 	bl	800919e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 f8ec 	bl	8006bbc <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d10a      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f005 fbc7 	bl	8009182 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f002 0208 	and.w	r2, r2, #8
 8003a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f003 f8d7 	bl	8006bbc <USB_ReadInterrupts>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d122      	bne.n	8003a5e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a24:	2301      	movs	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	e014      	b.n	8003a54 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fb27 	bl	800409c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	3301      	adds	r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3e5      	bcc.n	8003a2a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f003 f8aa 	bl	8006bbc <USB_ReadInterrupts>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a72:	d13b      	bne.n	8003aec <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a74:	2301      	movs	r3, #1
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
 8003a78:	e02b      	b.n	8003ad2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3340      	adds	r3, #64	; 0x40
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d115      	bne.n	8003acc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003aa0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	da12      	bge.n	8003acc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	333f      	adds	r3, #63	; 0x3f
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fae8 	bl	800409c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	3301      	adds	r3, #1
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3ce      	bcc.n	8003a7a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f003 f863 	bl	8006bbc <USB_ReadInterrupts>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b00:	d155      	bne.n	8003bae <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b02:	2301      	movs	r3, #1
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e045      	b.n	8003b94 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d12e      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	da2b      	bge.n	8003b8e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d121      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b8a:	6053      	str	r3, [r2, #4]
            break;
 8003b8c:	e007      	b.n	8003b9e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	3301      	adds	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d3b4      	bcc.n	8003b08 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 f802 	bl	8006bbc <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d10a      	bne.n	8003bda <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f005 fb6b 	bl	80092a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f002 ffec 	bl	8006bbc <USB_ReadInterrupts>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d115      	bne.n	8003c1a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f005 fb5b 	bl	80092bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	e000      	b.n	8003c1a <HAL_PCD_IRQHandler+0x938>
      return;
 8003c18:	bf00      	nop
    }
  }
}
 8003c1a:	3734      	adds	r7, #52	; 0x34
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd90      	pop	{r4, r7, pc}

08003c20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_PCD_SetAddress+0x1a>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e013      	b.n	8003c62 <HAL_PCD_SetAddress+0x42>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f002 ff4a 	bl	8006aec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	4608      	mov	r0, r1
 8003c74:	4611      	mov	r1, r2
 8003c76:	461a      	mov	r2, r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	70fb      	strb	r3, [r7, #3]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	803b      	strh	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da0f      	bge.n	8003cb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	3338      	adds	r3, #56	; 0x38
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	705a      	strb	r2, [r3, #1]
 8003cae:	e00f      	b.n	8003cd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 020f 	and.w	r2, r3, #15
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cdc:	883a      	ldrh	r2, [r7, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	78ba      	ldrb	r2, [r7, #2]
 8003ce6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cfa:	78bb      	ldrb	r3, [r7, #2]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d102      	bne.n	8003d06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_PCD_EP_Open+0xaa>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e00e      	b.n	8003d32 <HAL_PCD_EP_Open+0xc8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f001 ffca 	bl	8005cbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d30:	7afb      	ldrb	r3, [r7, #11]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da0f      	bge.n	8003d6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	3338      	adds	r3, #56	; 0x38
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	3304      	adds	r3, #4
 8003d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	705a      	strb	r2, [r3, #1]
 8003d6c:	e00f      	b.n	8003d8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	f003 020f 	and.w	r2, r3, #15
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4413      	add	r3, r2
 8003d84:	3304      	adds	r3, #4
 8003d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_PCD_EP_Close+0x6e>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e00e      	b.n	8003dc6 <HAL_PCD_EP_Close+0x8c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f002 f808 	bl	8005dcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dde:	7afb      	ldrb	r3, [r7, #11]
 8003de0:	f003 020f 	and.w	r2, r3, #15
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2200      	movs	r2, #0
 8003e08:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d102      	bne.n	8003e2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e2a:	7afb      	ldrb	r3, [r7, #11]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6979      	ldr	r1, [r7, #20]
 8003e42:	f002 fae7 	bl	8006414 <USB_EP0StartXfer>
 8003e46:	e008      	b.n	8003e5a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	6979      	ldr	r1, [r7, #20]
 8003e56:	f002 f895 	bl	8005f84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	f003 020f 	and.w	r2, r3, #15
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea4:	7afb      	ldrb	r3, [r7, #11]
 8003ea6:	f003 020f 	and.w	r2, r3, #15
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	3338      	adds	r3, #56	; 0x38
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3304      	adds	r3, #4
 8003eba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d102      	bne.n	8003eee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eee:	7afb      	ldrb	r3, [r7, #11]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	6979      	ldr	r1, [r7, #20]
 8003f06:	f002 fa85 	bl	8006414 <USB_EP0StartXfer>
 8003f0a:	e008      	b.n	8003f1e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	6979      	ldr	r1, [r7, #20]
 8003f1a:	f002 f833 	bl	8005f84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	f003 020f 	and.w	r2, r3, #15
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d901      	bls.n	8003f46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e050      	b.n	8003fe8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	da0f      	bge.n	8003f6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	f003 020f 	and.w	r2, r3, #15
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	3338      	adds	r3, #56	; 0x38
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	3304      	adds	r3, #4
 8003f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	705a      	strb	r2, [r3, #1]
 8003f6c:	e00d      	b.n	8003f8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4413      	add	r3, r2
 8003f80:	3304      	adds	r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_PCD_EP_SetStall+0x82>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e01e      	b.n	8003fe8 <HAL_PCD_EP_SetStall+0xc0>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68f9      	ldr	r1, [r7, #12]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f002 fcc3 	bl	8006944 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	b2d9      	uxtb	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f002 feb3 	bl	8006d44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 020f 	and.w	r2, r3, #15
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	d901      	bls.n	800400e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e042      	b.n	8004094 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800400e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004012:	2b00      	cmp	r3, #0
 8004014:	da0f      	bge.n	8004036 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	f003 020f 	and.w	r2, r3, #15
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	3338      	adds	r3, #56	; 0x38
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4413      	add	r3, r2
 800402a:	3304      	adds	r3, #4
 800402c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	705a      	strb	r2, [r3, #1]
 8004034:	e00f      	b.n	8004056 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	3304      	adds	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_PCD_EP_ClrStall+0x86>
 8004072:	2302      	movs	r3, #2
 8004074:	e00e      	b.n	8004094 <HAL_PCD_EP_ClrStall+0xa4>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	4618      	mov	r0, r3
 8004086:	f002 fccb 	bl	8006a20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	da0c      	bge.n	80040ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	f003 020f 	and.w	r2, r3, #15
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	3338      	adds	r3, #56	; 0x38
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	3304      	adds	r3, #4
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e00c      	b.n	80040e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	f003 020f 	and.w	r2, r3, #15
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	3304      	adds	r3, #4
 80040e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68f9      	ldr	r1, [r7, #12]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 faea 	bl	80066c4 <USB_EPStopXfer>
 80040f0:	4603      	mov	r3, r0
 80040f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040f4:	7afb      	ldrb	r3, [r7, #11]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b08a      	sub	sp, #40	; 0x28
 8004102:	af02      	add	r7, sp, #8
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	3338      	adds	r3, #56	; 0x38
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	3304      	adds	r3, #4
 8004124:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1a      	ldr	r2, [r3, #32]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	429a      	cmp	r2, r3
 8004130:	d901      	bls.n	8004136 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e06c      	b.n	8004210 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	429a      	cmp	r2, r3
 800414a:	d902      	bls.n	8004152 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3303      	adds	r3, #3
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800415a:	e02b      	b.n	80041b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	429a      	cmp	r2, r3
 8004170:	d902      	bls.n	8004178 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3303      	adds	r3, #3
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6919      	ldr	r1, [r3, #16]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004190:	b2db      	uxtb	r3, r3
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	4603      	mov	r3, r0
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f002 fb3e 	bl	8006818 <USB_WritePacket>

    ep->xfer_buff  += len;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	441a      	add	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1a      	ldr	r2, [r3, #32]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	441a      	add	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d809      	bhi.n	80041de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d203      	bcs.n	80041de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1be      	bne.n	800415c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d811      	bhi.n	800420e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	2201      	movs	r2, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	43db      	mvns	r3, r3
 8004204:	6939      	ldr	r1, [r7, #16]
 8004206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800420a:	4013      	ands	r3, r2
 800420c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	333c      	adds	r3, #60	; 0x3c
 8004230:	3304      	adds	r3, #4
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d17b      	bne.n	8004346 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	4a61      	ldr	r2, [pc, #388]	; (80043e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	f240 80b9 	bls.w	80043d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80b3 	beq.w	80043d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427a:	461a      	mov	r2, r3
 800427c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004280:	6093      	str	r3, [r2, #8]
 8004282:	e0a7      	b.n	80043d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429a:	461a      	mov	r2, r3
 800429c:	2320      	movs	r3, #32
 800429e:	6093      	str	r3, [r2, #8]
 80042a0:	e098      	b.n	80043d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f040 8093 	bne.w	80043d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4a4b      	ldr	r2, [pc, #300]	; (80043e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d90f      	bls.n	80042d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	461a      	mov	r2, r3
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	6093      	str	r3, [r2, #8]
 80042d4:	e07e      	b.n	80043d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4413      	add	r3, r2
 80042e8:	3304      	adds	r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	0159      	lsls	r1, r3, #5
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	440b      	add	r3, r1
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004302:	1ad2      	subs	r2, r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d114      	bne.n	8004338 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004320:	461a      	mov	r2, r3
 8004322:	2101      	movs	r1, #1
 8004324:	f002 fd0e 	bl	8006d44 <USB_EP0_OutStart>
 8004328:	e006      	b.n	8004338 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	441a      	add	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f004 feea 	bl	8009118 <HAL_PCD_DataOutStageCallback>
 8004344:	e046      	b.n	80043d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d124      	bne.n	8004398 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436a:	6093      	str	r3, [r2, #8]
 800436c:	e032      	b.n	80043d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004384:	461a      	mov	r2, r3
 8004386:	2320      	movs	r3, #32
 8004388:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f004 fec1 	bl	8009118 <HAL_PCD_DataOutStageCallback>
 8004396:	e01d      	b.n	80043d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d114      	bne.n	80043c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d108      	bne.n	80043c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043c0:	461a      	mov	r2, r3
 80043c2:	2100      	movs	r1, #0
 80043c4:	f002 fcbe 	bl	8006d44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	4619      	mov	r1, r3
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f004 fea2 	bl	8009118 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	4f54300a 	.word	0x4f54300a
 80043e4:	4f54310a 	.word	0x4f54310a

080043e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	333c      	adds	r3, #60	; 0x3c
 8004400:	3304      	adds	r3, #4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <PCD_EP_OutSetupPacket_int+0x88>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d90e      	bls.n	800443c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	461a      	mov	r2, r3
 8004436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f004 fe59 	bl	80090f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <PCD_EP_OutSetupPacket_int+0x88>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d90c      	bls.n	8004464 <PCD_EP_OutSetupPacket_int+0x7c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d108      	bne.n	8004464 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800445c:	461a      	mov	r2, r3
 800445e:	2101      	movs	r1, #1
 8004460:	f002 fc70 	bl	8006d44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	4f54300a 	.word	0x4f54300a

08004474 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
 8004480:	4613      	mov	r3, r2
 8004482:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d107      	bne.n	80044a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004492:	883b      	ldrh	r3, [r7, #0]
 8004494:	0419      	lsls	r1, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	430a      	orrs	r2, r1
 800449e:	629a      	str	r2, [r3, #40]	; 0x28
 80044a0:	e028      	b.n	80044f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	4413      	add	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e00d      	b.n	80044d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	3340      	adds	r3, #64	; 0x40
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	4413      	add	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	3301      	adds	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	429a      	cmp	r2, r3
 80044da:	d3ec      	bcc.n	80044b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044dc:	883b      	ldrh	r3, [r7, #0]
 80044de:	0418      	lsls	r0, r3, #16
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4302      	orrs	r2, r0
 80044ec:	3340      	adds	r3, #64	; 0x40
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	887a      	ldrh	r2, [r7, #2]
 8004514:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e314      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d903      	bls.n	800455e <HAL_RCC_OscConfig+0x22>
 8004556:	21e6      	movs	r1, #230	; 0xe6
 8004558:	4897      	ldr	r0, [pc, #604]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800455a:	f7fc f9f6 	bl	800094a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8088 	beq.w	800467c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00d      	beq.n	8004590 <HAL_RCC_OscConfig+0x54>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457c:	d008      	beq.n	8004590 <HAL_RCC_OscConfig+0x54>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004586:	d003      	beq.n	8004590 <HAL_RCC_OscConfig+0x54>
 8004588:	21eb      	movs	r1, #235	; 0xeb
 800458a:	488b      	ldr	r0, [pc, #556]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800458c:	f7fc f9dd 	bl	800094a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004590:	4b8a      	ldr	r3, [pc, #552]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b04      	cmp	r3, #4
 800459a:	d00c      	beq.n	80045b6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459c:	4b87      	ldr	r3, [pc, #540]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d112      	bne.n	80045ce <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a8:	4b84      	ldr	r3, [pc, #528]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b4:	d10b      	bne.n	80045ce <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b6:	4b81      	ldr	r3, [pc, #516]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d05b      	beq.n	800467a <HAL_RCC_OscConfig+0x13e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d157      	bne.n	800467a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e2d4      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d6:	d106      	bne.n	80045e6 <HAL_RCC_OscConfig+0xaa>
 80045d8:	4b78      	ldr	r3, [pc, #480]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a77      	ldr	r2, [pc, #476]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80045de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	e01d      	b.n	8004622 <HAL_RCC_OscConfig+0xe6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ee:	d10c      	bne.n	800460a <HAL_RCC_OscConfig+0xce>
 80045f0:	4b72      	ldr	r3, [pc, #456]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a71      	ldr	r2, [pc, #452]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80045f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b6f      	ldr	r3, [pc, #444]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6e      	ldr	r2, [pc, #440]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 8004602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	e00b      	b.n	8004622 <HAL_RCC_OscConfig+0xe6>
 800460a:	4b6c      	ldr	r3, [pc, #432]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6b      	ldr	r2, [pc, #428]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 8004610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	4b69      	ldr	r3, [pc, #420]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a68      	ldr	r2, [pc, #416]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 800461c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004620:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d013      	beq.n	8004652 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462a:	f7fc faa3 	bl	8000b74 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004632:	f7fc fa9f 	bl	8000b74 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b64      	cmp	r3, #100	; 0x64
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e299      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004644:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0xf6>
 8004650:	e014      	b.n	800467c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004652:	f7fc fa8f 	bl	8000b74 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800465a:	f7fc fa8b 	bl	8000b74 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b64      	cmp	r3, #100	; 0x64
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e285      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466c:	4b53      	ldr	r3, [pc, #332]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x11e>
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d079      	beq.n	800477c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCC_OscConfig+0x166>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d004      	beq.n	80046a2 <HAL_RCC_OscConfig+0x166>
 8004698:	f240 111d 	movw	r1, #285	; 0x11d
 800469c:	4846      	ldr	r0, [pc, #280]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800469e:	f7fc f954 	bl	800094a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b1f      	cmp	r3, #31
 80046a8:	d904      	bls.n	80046b4 <HAL_RCC_OscConfig+0x178>
 80046aa:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80046ae:	4842      	ldr	r0, [pc, #264]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 80046b0:	f7fc f94b 	bl	800094a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046b4:	4b41      	ldr	r3, [pc, #260]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c0:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d11c      	bne.n	8004706 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046cc:	4b3b      	ldr	r3, [pc, #236]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d116      	bne.n	8004706 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d8:	4b38      	ldr	r3, [pc, #224]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_OscConfig+0x1b4>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e243      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b32      	ldr	r3, [pc, #200]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	492f      	ldr	r1, [pc, #188]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 8004700:	4313      	orrs	r3, r2
 8004702:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004704:	e03a      	b.n	800477c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d020      	beq.n	8004750 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800470e:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <HAL_RCC_OscConfig+0x284>)
 8004710:	2201      	movs	r2, #1
 8004712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004714:	f7fc fa2e 	bl	8000b74 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471c:	f7fc fa2a 	bl	8000b74 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e224      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472e:	4b23      	ldr	r3, [pc, #140]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	491c      	ldr	r1, [pc, #112]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]
 800474e:	e015      	b.n	800477c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x284>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fc fa0d 	bl	8000b74 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800475e:	f7fc fa09 	bl	8000b74 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e203      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d045      	beq.n	8004814 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCC_OscConfig+0x266>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d004      	beq.n	80047a2 <HAL_RCC_OscConfig+0x266>
 8004798:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800479c:	4806      	ldr	r0, [pc, #24]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800479e:	f7fc f8d4 	bl	800094a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01e      	beq.n	80047e8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_OscConfig+0x288>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fc f9e0 	bl	8000b74 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b6:	e010      	b.n	80047da <HAL_RCC_OscConfig+0x29e>
 80047b8:	08009804 	.word	0x08009804
 80047bc:	40023800 	.word	0x40023800
 80047c0:	42470000 	.word	0x42470000
 80047c4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c8:	f7fc f9d4 	bl	8000b74 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e1ce      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047da:	4b5e      	ldr	r3, [pc, #376]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80047dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x28c>
 80047e6:	e015      	b.n	8004814 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e8:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <HAL_RCC_OscConfig+0x41c>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ee:	f7fc f9c1 	bl	8000b74 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f6:	f7fc f9bd 	bl	8000b74 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1b7      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004808:	4b52      	ldr	r3, [pc, #328]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 800480a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f0      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80b0 	beq.w	8004982 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004822:	2300      	movs	r3, #0
 8004824:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00c      	beq.n	8004848 <HAL_RCC_OscConfig+0x30c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d008      	beq.n	8004848 <HAL_RCC_OscConfig+0x30c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b05      	cmp	r3, #5
 800483c:	d004      	beq.n	8004848 <HAL_RCC_OscConfig+0x30c>
 800483e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004842:	4846      	ldr	r0, [pc, #280]	; (800495c <HAL_RCC_OscConfig+0x420>)
 8004844:	f7fc f881 	bl	800094a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004848:	4b42      	ldr	r3, [pc, #264]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10f      	bne.n	8004874 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]
 8004858:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	4a3d      	ldr	r2, [pc, #244]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	6413      	str	r3, [r2, #64]	; 0x40
 8004864:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004870:	2301      	movs	r3, #1
 8004872:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <HAL_RCC_OscConfig+0x424>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d118      	bne.n	80048b2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004880:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCC_OscConfig+0x424>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a36      	ldr	r2, [pc, #216]	; (8004960 <HAL_RCC_OscConfig+0x424>)
 8004886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488c:	f7fc f972 	bl	8000b74 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004894:	f7fc f96e 	bl	8000b74 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e168      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a6:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <HAL_RCC_OscConfig+0x424>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d106      	bne.n	80048c8 <HAL_RCC_OscConfig+0x38c>
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	4a25      	ldr	r2, [pc, #148]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6713      	str	r3, [r2, #112]	; 0x70
 80048c6:	e01c      	b.n	8004902 <HAL_RCC_OscConfig+0x3c6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b05      	cmp	r3, #5
 80048ce:	d10c      	bne.n	80048ea <HAL_RCC_OscConfig+0x3ae>
 80048d0:	4b20      	ldr	r3, [pc, #128]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048d6:	f043 0304 	orr.w	r3, r3, #4
 80048da:	6713      	str	r3, [r2, #112]	; 0x70
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6713      	str	r3, [r2, #112]	; 0x70
 80048e8:	e00b      	b.n	8004902 <HAL_RCC_OscConfig+0x3c6>
 80048ea:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a19      	ldr	r2, [pc, #100]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
 80048f6:	4b17      	ldr	r3, [pc, #92]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d015      	beq.n	8004936 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fc f933 	bl	8000b74 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fc f92f 	bl	8000b74 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e127      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <HAL_RCC_OscConfig+0x418>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0ee      	beq.n	8004912 <HAL_RCC_OscConfig+0x3d6>
 8004934:	e01c      	b.n	8004970 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004936:	f7fc f91d 	bl	8000b74 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493c:	e012      	b.n	8004964 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7fc f919 	bl	8000b74 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	f241 3288 	movw	r2, #5000	; 0x1388
 800494c:	4293      	cmp	r3, r2
 800494e:	d909      	bls.n	8004964 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e111      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
 8004954:	40023800 	.word	0x40023800
 8004958:	42470e80 	.word	0x42470e80
 800495c:	08009804 	.word	0x08009804
 8004960:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004964:	4b86      	ldr	r3, [pc, #536]	; (8004b80 <HAL_RCC_OscConfig+0x644>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d105      	bne.n	8004982 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004976:	4b82      	ldr	r3, [pc, #520]	; (8004b80 <HAL_RCC_OscConfig+0x644>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	4a81      	ldr	r2, [pc, #516]	; (8004b80 <HAL_RCC_OscConfig+0x644>)
 800497c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004980:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00c      	beq.n	80049a4 <HAL_RCC_OscConfig+0x468>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d008      	beq.n	80049a4 <HAL_RCC_OscConfig+0x468>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d004      	beq.n	80049a4 <HAL_RCC_OscConfig+0x468>
 800499a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800499e:	4879      	ldr	r0, [pc, #484]	; (8004b84 <HAL_RCC_OscConfig+0x648>)
 80049a0:	f7fb ffd3 	bl	800094a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80e4 	beq.w	8004b76 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ae:	4b74      	ldr	r3, [pc, #464]	; (8004b80 <HAL_RCC_OscConfig+0x644>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	f000 80a5 	beq.w	8004b06 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f040 8089 	bne.w	8004ad8 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <HAL_RCC_OscConfig+0x4a6>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d6:	d004      	beq.n	80049e2 <HAL_RCC_OscConfig+0x4a6>
 80049d8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80049dc:	4869      	ldr	r0, [pc, #420]	; (8004b84 <HAL_RCC_OscConfig+0x648>)
 80049de:	f7fb ffb4 	bl	800094a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	2b3f      	cmp	r3, #63	; 0x3f
 80049e8:	d904      	bls.n	80049f4 <HAL_RCC_OscConfig+0x4b8>
 80049ea:	f240 11d7 	movw	r1, #471	; 0x1d7
 80049ee:	4865      	ldr	r0, [pc, #404]	; (8004b84 <HAL_RCC_OscConfig+0x648>)
 80049f0:	f7fb ffab 	bl	800094a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2b31      	cmp	r3, #49	; 0x31
 80049fa:	d904      	bls.n	8004a06 <HAL_RCC_OscConfig+0x4ca>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004a04:	d904      	bls.n	8004a10 <HAL_RCC_OscConfig+0x4d4>
 8004a06:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004a0a:	485e      	ldr	r0, [pc, #376]	; (8004b84 <HAL_RCC_OscConfig+0x648>)
 8004a0c:	f7fb ff9d 	bl	800094a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d010      	beq.n	8004a3a <HAL_RCC_OscConfig+0x4fe>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d00c      	beq.n	8004a3a <HAL_RCC_OscConfig+0x4fe>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	2b06      	cmp	r3, #6
 8004a26:	d008      	beq.n	8004a3a <HAL_RCC_OscConfig+0x4fe>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d004      	beq.n	8004a3a <HAL_RCC_OscConfig+0x4fe>
 8004a30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004a34:	4853      	ldr	r0, [pc, #332]	; (8004b84 <HAL_RCC_OscConfig+0x648>)
 8004a36:	f7fb ff88 	bl	800094a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d903      	bls.n	8004a4a <HAL_RCC_OscConfig+0x50e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	2b0f      	cmp	r3, #15
 8004a48:	d904      	bls.n	8004a54 <HAL_RCC_OscConfig+0x518>
 8004a4a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004a4e:	484d      	ldr	r0, [pc, #308]	; (8004b84 <HAL_RCC_OscConfig+0x648>)
 8004a50:	f7fb ff7b 	bl	800094a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a54:	4b4c      	ldr	r3, [pc, #304]	; (8004b88 <HAL_RCC_OscConfig+0x64c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5a:	f7fc f88b 	bl	8000b74 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a62:	f7fc f887 	bl	8000b74 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e081      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a74:	4b42      	ldr	r3, [pc, #264]	; (8004b80 <HAL_RCC_OscConfig+0x644>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	019b      	lsls	r3, r3, #6
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	061b      	lsls	r3, r3, #24
 8004aa4:	4936      	ldr	r1, [pc, #216]	; (8004b80 <HAL_RCC_OscConfig+0x644>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aaa:	4b37      	ldr	r3, [pc, #220]	; (8004b88 <HAL_RCC_OscConfig+0x64c>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fc f860 	bl	8000b74 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab8:	f7fc f85c 	bl	8000b74 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e056      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aca:	4b2d      	ldr	r3, [pc, #180]	; (8004b80 <HAL_RCC_OscConfig+0x644>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x57c>
 8004ad6:	e04e      	b.n	8004b76 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <HAL_RCC_OscConfig+0x64c>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fc f849 	bl	8000b74 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae6:	f7fc f845 	bl	8000b74 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e03f      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af8:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <HAL_RCC_OscConfig+0x644>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f0      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x5aa>
 8004b04:	e037      	b.n	8004b76 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e032      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x644>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d028      	beq.n	8004b72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d121      	bne.n	8004b72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d11a      	bne.n	8004b72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b42:	4013      	ands	r3, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d111      	bne.n	8004b72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	08009804 	.word	0x08009804
 8004b88:	42470060 	.word	0x42470060

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e174      	b.n	8004e8a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x24>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b0f      	cmp	r3, #15
 8004bae:	d904      	bls.n	8004bba <HAL_RCC_ClockConfig+0x2e>
 8004bb0:	f240 215a 	movw	r1, #602	; 0x25a
 8004bb4:	487b      	ldr	r0, [pc, #492]	; (8004da4 <HAL_RCC_ClockConfig+0x218>)
 8004bb6:	f7fb fec8 	bl	800094a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d019      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d016      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d013      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d010      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d00d      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b06      	cmp	r3, #6
 8004be2:	d007      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b07      	cmp	r3, #7
 8004be8:	d004      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
 8004bea:	f240 215b 	movw	r1, #603	; 0x25b
 8004bee:	486d      	ldr	r0, [pc, #436]	; (8004da4 <HAL_RCC_ClockConfig+0x218>)
 8004bf0:	f7fb feab 	bl	800094a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf4:	4b6c      	ldr	r3, [pc, #432]	; (8004da8 <HAL_RCC_ClockConfig+0x21c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d90c      	bls.n	8004c1c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	4b69      	ldr	r3, [pc, #420]	; (8004da8 <HAL_RCC_ClockConfig+0x21c>)
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b67      	ldr	r3, [pc, #412]	; (8004da8 <HAL_RCC_ClockConfig+0x21c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e136      	b.n	8004e8a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d049      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c34:	4b5d      	ldr	r3, [pc, #372]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4a5c      	ldr	r2, [pc, #368]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c4c:	4b57      	ldr	r3, [pc, #348]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4a56      	ldr	r2, [pc, #344]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d024      	beq.n	8004caa <HAL_RCC_ClockConfig+0x11e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	d020      	beq.n	8004caa <HAL_RCC_ClockConfig+0x11e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b90      	cmp	r3, #144	; 0x90
 8004c6e:	d01c      	beq.n	8004caa <HAL_RCC_ClockConfig+0x11e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2ba0      	cmp	r3, #160	; 0xa0
 8004c76:	d018      	beq.n	8004caa <HAL_RCC_ClockConfig+0x11e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2bb0      	cmp	r3, #176	; 0xb0
 8004c7e:	d014      	beq.n	8004caa <HAL_RCC_ClockConfig+0x11e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2bc0      	cmp	r3, #192	; 0xc0
 8004c86:	d010      	beq.n	8004caa <HAL_RCC_ClockConfig+0x11e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2bd0      	cmp	r3, #208	; 0xd0
 8004c8e:	d00c      	beq.n	8004caa <HAL_RCC_ClockConfig+0x11e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2be0      	cmp	r3, #224	; 0xe0
 8004c96:	d008      	beq.n	8004caa <HAL_RCC_ClockConfig+0x11e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2bf0      	cmp	r3, #240	; 0xf0
 8004c9e:	d004      	beq.n	8004caa <HAL_RCC_ClockConfig+0x11e>
 8004ca0:	f240 217e 	movw	r1, #638	; 0x27e
 8004ca4:	483f      	ldr	r0, [pc, #252]	; (8004da4 <HAL_RCC_ClockConfig+0x218>)
 8004ca6:	f7fb fe50 	bl	800094a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004caa:	4b40      	ldr	r3, [pc, #256]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	493d      	ldr	r1, [pc, #244]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d059      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x166>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d00c      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x166>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x166>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d004      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x166>
 8004ce8:	f240 2185 	movw	r1, #645	; 0x285
 8004cec:	482d      	ldr	r0, [pc, #180]	; (8004da4 <HAL_RCC_ClockConfig+0x218>)
 8004cee:	f7fb fe2c 	bl	800094a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d119      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0bf      	b.n	8004e8a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d003      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d107      	bne.n	8004d2a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1a:	4b24      	ldr	r3, [pc, #144]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e0af      	b.n	8004e8a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2a:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0a7      	b.n	8004e8a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3a:	4b1c      	ldr	r3, [pc, #112]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 0203 	bic.w	r2, r3, #3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4919      	ldr	r1, [pc, #100]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d4c:	f7fb ff12 	bl	8000b74 <HAL_GetTick>
 8004d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d54:	f7fb ff0e 	bl	8000b74 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e08f      	b.n	8004e8a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_RCC_ClockConfig+0x220>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 020c 	and.w	r2, r3, #12
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d1eb      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <HAL_RCC_ClockConfig+0x21c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d212      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <HAL_RCC_ClockConfig+0x21c>)
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCC_ClockConfig+0x21c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d007      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e072      	b.n	8004e8a <HAL_RCC_ClockConfig+0x2fe>
 8004da4:	08009804 	.word	0x08009804
 8004da8:	40023c00 	.word	0x40023c00
 8004dac:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d025      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d018      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x26a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dcc:	d013      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x26a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dd6:	d00e      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x26a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004de0:	d009      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x26a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004dea:	d004      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x26a>
 8004dec:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004df0:	4828      	ldr	r0, [pc, #160]	; (8004e94 <HAL_RCC_ClockConfig+0x308>)
 8004df2:	f7fb fdaa 	bl	800094a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df6:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <HAL_RCC_ClockConfig+0x30c>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	4925      	ldr	r1, [pc, #148]	; (8004e98 <HAL_RCC_ClockConfig+0x30c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d026      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d018      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	d013      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e2e:	d00e      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004e38:	d009      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004e42:	d004      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
 8004e44:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004e48:	4812      	ldr	r0, [pc, #72]	; (8004e94 <HAL_RCC_ClockConfig+0x308>)
 8004e4a:	f7fb fd7e 	bl	800094a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <HAL_RCC_ClockConfig+0x30c>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	490e      	ldr	r1, [pc, #56]	; (8004e98 <HAL_RCC_ClockConfig+0x30c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e62:	f000 f82d 	bl	8004ec0 <HAL_RCC_GetSysClockFreq>
 8004e66:	4602      	mov	r2, r0
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <HAL_RCC_ClockConfig+0x30c>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	490a      	ldr	r1, [pc, #40]	; (8004e9c <HAL_RCC_ClockConfig+0x310>)
 8004e74:	5ccb      	ldrb	r3, [r1, r3]
 8004e76:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7a:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <HAL_RCC_ClockConfig+0x314>)
 8004e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_ClockConfig+0x318>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb fe32 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	08009804 	.word	0x08009804
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	080098c8 	.word	0x080098c8
 8004ea0:	20000000 	.word	0x20000000
 8004ea4:	20000004 	.word	0x20000004

08004ea8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <HAL_RCC_EnableCSS+0x14>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	4247004c 	.word	0x4247004c

08004ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec4:	b094      	sub	sp, #80	; 0x50
 8004ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	647b      	str	r3, [r7, #68]	; 0x44
 8004ecc:	2300      	movs	r3, #0
 8004ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ed8:	4b79      	ldr	r3, [pc, #484]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d00d      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x40>
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	f200 80e1 	bhi.w	80050ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d003      	beq.n	8004efa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ef2:	e0db      	b.n	80050ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef4:	4b73      	ldr	r3, [pc, #460]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ef6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ef8:	e0db      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004efa:	4b73      	ldr	r3, [pc, #460]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004efc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004efe:	e0d8      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f00:	4b6f      	ldr	r3, [pc, #444]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0a:	4b6d      	ldr	r3, [pc, #436]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d063      	beq.n	8004fde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f16:	4b6a      	ldr	r3, [pc, #424]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	099b      	lsrs	r3, r3, #6
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f28:	633b      	str	r3, [r7, #48]	; 0x30
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f32:	4622      	mov	r2, r4
 8004f34:	462b      	mov	r3, r5
 8004f36:	f04f 0000 	mov.w	r0, #0
 8004f3a:	f04f 0100 	mov.w	r1, #0
 8004f3e:	0159      	lsls	r1, r3, #5
 8004f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f44:	0150      	lsls	r0, r2, #5
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	1a51      	subs	r1, r2, r1
 8004f4e:	6139      	str	r1, [r7, #16]
 8004f50:	4629      	mov	r1, r5
 8004f52:	eb63 0301 	sbc.w	r3, r3, r1
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f64:	4659      	mov	r1, fp
 8004f66:	018b      	lsls	r3, r1, #6
 8004f68:	4651      	mov	r1, sl
 8004f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f6e:	4651      	mov	r1, sl
 8004f70:	018a      	lsls	r2, r1, #6
 8004f72:	4651      	mov	r1, sl
 8004f74:	ebb2 0801 	subs.w	r8, r2, r1
 8004f78:	4659      	mov	r1, fp
 8004f7a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f92:	4690      	mov	r8, r2
 8004f94:	4699      	mov	r9, r3
 8004f96:	4623      	mov	r3, r4
 8004f98:	eb18 0303 	adds.w	r3, r8, r3
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	eb49 0303 	adc.w	r3, r9, r3
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	024b      	lsls	r3, r1, #9
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	024a      	lsls	r2, r1, #9
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fd0:	f7fb f8fa 	bl	80001c8 <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4613      	mov	r3, r2
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	e058      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fde:	4b38      	ldr	r3, [pc, #224]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	4611      	mov	r1, r2
 8004fea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fee:	623b      	str	r3, [r7, #32]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	f04f 0000 	mov.w	r0, #0
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	0159      	lsls	r1, r3, #5
 8005006:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500a:	0150      	lsls	r0, r2, #5
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4641      	mov	r1, r8
 8005012:	ebb2 0a01 	subs.w	sl, r2, r1
 8005016:	4649      	mov	r1, r9
 8005018:	eb63 0b01 	sbc.w	fp, r3, r1
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005028:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800502c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005030:	ebb2 040a 	subs.w	r4, r2, sl
 8005034:	eb63 050b 	sbc.w	r5, r3, fp
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	00eb      	lsls	r3, r5, #3
 8005042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005046:	00e2      	lsls	r2, r4, #3
 8005048:	4614      	mov	r4, r2
 800504a:	461d      	mov	r5, r3
 800504c:	4643      	mov	r3, r8
 800504e:	18e3      	adds	r3, r4, r3
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	464b      	mov	r3, r9
 8005054:	eb45 0303 	adc.w	r3, r5, r3
 8005058:	607b      	str	r3, [r7, #4]
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005066:	4629      	mov	r1, r5
 8005068:	028b      	lsls	r3, r1, #10
 800506a:	4621      	mov	r1, r4
 800506c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005070:	4621      	mov	r1, r4
 8005072:	028a      	lsls	r2, r1, #10
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507a:	2200      	movs	r2, #0
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	61fa      	str	r2, [r7, #28]
 8005080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005084:	f7fb f8a0 	bl	80001c8 <__aeabi_uldivmod>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4613      	mov	r3, r2
 800508e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	0c1b      	lsrs	r3, r3, #16
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	3301      	adds	r3, #1
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050aa:	e002      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80050ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3750      	adds	r7, #80	; 0x50
 80050b8:	46bd      	mov	sp, r7
 80050ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050be:	bf00      	nop
 80050c0:	40023800 	.word	0x40023800
 80050c4:	00f42400 	.word	0x00f42400
 80050c8:	007a1200 	.word	0x007a1200

080050cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20000000 	.word	0x20000000

080050e4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <HAL_RCC_NMI_IRQHandler+0x20>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f0:	2b80      	cmp	r3, #128	; 0x80
 80050f2:	d104      	bne.n	80050fe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80050f4:	f000 f80a 	bl	800510c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80050f8:	4b03      	ldr	r3, [pc, #12]	; (8005108 <HAL_RCC_NMI_IRQHandler+0x24>)
 80050fa:	2280      	movs	r2, #128	; 0x80
 80050fc:	701a      	strb	r2, [r3, #0]
  }
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800
 8005108:	4002380e 	.word	0x4002380e

0800510c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b07      	cmp	r3, #7
 800513a:	d904      	bls.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800513c:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8005140:	482c      	ldr	r0, [pc, #176]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8005142:	f7fb fc02 	bl	800094a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d105      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800515a:	2b00      	cmp	r3, #0
 800515c:	d056      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d903      	bls.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b07      	cmp	r3, #7
 800516c:	d904      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800516e:	f640 11de 	movw	r1, #2526	; 0x9de
 8005172:	4820      	ldr	r0, [pc, #128]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8005174:	f7fb fbe9 	bl	800094a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b31      	cmp	r3, #49	; 0x31
 800517e:	d904      	bls.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005188:	d904      	bls.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800518a:	f640 11df 	movw	r1, #2527	; 0x9df
 800518e:	4819      	ldr	r0, [pc, #100]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8005190:	f7fb fbdb 	bl	800094a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005194:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800519a:	f7fb fceb 	bl	8000b74 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051a2:	f7fb fce7 	bl	8000b74 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e1a6      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b4:	4b11      	ldr	r3, [pc, #68]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f0      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	019a      	lsls	r2, r3, #6
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	071b      	lsls	r3, r3, #28
 80051cc:	490b      	ldr	r1, [pc, #44]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051d4:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051da:	f7fb fccb 	bl	8000b74 <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051e0:	e00e      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051e2:	f7fb fcc7 	bl	8000b74 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d907      	bls.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e186      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80051f4:	0800983c 	.word	0x0800983c
 80051f8:	42470068 	.word	0x42470068
 80051fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005200:	4b88      	ldr	r3, [pc, #544]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0ea      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8173 	beq.w	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005222:	f000 80a6 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800522e:	f000 80a0 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	4a7c      	ldr	r2, [pc, #496]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	f000 809a 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	4a7a      	ldr	r2, [pc, #488]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005244:	4293      	cmp	r3, r2
 8005246:	f000 8094 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	4a78      	ldr	r2, [pc, #480]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005250:	4293      	cmp	r3, r2
 8005252:	f000 808e 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	4a76      	ldr	r2, [pc, #472]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800525c:	4293      	cmp	r3, r2
 800525e:	f000 8088 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	4a74      	ldr	r2, [pc, #464]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	f000 8082 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	4a72      	ldr	r2, [pc, #456]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d07c      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a70      	ldr	r2, [pc, #448]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d077      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4a6f      	ldr	r2, [pc, #444]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d072      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4a6d      	ldr	r2, [pc, #436]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d06d      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	4a6c      	ldr	r2, [pc, #432]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d068      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a6a      	ldr	r2, [pc, #424]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d063      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	4a69      	ldr	r2, [pc, #420]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d05e      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a67      	ldr	r2, [pc, #412]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d059      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4a66      	ldr	r2, [pc, #408]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d054      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a64      	ldr	r2, [pc, #400]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d04f      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4a63      	ldr	r2, [pc, #396]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d04a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a61      	ldr	r2, [pc, #388]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d045      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4a60      	ldr	r2, [pc, #384]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d040      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4a5e      	ldr	r2, [pc, #376]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d03b      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	4a5d      	ldr	r2, [pc, #372]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d036      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a5b      	ldr	r2, [pc, #364]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d031      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	4a5a      	ldr	r2, [pc, #360]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d02c      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d027      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4a57      	ldr	r2, [pc, #348]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d022      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4a55      	ldr	r2, [pc, #340]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01d      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	4a54      	ldr	r2, [pc, #336]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d018      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4a52      	ldr	r2, [pc, #328]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	4a51      	ldr	r2, [pc, #324]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00e      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4a4f      	ldr	r2, [pc, #316]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d009      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	4a4e      	ldr	r2, [pc, #312]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005368:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 800536c:	484c      	ldr	r0, [pc, #304]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800536e:	f7fb faec 	bl	800094a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	4a2a      	ldr	r2, [pc, #168]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005380:	6413      	str	r3, [r2, #64]	; 0x40
 8005382:	4b28      	ldr	r3, [pc, #160]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800538e:	4b45      	ldr	r3, [pc, #276]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a44      	ldr	r2, [pc, #272]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8005394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800539a:	f7fb fbeb 	bl	8000b74 <HAL_GetTick>
 800539e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053a2:	f7fb fbe7 	bl	8000b74 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
      {
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0a6      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053b4:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053c0:	4b18      	ldr	r3, [pc, #96]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d073      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d06c      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053de:	4b11      	ldr	r3, [pc, #68]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053e8:	4b2f      	ldr	r3, [pc, #188]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053ee:	4b2e      	ldr	r3, [pc, #184]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053f4:	4a0b      	ldr	r2, [pc, #44]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053fa:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d158      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005406:	f7fb fbb5 	bl	8000b74 <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540c:	e04e      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x390>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fb fbb1 	bl	8000b74 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	; 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d945      	bls.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x390>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e06e      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005424:	40023800 	.word	0x40023800
 8005428:	00020300 	.word	0x00020300
 800542c:	00030300 	.word	0x00030300
 8005430:	00040300 	.word	0x00040300
 8005434:	00050300 	.word	0x00050300
 8005438:	00060300 	.word	0x00060300
 800543c:	00070300 	.word	0x00070300
 8005440:	00080300 	.word	0x00080300
 8005444:	00090300 	.word	0x00090300
 8005448:	000a0300 	.word	0x000a0300
 800544c:	000b0300 	.word	0x000b0300
 8005450:	000c0300 	.word	0x000c0300
 8005454:	000d0300 	.word	0x000d0300
 8005458:	000e0300 	.word	0x000e0300
 800545c:	000f0300 	.word	0x000f0300
 8005460:	00100300 	.word	0x00100300
 8005464:	00110300 	.word	0x00110300
 8005468:	00120300 	.word	0x00120300
 800546c:	00130300 	.word	0x00130300
 8005470:	00140300 	.word	0x00140300
 8005474:	00150300 	.word	0x00150300
 8005478:	00160300 	.word	0x00160300
 800547c:	00170300 	.word	0x00170300
 8005480:	00180300 	.word	0x00180300
 8005484:	00190300 	.word	0x00190300
 8005488:	001a0300 	.word	0x001a0300
 800548c:	001b0300 	.word	0x001b0300
 8005490:	001c0300 	.word	0x001c0300
 8005494:	001d0300 	.word	0x001d0300
 8005498:	001e0300 	.word	0x001e0300
 800549c:	001f0300 	.word	0x001f0300
 80054a0:	0800983c 	.word	0x0800983c
 80054a4:	40007000 	.word	0x40007000
 80054a8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ac:	4b17      	ldr	r3, [pc, #92]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0aa      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c4:	d10d      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054da:	490c      	ldr	r1, [pc, #48]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	608b      	str	r3, [r1, #8]
 80054e0:	e005      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80054e2:	4b0a      	ldr	r3, [pc, #40]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	4a09      	ldr	r2, [pc, #36]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054ec:	6093      	str	r3, [r2, #8]
 80054ee:	4b07      	ldr	r3, [pc, #28]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fa:	4904      	ldr	r1, [pc, #16]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40023800 	.word	0x40023800

08005510 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d13e      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800552e:	4b23      	ldr	r3, [pc, #140]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d12f      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005546:	617b      	str	r3, [r7, #20]
          break;
 8005548:	e02f      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800554a:	4b1c      	ldr	r3, [pc, #112]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005556:	d108      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005558:	4b18      	ldr	r3, [pc, #96]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005560:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	e007      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800556a:	4b14      	ldr	r3, [pc, #80]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005572:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800557a:	4b10      	ldr	r3, [pc, #64]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800557c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005580:	099b      	lsrs	r3, r3, #6
 8005582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	fb02 f303 	mul.w	r3, r2, r3
 800558c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800558e:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005594:	0f1b      	lsrs	r3, r3, #28
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
          break;
 80055a2:	e002      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
          break;
 80055a8:	bf00      	nop
        }
      }
      break;
 80055aa:	bf00      	nop
    }
  }
  return frequency;
 80055ac:	697b      	ldr	r3, [r7, #20]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800
 80055c0:	00bb8000 	.word	0x00bb8000
 80055c4:	007a1200 	.word	0x007a1200
 80055c8:	00f42400 	.word	0x00f42400

080055cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055cc:	b084      	sub	sp, #16
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	f107 001c 	add.w	r0, r7, #28
 80055da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d122      	bne.n	800562a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800560c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d105      	bne.n	800561e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 fbee 	bl	8006e00 <USB_CoreReset>
 8005624:	4603      	mov	r3, r0
 8005626:	73fb      	strb	r3, [r7, #15]
 8005628:	e01a      	b.n	8005660 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f001 fbe2 	bl	8006e00 <USB_CoreReset>
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	639a      	str	r2, [r3, #56]	; 0x38
 8005652:	e005      	b.n	8005660 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	2b01      	cmp	r3, #1
 8005664:	d10b      	bne.n	800567e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f043 0206 	orr.w	r2, r3, #6
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800568a:	b004      	add	sp, #16
 800568c:	4770      	bx	lr
	...

08005690 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	4613      	mov	r3, r2
 800569c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d165      	bne.n	8005770 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4a41      	ldr	r2, [pc, #260]	; (80057ac <USB_SetTurnaroundTime+0x11c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d906      	bls.n	80056ba <USB_SetTurnaroundTime+0x2a>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4a40      	ldr	r2, [pc, #256]	; (80057b0 <USB_SetTurnaroundTime+0x120>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d202      	bcs.n	80056ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056b4:	230f      	movs	r3, #15
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e062      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4a3c      	ldr	r2, [pc, #240]	; (80057b0 <USB_SetTurnaroundTime+0x120>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d306      	bcc.n	80056d0 <USB_SetTurnaroundTime+0x40>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4a3b      	ldr	r2, [pc, #236]	; (80057b4 <USB_SetTurnaroundTime+0x124>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d202      	bcs.n	80056d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056ca:	230e      	movs	r3, #14
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e057      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4a38      	ldr	r2, [pc, #224]	; (80057b4 <USB_SetTurnaroundTime+0x124>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d306      	bcc.n	80056e6 <USB_SetTurnaroundTime+0x56>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4a37      	ldr	r2, [pc, #220]	; (80057b8 <USB_SetTurnaroundTime+0x128>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d202      	bcs.n	80056e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056e0:	230d      	movs	r3, #13
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	e04c      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4a33      	ldr	r2, [pc, #204]	; (80057b8 <USB_SetTurnaroundTime+0x128>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d306      	bcc.n	80056fc <USB_SetTurnaroundTime+0x6c>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4a32      	ldr	r2, [pc, #200]	; (80057bc <USB_SetTurnaroundTime+0x12c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d802      	bhi.n	80056fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056f6:	230c      	movs	r3, #12
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e041      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <USB_SetTurnaroundTime+0x12c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d906      	bls.n	8005712 <USB_SetTurnaroundTime+0x82>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4a2e      	ldr	r2, [pc, #184]	; (80057c0 <USB_SetTurnaroundTime+0x130>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d802      	bhi.n	8005712 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800570c:	230b      	movs	r3, #11
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e036      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4a2a      	ldr	r2, [pc, #168]	; (80057c0 <USB_SetTurnaroundTime+0x130>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d906      	bls.n	8005728 <USB_SetTurnaroundTime+0x98>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4a29      	ldr	r2, [pc, #164]	; (80057c4 <USB_SetTurnaroundTime+0x134>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d802      	bhi.n	8005728 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005722:	230a      	movs	r3, #10
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	e02b      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <USB_SetTurnaroundTime+0x134>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d906      	bls.n	800573e <USB_SetTurnaroundTime+0xae>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4a25      	ldr	r2, [pc, #148]	; (80057c8 <USB_SetTurnaroundTime+0x138>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d202      	bcs.n	800573e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005738:	2309      	movs	r3, #9
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	e020      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <USB_SetTurnaroundTime+0x138>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d306      	bcc.n	8005754 <USB_SetTurnaroundTime+0xc4>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4a20      	ldr	r2, [pc, #128]	; (80057cc <USB_SetTurnaroundTime+0x13c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d802      	bhi.n	8005754 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800574e:	2308      	movs	r3, #8
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e015      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <USB_SetTurnaroundTime+0x13c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d906      	bls.n	800576a <USB_SetTurnaroundTime+0xda>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <USB_SetTurnaroundTime+0x140>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d202      	bcs.n	800576a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005764:	2307      	movs	r3, #7
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e00a      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800576a:	2306      	movs	r3, #6
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e007      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005776:	2309      	movs	r3, #9
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e001      	b.n	8005780 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800577c:	2309      	movs	r3, #9
 800577e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	029b      	lsls	r3, r3, #10
 8005794:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005798:	431a      	orrs	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	00d8acbf 	.word	0x00d8acbf
 80057b0:	00e4e1c0 	.word	0x00e4e1c0
 80057b4:	00f42400 	.word	0x00f42400
 80057b8:	01067380 	.word	0x01067380
 80057bc:	011a499f 	.word	0x011a499f
 80057c0:	01312cff 	.word	0x01312cff
 80057c4:	014ca43f 	.word	0x014ca43f
 80057c8:	016e3600 	.word	0x016e3600
 80057cc:	01a6ab1f 	.word	0x01a6ab1f
 80057d0:	01e84800 	.word	0x01e84800

080057d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f043 0201 	orr.w	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d115      	bne.n	8005866 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005846:	2001      	movs	r0, #1
 8005848:	f7fb f9a0 	bl	8000b8c <HAL_Delay>
      ms++;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f001 fa45 	bl	8006ce2 <USB_GetMode>
 8005858:	4603      	mov	r3, r0
 800585a:	2b01      	cmp	r3, #1
 800585c:	d01e      	beq.n	800589c <USB_SetCurrentMode+0x84>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b31      	cmp	r3, #49	; 0x31
 8005862:	d9f0      	bls.n	8005846 <USB_SetCurrentMode+0x2e>
 8005864:	e01a      	b.n	800589c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d115      	bne.n	8005898 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005878:	2001      	movs	r0, #1
 800587a:	f7fb f987 	bl	8000b8c <HAL_Delay>
      ms++;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3301      	adds	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 fa2c 	bl	8006ce2 <USB_GetMode>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <USB_SetCurrentMode+0x84>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b31      	cmp	r3, #49	; 0x31
 8005894:	d9f0      	bls.n	8005878 <USB_SetCurrentMode+0x60>
 8005896:	e001      	b.n	800589c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e005      	b.n	80058a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b32      	cmp	r3, #50	; 0x32
 80058a0:	d101      	bne.n	80058a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058b0:	b084      	sub	sp, #16
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	e009      	b.n	80058e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	3340      	adds	r3, #64	; 0x40
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	2200      	movs	r2, #0
 80058dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	3301      	adds	r3, #1
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b0e      	cmp	r3, #14
 80058e8:	d9f2      	bls.n	80058d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d11c      	bne.n	800592a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058fe:	f043 0302 	orr.w	r3, r3, #2
 8005902:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
 8005928:	e00b      	b.n	8005942 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005954:	4619      	mov	r1, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595c:	461a      	mov	r2, r3
 800595e:	680b      	ldr	r3, [r1, #0]
 8005960:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	2b01      	cmp	r3, #1
 8005966:	d10c      	bne.n	8005982 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800596e:	2100      	movs	r1, #0
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f965 	bl	8005c40 <USB_SetDevSpeed>
 8005976:	e008      	b.n	800598a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005978:	2101      	movs	r1, #1
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f960 	bl	8005c40 <USB_SetDevSpeed>
 8005980:	e003      	b.n	800598a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005982:	2103      	movs	r1, #3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f95b 	bl	8005c40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800598a:	2110      	movs	r1, #16
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8f3 	bl	8005b78 <USB_FlushTxFifo>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f91f 	bl	8005be0 <USB_FlushRxFifo>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	461a      	mov	r2, r3
 80059b4:	2300      	movs	r3, #0
 80059b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	461a      	mov	r2, r3
 80059c0:	2300      	movs	r3, #0
 80059c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ca:	461a      	mov	r2, r3
 80059cc:	2300      	movs	r3, #0
 80059ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	e043      	b.n	8005a5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ec:	d118      	bne.n	8005a20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	461a      	mov	r2, r3
 8005a02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	e013      	b.n	8005a32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	461a      	mov	r2, r3
 8005a18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e008      	b.n	8005a32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2300      	movs	r3, #0
 8005a30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2300      	movs	r3, #0
 8005a42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	461a      	mov	r2, r3
 8005a52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d3b7      	bcc.n	80059d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	e043      	b.n	8005af4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a82:	d118      	bne.n	8005ab6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10a      	bne.n	8005aa0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	461a      	mov	r2, r3
 8005a98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e013      	b.n	8005ac8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	461a      	mov	r2, r3
 8005aae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e008      	b.n	8005ac8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3301      	adds	r3, #1
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d3b7      	bcc.n	8005a6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d105      	bne.n	8005b30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f043 0210 	orr.w	r2, r3, #16
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <USB_DevInit+0x2c4>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f043 0208 	orr.w	r2, r3, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d107      	bne.n	8005b64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b5c:	f043 0304 	orr.w	r3, r3, #4
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b70:	b004      	add	sp, #16
 8005b72:	4770      	bx	lr
 8005b74:	803c3800 	.word	0x803c3800

08005b78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <USB_FlushTxFifo+0x64>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e01b      	b.n	8005bd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	daf2      	bge.n	8005b86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	019b      	lsls	r3, r3, #6
 8005ba8:	f043 0220 	orr.w	r2, r3, #32
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <USB_FlushTxFifo+0x64>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e006      	b.n	8005bd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d0f0      	beq.n	8005bb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	00030d40 	.word	0x00030d40

08005be0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a11      	ldr	r2, [pc, #68]	; (8005c3c <USB_FlushRxFifo+0x5c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e018      	b.n	8005c30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	daf2      	bge.n	8005bec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4a08      	ldr	r2, [pc, #32]	; (8005c3c <USB_FlushRxFifo+0x5c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e006      	b.n	8005c30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0310 	and.w	r3, r3, #16
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d0f0      	beq.n	8005c10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	00030d40 	.word	0x00030d40

08005c40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b087      	sub	sp, #28
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 0306 	and.w	r3, r3, #6
 8005c8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
 8005c96:	e00a      	b.n	8005cae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d002      	beq.n	8005ca4 <USB_GetDevSpeed+0x32>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b06      	cmp	r3, #6
 8005ca2:	d102      	bne.n	8005caa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	75fb      	strb	r3, [r7, #23]
 8005ca8:	e001      	b.n	8005cae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005caa:	230f      	movs	r3, #15
 8005cac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d13a      	bne.n	8005d4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	2101      	movs	r1, #1
 8005cea:	fa01 f303 	lsl.w	r3, r1, r3
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d155      	bne.n	8005dbc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	791b      	ldrb	r3, [r3, #4]
 8005d2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	059b      	lsls	r3, r3, #22
 8005d32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d34:	4313      	orrs	r3, r2
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e036      	b.n	8005dbc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	69da      	ldr	r2, [r3, #28]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	2101      	movs	r1, #1
 8005d60:	fa01 f303 	lsl.w	r3, r1, r3
 8005d64:	041b      	lsls	r3, r3, #16
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d11a      	bne.n	8005dbc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	791b      	ldrb	r3, [r3, #4]
 8005da0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005da2:	430b      	orrs	r3, r1
 8005da4:	4313      	orrs	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	785b      	ldrb	r3, [r3, #1]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d161      	bne.n	8005eac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfe:	d11f      	bne.n	8005e40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e60:	4013      	ands	r3, r2
 8005e62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	2101      	movs	r1, #1
 8005e76:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e84:	4013      	ands	r3, r2
 8005e86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	0159      	lsls	r1, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	440b      	add	r3, r1
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4b35      	ldr	r3, [pc, #212]	; (8005f7c <USB_DeactivateEndpoint+0x1b0>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
 8005eaa:	e060      	b.n	8005f6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec2:	d11f      	bne.n	8005f04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ee2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	2101      	movs	r1, #1
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	68f9      	ldr	r1, [r7, #12]
 8005f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f24:	4013      	ands	r3, r2
 8005f26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	2101      	movs	r1, #1
 8005f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3e:	041b      	lsls	r3, r3, #16
 8005f40:	43db      	mvns	r3, r3
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f48:	4013      	ands	r3, r2
 8005f4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	0159      	lsls	r1, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	440b      	add	r3, r1
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	4619      	mov	r1, r3
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <USB_DeactivateEndpoint+0x1b4>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	ec337800 	.word	0xec337800
 8005f80:	eff37800 	.word	0xeff37800

08005f84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	; 0x28
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	f040 815c 	bne.w	800625e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d132      	bne.n	8006014 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600c:	0cdb      	lsrs	r3, r3, #19
 800600e:	04db      	lsls	r3, r3, #19
 8006010:	6113      	str	r3, [r2, #16]
 8006012:	e074      	b.n	80060fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	440a      	add	r2, r1
 800602a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602e:	0cdb      	lsrs	r3, r3, #19
 8006030:	04db      	lsls	r3, r3, #19
 8006032:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	440a      	add	r2, r1
 800604a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006052:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6999      	ldr	r1, [r3, #24]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	440b      	add	r3, r1
 8006070:	1e59      	subs	r1, r3, #1
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	fbb1 f3f3 	udiv	r3, r1, r3
 800607a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800607c:	4b9d      	ldr	r3, [pc, #628]	; (80062f4 <USB_EPStartXfer+0x370>)
 800607e:	400b      	ands	r3, r1
 8006080:	69b9      	ldr	r1, [r7, #24]
 8006082:	0148      	lsls	r0, r1, #5
 8006084:	69f9      	ldr	r1, [r7, #28]
 8006086:	4401      	add	r1, r0
 8006088:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800608c:	4313      	orrs	r3, r2
 800608e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a6:	69b9      	ldr	r1, [r7, #24]
 80060a8:	0148      	lsls	r0, r1, #5
 80060aa:	69f9      	ldr	r1, [r7, #28]
 80060ac:	4401      	add	r1, r0
 80060ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060b2:	4313      	orrs	r3, r2
 80060b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	791b      	ldrb	r3, [r3, #4]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d11f      	bne.n	80060fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d14b      	bne.n	800619c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	461a      	mov	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	791b      	ldrb	r3, [r3, #4]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d128      	bne.n	800617a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d110      	bne.n	800615a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	440a      	add	r2, r1
 800614e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006152:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	e00f      	b.n	800617a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	440a      	add	r2, r1
 8006170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006178:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006194:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	e133      	b.n	8006404 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	791b      	ldrb	r3, [r3, #4]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d015      	beq.n	80061f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 811b 	beq.w	8006404 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	2101      	movs	r1, #1
 80061e0:	fa01 f303 	lsl.w	r3, r1, r3
 80061e4:	69f9      	ldr	r1, [r7, #28]
 80061e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ea:	4313      	orrs	r3, r2
 80061ec:	634b      	str	r3, [r1, #52]	; 0x34
 80061ee:	e109      	b.n	8006404 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d110      	bne.n	8006222 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	e00f      	b.n	8006242 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	440a      	add	r2, r1
 8006238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006240:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6919      	ldr	r1, [r3, #16]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	b298      	uxth	r0, r3
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	4603      	mov	r3, r0
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fade 	bl	8006818 <USB_WritePacket>
 800625c:	e0d2      	b.n	8006404 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006278:	0cdb      	lsrs	r3, r3, #19
 800627a:	04db      	lsls	r3, r3, #19
 800627c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	440a      	add	r2, r1
 8006294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006298:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800629c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d126      	bne.n	80062f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c0:	69b9      	ldr	r1, [r7, #24]
 80062c2:	0148      	lsls	r0, r1, #5
 80062c4:	69f9      	ldr	r1, [r7, #28]
 80062c6:	4401      	add	r1, r0
 80062c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062cc:	4313      	orrs	r3, r2
 80062ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ee:	6113      	str	r3, [r2, #16]
 80062f0:	e03a      	b.n	8006368 <USB_EPStartXfer+0x3e4>
 80062f2:	bf00      	nop
 80062f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4413      	add	r3, r2
 8006302:	1e5a      	subs	r2, r3, #1
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	fbb2 f3f3 	udiv	r3, r2, r3
 800630c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	8afa      	ldrh	r2, [r7, #22]
 8006314:	fb03 f202 	mul.w	r2, r3, r2
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	8afb      	ldrh	r3, [r7, #22]
 800632c:	04d9      	lsls	r1, r3, #19
 800632e:	4b38      	ldr	r3, [pc, #224]	; (8006410 <USB_EPStartXfer+0x48c>)
 8006330:	400b      	ands	r3, r1
 8006332:	69b9      	ldr	r1, [r7, #24]
 8006334:	0148      	lsls	r0, r1, #5
 8006336:	69f9      	ldr	r1, [r7, #28]
 8006338:	4401      	add	r1, r0
 800633a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800633e:	4313      	orrs	r3, r2
 8006340:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006358:	69b9      	ldr	r1, [r7, #24]
 800635a:	0148      	lsls	r0, r1, #5
 800635c:	69f9      	ldr	r1, [r7, #28]
 800635e:	4401      	add	r1, r0
 8006360:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006364:	4313      	orrs	r3, r2
 8006366:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d10d      	bne.n	800638a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6919      	ldr	r1, [r3, #16]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	460a      	mov	r2, r1
 8006388:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	791b      	ldrb	r3, [r3, #4]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d128      	bne.n	80063e4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d110      	bne.n	80063c4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e00f      	b.n	80063e4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3720      	adds	r7, #32
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	1ff80000 	.word	0x1ff80000

08006414 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	785b      	ldrb	r3, [r3, #1]
 8006430:	2b01      	cmp	r3, #1
 8006432:	f040 80ce 	bne.w	80065d2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d132      	bne.n	80064a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006458:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800645c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006460:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649c:	0cdb      	lsrs	r3, r3, #19
 800649e:	04db      	lsls	r3, r3, #19
 80064a0:	6113      	str	r3, [r2, #16]
 80064a2:	e04e      	b.n	8006542 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064be:	0cdb      	lsrs	r3, r3, #19
 80064c0:	04db      	lsls	r3, r3, #19
 80064c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d903      	bls.n	80064fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006516:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800651a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006532:	6939      	ldr	r1, [r7, #16]
 8006534:	0148      	lsls	r0, r1, #5
 8006536:	6979      	ldr	r1, [r7, #20]
 8006538:	4401      	add	r1, r0
 800653a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800653e:	4313      	orrs	r3, r2
 8006540:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d11e      	bne.n	8006586 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	461a      	mov	r2, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	440a      	add	r2, r1
 800657a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	e097      	b.n	80066b6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8083 	beq.w	80066b6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	2101      	movs	r1, #1
 80065c2:	fa01 f303 	lsl.w	r3, r1, r3
 80065c6:	6979      	ldr	r1, [r7, #20]
 80065c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065cc:	4313      	orrs	r3, r2
 80065ce:	634b      	str	r3, [r1, #52]	; 0x34
 80065d0:	e071      	b.n	80066b6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	0cdb      	lsrs	r3, r3, #19
 80065ee:	04db      	lsls	r3, r3, #19
 80065f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	440a      	add	r2, r1
 8006608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006610:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006614:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	0151      	lsls	r1, r2, #5
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	440a      	add	r2, r1
 8006644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800664c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006664:	6939      	ldr	r1, [r7, #16]
 8006666:	0148      	lsls	r0, r1, #5
 8006668:	6979      	ldr	r1, [r7, #20]
 800666a:	4401      	add	r1, r0
 800666c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006670:	4313      	orrs	r3, r2
 8006672:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d10d      	bne.n	8006696 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6919      	ldr	r1, [r3, #16]
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	460a      	mov	r2, r1
 8006694:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d14a      	bne.n	8006778 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066fa:	f040 8086 	bne.w	800680a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	7812      	ldrb	r2, [r2, #0]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	440a      	add	r2, r1
 8006718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006720:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	7812      	ldrb	r2, [r2, #0]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006744:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3301      	adds	r3, #1
 800674a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006752:	4293      	cmp	r3, r2
 8006754:	d902      	bls.n	800675c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
          break;
 800675a:	e056      	b.n	800680a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006774:	d0e7      	beq.n	8006746 <USB_EPStopXfer+0x82>
 8006776:	e048      	b.n	800680a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800678c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006790:	d13b      	bne.n	800680a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	7812      	ldrb	r2, [r2, #0]
 80067a6:	0151      	lsls	r1, r2, #5
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	440a      	add	r2, r1
 80067ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	7812      	ldrb	r2, [r2, #0]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3301      	adds	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d902      	bls.n	80067f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	75fb      	strb	r3, [r7, #23]
          break;
 80067ee:	e00c      	b.n	800680a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006808:	d0e7      	beq.n	80067da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006818:	b480      	push	{r7}
 800681a:	b089      	sub	sp, #36	; 0x24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	460b      	mov	r3, r1
 8006828:	71fb      	strb	r3, [r7, #7]
 800682a:	4613      	mov	r3, r2
 800682c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006836:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d123      	bne.n	8006886 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800683e:	88bb      	ldrh	r3, [r7, #4]
 8006840:	3303      	adds	r3, #3
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006846:	2300      	movs	r3, #0
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	e018      	b.n	800687e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	031a      	lsls	r2, r3, #12
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4413      	add	r3, r2
 8006854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006858:	461a      	mov	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	3301      	adds	r3, #1
 8006864:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3301      	adds	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	3301      	adds	r3, #1
 8006870:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3301      	adds	r3, #1
 8006876:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	3301      	adds	r3, #1
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	429a      	cmp	r2, r3
 8006884:	d3e2      	bcc.n	800684c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3724      	adds	r7, #36	; 0x24
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006894:	b480      	push	{r7}
 8006896:	b08b      	sub	sp, #44	; 0x2c
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	089b      	lsrs	r3, r3, #2
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	f003 0303 	and.w	r3, r3, #3
 80068b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068ba:	2300      	movs	r3, #0
 80068bc:	623b      	str	r3, [r7, #32]
 80068be:	e014      	b.n	80068ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	3301      	adds	r3, #1
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	3301      	adds	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	3301      	adds	r3, #1
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	3301      	adds	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	3301      	adds	r3, #1
 80068e8:	623b      	str	r3, [r7, #32]
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d3e6      	bcc.n	80068c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068f2:	8bfb      	ldrh	r3, [r7, #30]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01e      	beq.n	8006936 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006902:	461a      	mov	r2, r3
 8006904:	f107 0310 	add.w	r3, r7, #16
 8006908:	6812      	ldr	r2, [r2, #0]
 800690a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
 8006918:	b2da      	uxtb	r2, r3
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	701a      	strb	r2, [r3, #0]
      i++;
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	3301      	adds	r3, #1
 8006922:	623b      	str	r3, [r7, #32]
      pDest++;
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	3301      	adds	r3, #1
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800692a:	8bfb      	ldrh	r3, [r7, #30]
 800692c:	3b01      	subs	r3, #1
 800692e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006930:	8bfb      	ldrh	r3, [r7, #30]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1ea      	bne.n	800690c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006938:	4618      	mov	r0, r3
 800693a:	372c      	adds	r7, #44	; 0x2c
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d12c      	bne.n	80069ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	db12      	blt.n	8006998 <USB_EPSetStall+0x54>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00f      	beq.n	8006998 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	440a      	add	r2, r1
 800698e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006992:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006996:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	e02b      	b.n	8006a12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	db12      	blt.n	80069f2 <USB_EPSetStall+0xae>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00f      	beq.n	80069f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d128      	bne.n	8006a8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	791b      	ldrb	r3, [r3, #4]
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d003      	beq.n	8006a6c <USB_EPClearStall+0x4c>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	791b      	ldrb	r3, [r3, #4]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d138      	bne.n	8006ade <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	e027      	b.n	8006ade <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	791b      	ldrb	r3, [r3, #4]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d003      	beq.n	8006abe <USB_EPClearStall+0x9e>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	791b      	ldrb	r3, [r3, #4]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d10f      	bne.n	8006ade <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006adc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006b20:	68f9      	ldr	r1, [r7, #12]
 8006b22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b66:	f023 0302 	bic.w	r3, r3, #2
 8006b6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b94:	f023 0303 	bic.w	r3, r3, #3
 8006b98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ba8:	f043 0302 	orr.w	r3, r3, #2
 8006bac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	4013      	ands	r3, r2
 8006c04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	0c1b      	lsrs	r3, r3, #16
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	4013      	ands	r3, r2
 8006c38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	b29b      	uxth	r3, r3
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4013      	ands	r3, r2
 8006c76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c78:	68bb      	ldr	r3, [r7, #8]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b087      	sub	sp, #28
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb6:	01db      	lsls	r3, r3, #7
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f003 0301 	and.w	r3, r3, #1
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d1c:	f023 0307 	bic.w	r3, r3, #7
 8006d20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	333c      	adds	r3, #60	; 0x3c
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	4a26      	ldr	r2, [pc, #152]	; (8006dfc <USB_EP0_OutStart+0xb8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d90a      	bls.n	8006d7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d78:	d101      	bne.n	8006d7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e037      	b.n	8006dee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d84:	461a      	mov	r2, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dac:	f043 0318 	orr.w	r3, r3, #24
 8006db0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006dc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d10f      	bne.n	8006dec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006dea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	4f54300a 	.word	0x4f54300a

08006e00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4a13      	ldr	r2, [pc, #76]	; (8006e64 <USB_CoreReset+0x64>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d901      	bls.n	8006e1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e01b      	b.n	8006e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	daf2      	bge.n	8006e0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f043 0201 	orr.w	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <USB_CoreReset+0x64>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d901      	bls.n	8006e48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e006      	b.n	8006e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d0f0      	beq.n	8006e36 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	00030d40 	.word	0x00030d40

08006e68 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8006e74:	f643 4050 	movw	r0, #15440	; 0x3c50
 8006e78:	f002 fbb8 	bl	80095ec <USBD_static_malloc>
 8006e7c:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	32b0      	adds	r2, #176	; 0xb0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e94:	2302      	movs	r3, #2
 8006e96:	e07e      	b.n	8006f96 <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32b0      	adds	r2, #176	; 0xb0
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	32b0      	adds	r2, #176	; 0xb0
 8006eb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7c1b      	ldrb	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10e      	bne.n	8006ee2 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8006ec4:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <USBD_AUDIO_Init+0x138>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 020f 	and.w	r2, r3, #15
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006edc:	2201      	movs	r2, #1
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	e00d      	b.n	8006efe <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8006ee2:	4b2f      	ldr	r3, [pc, #188]	; (8006fa0 <USBD_AUDIO_Init+0x138>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f003 020f 	and.w	r2, r3, #15
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006efa:	2201      	movs	r2, #1
 8006efc:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8006efe:	4b28      	ldr	r3, [pc, #160]	; (8006fa0 <USBD_AUDIO_Init+0x138>)
 8006f00:	7819      	ldrb	r1, [r3, #0]
 8006f02:	23c0      	movs	r3, #192	; 0xc0
 8006f04:	2201      	movs	r2, #1
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f002 fa4d 	bl	80093a6 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8006f0c:	4b24      	ldr	r3, [pc, #144]	; (8006fa0 <USBD_AUDIO_Init+0x138>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f003 020f 	and.w	r2, r3, #15
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f24:	2201      	movs	r2, #1
 8006f26:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006f34:	2203      	movs	r2, #3
 8006f36:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	33b0      	adds	r3, #176	; 0xb0
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2200      	movs	r2, #0
 8006f72:	2146      	movs	r1, #70	; 0x46
 8006f74:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8006f78:	4798      	blx	r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e008      	b.n	8006f96 <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8006f84:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <USBD_AUDIO_Init+0x138>)
 8006f86:	7819      	ldrb	r1, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	1d1a      	adds	r2, r3, #4
 8006f8c:	23c0      	movs	r3, #192	; 0xc0
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f002 faf8 	bl	8009584 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200000be 	.word	0x200000be

08006fa4 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8006fb0:	4b28      	ldr	r3, [pc, #160]	; (8007054 <USBD_AUDIO_DeInit+0xb0>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f002 fa1b 	bl	80093f2 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8006fbc:	4b25      	ldr	r3, [pc, #148]	; (8007054 <USBD_AUDIO_DeInit+0xb0>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	f003 020f 	and.w	r2, r3, #15
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <USBD_AUDIO_DeInit+0xb0>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f003 020f 	and.w	r2, r3, #15
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	440b      	add	r3, r1
 8006fec:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	32b0      	adds	r2, #176	; 0xb0
 8006ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d020      	beq.n	8007048 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	33b0      	adds	r3, #176	; 0xb0
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2000      	movs	r0, #0
 800701a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	32b0      	adds	r2, #176	; 0xb0
 8007026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702a:	4618      	mov	r0, r3
 800702c:	f002 faec 	bl	8009608 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	32b0      	adds	r2, #176	; 0xb0
 800703a:	2100      	movs	r1, #0
 800703c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	200000be 	.word	0x200000be

08007058 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	32b0      	adds	r2, #176	; 0xb0
 8007074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007078:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	e0c1      	b.n	8007208 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01a      	beq.n	80070c6 <USBD_AUDIO_Setup+0x6e>
 8007090:	2b20      	cmp	r3, #32
 8007092:	f040 80b1 	bne.w	80071f8 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d006      	beq.n	80070ac <USBD_AUDIO_Setup+0x54>
 800709e:	2b81      	cmp	r3, #129	; 0x81
 80070a0:	d109      	bne.n	80070b6 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fa91 	bl	80075cc <AUDIO_REQ_GetCurrent>
          break;
 80070aa:	e00b      	b.n	80070c4 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fab8 	bl	8007624 <AUDIO_REQ_SetCurrent>
          break;
 80070b4:	e006      	b.n	80070c4 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 fd1c 	bl	8008af6 <USBD_CtlError>
          ret = USBD_FAIL;
 80070be:	2303      	movs	r3, #3
 80070c0:	75fb      	strb	r3, [r7, #23]
          break;
 80070c2:	bf00      	nop
      }
      break;
 80070c4:	e09f      	b.n	8007206 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	785b      	ldrb	r3, [r3, #1]
 80070ca:	2b0b      	cmp	r3, #11
 80070cc:	f200 8089 	bhi.w	80071e2 <USBD_AUDIO_Setup+0x18a>
 80070d0:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <USBD_AUDIO_Setup+0x80>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	08007109 	.word	0x08007109
 80070dc:	080071f1 	.word	0x080071f1
 80070e0:	080071e3 	.word	0x080071e3
 80070e4:	080071e3 	.word	0x080071e3
 80070e8:	080071e3 	.word	0x080071e3
 80070ec:	080071e3 	.word	0x080071e3
 80070f0:	08007133 	.word	0x08007133
 80070f4:	080071e3 	.word	0x080071e3
 80070f8:	080071e3 	.word	0x080071e3
 80070fc:	080071e3 	.word	0x080071e3
 8007100:	0800717b 	.word	0x0800717b
 8007104:	080071a3 	.word	0x080071a3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b03      	cmp	r3, #3
 8007112:	d107      	bne.n	8007124 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007114:	f107 0308 	add.w	r3, r7, #8
 8007118:	2202      	movs	r2, #2
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 fd5b 	bl	8008bd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007122:	e068      	b.n	80071f6 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fce5 	bl	8008af6 <USBD_CtlError>
            ret = USBD_FAIL;
 800712c:	2303      	movs	r3, #3
 800712e:	75fb      	strb	r3, [r7, #23]
          break;
 8007130:	e061      	b.n	80071f6 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	885b      	ldrh	r3, [r3, #2]
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b21      	cmp	r3, #33	; 0x21
 800713c:	d15a      	bne.n	80071f4 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fadb 	bl	8007700 <USBD_AUDIO_GetAudioHeaderDesc>
 800714a:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00c      	beq.n	800716c <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b09      	cmp	r3, #9
 8007158:	bf28      	it	cs
 800715a:	2309      	movcs	r3, #9
 800715c:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800715e:	897b      	ldrh	r3, [r7, #10]
 8007160:	461a      	mov	r2, r3
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 fd37 	bl	8008bd8 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800716a:	e043      	b.n	80071f4 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fcc1 	bl	8008af6 <USBD_CtlError>
              ret = USBD_FAIL;
 8007174:	2303      	movs	r3, #3
 8007176:	75fb      	strb	r3, [r7, #23]
          break;
 8007178:	e03c      	b.n	80071f4 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b03      	cmp	r3, #3
 8007184:	d106      	bne.n	8007194 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2201      	movs	r2, #1
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 fd23 	bl	8008bd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007192:	e030      	b.n	80071f6 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fcad 	bl	8008af6 <USBD_CtlError>
            ret = USBD_FAIL;
 800719c:	2303      	movs	r3, #3
 800719e:	75fb      	strb	r3, [r7, #23]
          break;
 80071a0:	e029      	b.n	80071f6 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d112      	bne.n	80071d4 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	885b      	ldrh	r3, [r3, #2]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d806      	bhi.n	80071c6 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	885b      	ldrh	r3, [r3, #2]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071c4:	e017      	b.n	80071f6 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fc94 	bl	8008af6 <USBD_CtlError>
              ret = USBD_FAIL;
 80071ce:	2303      	movs	r3, #3
 80071d0:	75fb      	strb	r3, [r7, #23]
          break;
 80071d2:	e010      	b.n	80071f6 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fc8d 	bl	8008af6 <USBD_CtlError>
            ret = USBD_FAIL;
 80071dc:	2303      	movs	r3, #3
 80071de:	75fb      	strb	r3, [r7, #23]
          break;
 80071e0:	e009      	b.n	80071f6 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 fc86 	bl	8008af6 <USBD_CtlError>
          ret = USBD_FAIL;
 80071ea:	2303      	movs	r3, #3
 80071ec:	75fb      	strb	r3, [r7, #23]
          break;
 80071ee:	e002      	b.n	80071f6 <USBD_AUDIO_Setup+0x19e>
          break;
 80071f0:	bf00      	nop
 80071f2:	e008      	b.n	8007206 <USBD_AUDIO_Setup+0x1ae>
          break;
 80071f4:	bf00      	nop
      }
      break;
 80071f6:	e006      	b.n	8007206 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 fc7b 	bl	8008af6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007200:	2303      	movs	r3, #3
 8007202:	75fb      	strb	r3, [r7, #23]
      break;
 8007204:	bf00      	nop
  }

  return (uint8_t)ret;
 8007206:	7dfb      	ldrb	r3, [r7, #23]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	226d      	movs	r2, #109	; 0x6d
 800721c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800721e:	4b03      	ldr	r3, [pc, #12]	; (800722c <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	20000044 	.word	0x20000044

08007230 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	32b0      	adds	r2, #176	; 0xb0
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007268:	2303      	movs	r3, #3
 800726a:	e02a      	b.n	80072c2 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007272:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 8007276:	2b01      	cmp	r3, #1
 8007278:	d122      	bne.n	80072c0 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007280:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 8007284:	2b02      	cmp	r3, #2
 8007286:	d11b      	bne.n	80072c0 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	33b0      	adds	r3, #176	; 0xb0
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80072a0:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 80072a4:	4610      	mov	r0, r2
 80072a6:	4798      	blx	r3
      haudio->control.cmd = 0U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <USBD_AUDIO_Sync>:
  * @param  pdev: device instance
  * @param  offset: audio offset
  * @retval status
  */
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	460b      	mov	r3, r1
 8007300:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 8007302:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8007306:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	32b0      	adds	r2, #176	; 0xb0
 8007312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 80a3 	beq.w	8007462 <USBD_AUDIO_Sync+0x16c>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	32b0      	adds	r2, #176	; 0xb0
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007332:	461a      	mov	r2, r3
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	f882 3c04 	strb.w	r3, [r2, #3076]	; 0xc04

  if (haudio->rd_enable == 1U)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007340:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8007344:	2b01      	cmp	r3, #1
 8007346:	d11b      	bne.n	8007380 <USBD_AUDIO_Sync+0x8a>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800734e:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	b29b      	uxth	r3, r3
 8007356:	4413      	add	r3, r2
 8007358:	b29a      	uxth	r2, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007360:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800736a:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800736e:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8007372:	d105      	bne.n	8007380 <USBD_AUDIO_Sync+0x8a>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800737a:	2200      	movs	r2, #0
 800737c:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007386:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007390:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007394:	429a      	cmp	r2, r3
 8007396:	d924      	bls.n	80073e2 <USBD_AUDIO_Sync+0xec>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800739e:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80073a2:	461a      	mov	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073aa:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2bbf      	cmp	r3, #191	; 0xbf
 80073b2:	dc03      	bgt.n	80073bc <USBD_AUDIO_Sync+0xc6>
    {
      BufferSize += 4U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3304      	adds	r3, #4
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	e036      	b.n	800742a <USBD_AUDIO_Sync+0x134>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073c2:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80073c6:	461a      	mov	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073ce:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 80073d8:	dd27      	ble.n	800742a <USBD_AUDIO_Sync+0x134>
      {
        BufferSize -= 4U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3b04      	subs	r3, #4
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	e023      	b.n	800742a <USBD_AUDIO_Sync+0x134>
      }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073e8:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80073ec:	461a      	mov	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073f4:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2bbf      	cmp	r3, #191	; 0xbf
 80073fc:	dc03      	bgt.n	8007406 <USBD_AUDIO_Sync+0x110>
    {
      BufferSize -= 4U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3b04      	subs	r3, #4
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	e011      	b.n	800742a <USBD_AUDIO_Sync+0x134>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800740c:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007410:	461a      	mov	r2, r3
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007418:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8007422:	dd02      	ble.n	800742a <USBD_AUDIO_Sync+0x134>
      {
        BufferSize += 4U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3304      	adds	r3, #4
 8007428:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007430:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8007434:	2b02      	cmp	r3, #2
 8007436:	d115      	bne.n	8007464 <USBD_AUDIO_Sync+0x16e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	33b0      	adds	r3, #176	; 0xb0
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	1d10      	adds	r0, r2, #4
 800744e:	2202      	movs	r2, #2
 8007450:	68f9      	ldr	r1, [r7, #12]
 8007452:	4798      	blx	r3
                                                                        BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
 8007460:	e000      	b.n	8007464 <USBD_AUDIO_Sync+0x16e>
    return;
 8007462:	bf00      	nop
  }
}
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
	...

080074a0 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	32b0      	adds	r2, #176	; 0xb0
 80074b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ba:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e07c      	b.n	80075c0 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 80074c6:	4b40      	ldr	r3, [pc, #256]	; (80075c8 <USBD_AUDIO_DataOut+0x128>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d176      	bne.n	80075be <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f002 f876 	bl	80095c6 <USBD_LL_GetRxDataSize>
 80074da:	4603      	mov	r3, r0
 80074dc:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	33b0      	adds	r3, #176	; 0xb0
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80074f6:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 80074fa:	4611      	mov	r1, r2
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	440a      	add	r2, r1
 8007500:	1d10      	adds	r0, r2, #4
 8007502:	8979      	ldrh	r1, [r7, #10]
 8007504:	2201      	movs	r2, #1
 8007506:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800750e:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 8007512:	897b      	ldrh	r3, [r7, #10]
 8007514:	4413      	add	r3, r2
 8007516:	b29a      	uxth	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800751e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007528:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800752c:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8007530:	d121      	bne.n	8007576 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007538:	2200      	movs	r2, #0
 800753a:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007544:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8007548:	2b03      	cmp	r3, #3
 800754a:	d114      	bne.n	8007576 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	33b0      	adds	r3, #176	; 0xb0
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	1d10      	adds	r0, r2, #4
 8007562:	2201      	movs	r2, #1
 8007564:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8007568:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800757c:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10d      	bne.n	80075a0 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800758a:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 800758e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8007592:	d105      	bne.n	80075a0 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80075a0:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <USBD_AUDIO_DataOut+0x128>)
 80075a2:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075aa:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80075ae:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	1d1a      	adds	r2, r3, #4
 80075b6:	23c0      	movs	r3, #192	; 0xc0
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 ffe3 	bl	8009584 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	200000be 	.word	0x200000be

080075cc <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	32b0      	adds	r2, #176	; 0xb0
 80075e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e4:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d017      	beq.n	800761c <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80075f2:	330b      	adds	r3, #11
 80075f4:	2240      	movs	r2, #64	; 0x40
 80075f6:	2100      	movs	r1, #0
 80075f8:	4618      	mov	r0, r3
 80075fa:	f002 f85f 	bl	80096bc <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007604:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	88d2      	ldrh	r2, [r2, #6]
 800760a:	2a40      	cmp	r2, #64	; 0x40
 800760c:	bf28      	it	cs
 800760e:	2240      	movcs	r2, #64	; 0x40
 8007610:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 fadf 	bl	8008bd8 <USBD_CtlSendData>
 800761a:	e000      	b.n	800761e <AUDIO_REQ_GetCurrent+0x52>
    return;
 800761c:	bf00      	nop
}
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	32b0      	adds	r2, #176	; 0xb0
 8007638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d02f      	beq.n	80076a4 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	88db      	ldrh	r3, [r3, #6]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d02c      	beq.n	80076a6 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	88db      	ldrh	r3, [r3, #6]
 800765c:	2b3f      	cmp	r3, #63	; 0x3f
 800765e:	d803      	bhi.n	8007668 <AUDIO_REQ_SetCurrent+0x44>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	88db      	ldrh	r3, [r3, #6]
 8007664:	b2da      	uxtb	r2, r3
 8007666:	e000      	b.n	800766a <AUDIO_REQ_SetCurrent+0x46>
 8007668:	2240      	movs	r2, #64	; 0x40
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007670:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	889b      	ldrh	r3, [r3, #4]
 8007678:	0a1b      	lsrs	r3, r3, #8
 800767a:	b29b      	uxth	r3, r3
 800767c:	b2da      	uxtb	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007684:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800768e:	330b      	adds	r3, #11
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8007696:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fac7 	bl	8008c30 <USBD_CtlPrepareRx>
 80076a2:	e000      	b.n	80076a6 <AUDIO_REQ_SetCurrent+0x82>
    return;
 80076a4:	bf00      	nop
  }
}
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	220a      	movs	r2, #10
 80076b8:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 80076ba:	4b03      	ldr	r3, [pc, #12]	; (80076c8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	200000b4 	.word	0x200000b4

080076cc <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	e009      	b.n	80076f4 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	33b0      	adds	r3, #176	; 0xb0
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	885b      	ldrh	r3, [r3, #2]
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	429a      	cmp	r2, r3
 8007722:	d91c      	bls.n	800775e <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800772c:	e011      	b.n	8007752 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800772e:	f107 030a 	add.w	r3, r7, #10
 8007732:	4619      	mov	r1, r3
 8007734:	6978      	ldr	r0, [r7, #20]
 8007736:	f000 fbe0 	bl	8007efa <USBD_GetNextDesc>
 800773a:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	785b      	ldrb	r3, [r3, #1]
 8007740:	2b24      	cmp	r3, #36	; 0x24
 8007742:	d106      	bne.n	8007752 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8007748:	2b01      	cmp	r3, #1
 800774a:	d102      	bne.n	8007752 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	613b      	str	r3, [r7, #16]
        break;
 8007750:	e005      	b.n	800775e <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	885b      	ldrh	r3, [r3, #2]
 8007756:	b29a      	uxth	r2, r3
 8007758:	897b      	ldrh	r3, [r7, #10]
 800775a:	429a      	cmp	r2, r3
 800775c:	d8e7      	bhi.n	800772e <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 800775e:	693b      	ldr	r3, [r7, #16]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800777c:	2303      	movs	r3, #3
 800777e:	e01f      	b.n	80077c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	79fa      	ldrb	r2, [r7, #7]
 80077b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f001 fd8f 	bl	80092d8 <USBD_LL_Init>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077dc:	2303      	movs	r3, #3
 80077de:	e025      	b.n	800782c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	32ae      	adds	r2, #174	; 0xae
 80077f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00f      	beq.n	800781c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	32ae      	adds	r2, #174	; 0xae
 8007806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	f107 020e 	add.w	r2, r7, #14
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	4602      	mov	r2, r0
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 fd97 	bl	8009370 <USBD_LL_Start>
 8007842:	4603      	mov	r3, r0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007854:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007856:	4618      	mov	r0, r3
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	460b      	mov	r3, r1
 800786c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d009      	beq.n	8007890 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	4611      	mov	r1, r2
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	460b      	mov	r3, r1
 80078a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	78fa      	ldrb	r2, [r7, #3]
 80078b4:	4611      	mov	r1, r2
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 f8ce 	bl	8008a82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078f4:	461a      	mov	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007902:	f003 031f 	and.w	r3, r3, #31
 8007906:	2b02      	cmp	r3, #2
 8007908:	d01a      	beq.n	8007940 <USBD_LL_SetupStage+0x72>
 800790a:	2b02      	cmp	r3, #2
 800790c:	d822      	bhi.n	8007954 <USBD_LL_SetupStage+0x86>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <USBD_LL_SetupStage+0x4a>
 8007912:	2b01      	cmp	r3, #1
 8007914:	d00a      	beq.n	800792c <USBD_LL_SetupStage+0x5e>
 8007916:	e01d      	b.n	8007954 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fb25 	bl	8007f70 <USBD_StdDevReq>
 8007926:	4603      	mov	r3, r0
 8007928:	73fb      	strb	r3, [r7, #15]
      break;
 800792a:	e020      	b.n	800796e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fb8d 	bl	8008054 <USBD_StdItfReq>
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]
      break;
 800793e:	e016      	b.n	800796e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fbef 	bl	800812c <USBD_StdEPReq>
 800794e:	4603      	mov	r3, r0
 8007950:	73fb      	strb	r3, [r7, #15]
      break;
 8007952:	e00c      	b.n	800796e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800795a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800795e:	b2db      	uxtb	r3, r3
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 fd64 	bl	8009430 <USBD_LL_StallEP>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
      break;
 800796c:	bf00      	nop
  }

  return ret;
 800796e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	460b      	mov	r3, r1
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800798a:	7afb      	ldrb	r3, [r7, #11]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d16e      	bne.n	8007a6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007996:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800799e:	2b03      	cmp	r3, #3
 80079a0:	f040 8098 	bne.w	8007ad4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d913      	bls.n	80079d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	1ad2      	subs	r2, r2, r3
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	4293      	cmp	r3, r2
 80079c8:	bf28      	it	cs
 80079ca:	4613      	movcs	r3, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f001 f94a 	bl	8008c6a <USBD_CtlContinueRx>
 80079d6:	e07d      	b.n	8007ad4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d014      	beq.n	8007a10 <USBD_LL_DataOutStage+0x98>
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d81d      	bhi.n	8007a26 <USBD_LL_DataOutStage+0xae>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <USBD_LL_DataOutStage+0x7c>
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d003      	beq.n	80079fa <USBD_LL_DataOutStage+0x82>
 80079f2:	e018      	b.n	8007a26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	75bb      	strb	r3, [r7, #22]
            break;
 80079f8:	e018      	b.n	8007a2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	4619      	mov	r1, r3
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fa5e 	bl	8007ec6 <USBD_CoreFindIF>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75bb      	strb	r3, [r7, #22]
            break;
 8007a0e:	e00d      	b.n	8007a2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	4619      	mov	r1, r3
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 fa60 	bl	8007ee0 <USBD_CoreFindEP>
 8007a20:	4603      	mov	r3, r0
 8007a22:	75bb      	strb	r3, [r7, #22]
            break;
 8007a24:	e002      	b.n	8007a2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75bb      	strb	r3, [r7, #22]
            break;
 8007a2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a2c:	7dbb      	ldrb	r3, [r7, #22]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d119      	bne.n	8007a66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d113      	bne.n	8007a66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a3e:	7dba      	ldrb	r2, [r7, #22]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	32ae      	adds	r2, #174	; 0xae
 8007a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a4e:	7dba      	ldrb	r2, [r7, #22]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a56:	7dba      	ldrb	r2, [r7, #22]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	32ae      	adds	r2, #174	; 0xae
 8007a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f001 f910 	bl	8008c8c <USBD_CtlSendStatus>
 8007a6c:	e032      	b.n	8007ad4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
 8007a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	4619      	mov	r1, r3
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fa31 	bl	8007ee0 <USBD_CoreFindEP>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a82:	7dbb      	ldrb	r3, [r7, #22]
 8007a84:	2bff      	cmp	r3, #255	; 0xff
 8007a86:	d025      	beq.n	8007ad4 <USBD_LL_DataOutStage+0x15c>
 8007a88:	7dbb      	ldrb	r3, [r7, #22]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d122      	bne.n	8007ad4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d117      	bne.n	8007aca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a9a:	7dba      	ldrb	r2, [r7, #22]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	32ae      	adds	r2, #174	; 0xae
 8007aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00f      	beq.n	8007aca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007aaa:	7dba      	ldrb	r2, [r7, #22]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ab2:	7dba      	ldrb	r2, [r7, #22]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	32ae      	adds	r2, #174	; 0xae
 8007ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	7afa      	ldrb	r2, [r7, #11]
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	4798      	blx	r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	e000      	b.n	8007ad6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b086      	sub	sp, #24
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d16f      	bne.n	8007bd2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3314      	adds	r3, #20
 8007af6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d15a      	bne.n	8007bb8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d914      	bls.n	8007b38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	461a      	mov	r2, r3
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f001 f872 	bl	8008c0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f001 fd27 	bl	8009584 <USBD_LL_PrepareReceive>
 8007b36:	e03f      	b.n	8007bb8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d11c      	bne.n	8007b7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d316      	bcc.n	8007b7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d20f      	bcs.n	8007b7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2100      	movs	r1, #0
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f001 f853 	bl	8008c0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b70:	2300      	movs	r3, #0
 8007b72:	2200      	movs	r2, #0
 8007b74:	2100      	movs	r1, #0
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f001 fd04 	bl	8009584 <USBD_LL_PrepareReceive>
 8007b7c:	e01c      	b.n	8007bb8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d10f      	bne.n	8007baa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d009      	beq.n	8007baa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007baa:	2180      	movs	r1, #128	; 0x80
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f001 fc3f 	bl	8009430 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f001 f87d 	bl	8008cb2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d03a      	beq.n	8007c38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7ff fe42 	bl	800784c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bd0:	e032      	b.n	8007c38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	4619      	mov	r1, r3
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f97f 	bl	8007ee0 <USBD_CoreFindEP>
 8007be2:	4603      	mov	r3, r0
 8007be4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	2bff      	cmp	r3, #255	; 0xff
 8007bea:	d025      	beq.n	8007c38 <USBD_LL_DataInStage+0x15a>
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d122      	bne.n	8007c38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d11c      	bne.n	8007c38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bfe:	7dfa      	ldrb	r2, [r7, #23]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	32ae      	adds	r2, #174	; 0xae
 8007c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d014      	beq.n	8007c38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c0e:	7dfa      	ldrb	r2, [r7, #23]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c16:	7dfa      	ldrb	r2, [r7, #23]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	32ae      	adds	r2, #174	; 0xae
 8007c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	7afa      	ldrb	r2, [r7, #11]
 8007c24:	4611      	mov	r1, r2
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	4798      	blx	r3
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c2e:	7dbb      	ldrb	r3, [r7, #22]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c34:	7dbb      	ldrb	r3, [r7, #22]
 8007c36:	e000      	b.n	8007c3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d014      	beq.n	8007ca8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00e      	beq.n	8007ca8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6852      	ldr	r2, [r2, #4]
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	4611      	mov	r1, r2
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ca8:	2340      	movs	r3, #64	; 0x40
 8007caa:	2200      	movs	r2, #0
 8007cac:	2100      	movs	r1, #0
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 fb79 	bl	80093a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2240      	movs	r2, #64	; 0x40
 8007cc0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cc4:	2340      	movs	r3, #64	; 0x40
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2180      	movs	r1, #128	; 0x80
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 fb6b 	bl	80093a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2240      	movs	r2, #64	; 0x40
 8007cda:	621a      	str	r2, [r3, #32]

  return ret;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2204      	movs	r2, #4
 8007d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b083      	sub	sp, #12
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d106      	bne.n	8007d54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d110      	bne.n	8007d98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	32ae      	adds	r2, #174	; 0xae
 8007db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e01c      	b.n	8007dfe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d115      	bne.n	8007dfc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32ae      	adds	r2, #174	; 0xae
 8007dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	32ae      	adds	r2, #174	; 0xae
 8007dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	4611      	mov	r1, r2
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	32ae      	adds	r2, #174	; 0xae
 8007e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e01c      	b.n	8007e62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d115      	bne.n	8007e60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	32ae      	adds	r2, #174	; 0xae
 8007e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	32ae      	adds	r2, #174	; 0xae
 8007e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	78fa      	ldrb	r2, [r7, #3]
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00e      	beq.n	8007ebc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6852      	ldr	r2, [r2, #4]
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	4611      	mov	r1, r2
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	4798      	blx	r3
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ed2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	881a      	ldrh	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	4413      	add	r3, r2
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4413      	add	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f26:	68fb      	ldr	r3, [r7, #12]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f52:	8a3b      	ldrh	r3, [r7, #16]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	b21a      	sxth	r2, r3
 8007f58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	b21b      	sxth	r3, r3
 8007f60:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f62:	89fb      	ldrh	r3, [r7, #14]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f86:	2b40      	cmp	r3, #64	; 0x40
 8007f88:	d005      	beq.n	8007f96 <USBD_StdDevReq+0x26>
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d857      	bhi.n	800803e <USBD_StdDevReq+0xce>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00f      	beq.n	8007fb2 <USBD_StdDevReq+0x42>
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d153      	bne.n	800803e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	32ae      	adds	r2, #174	; 0xae
 8007fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4798      	blx	r3
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb0:	e04a      	b.n	8008048 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	785b      	ldrb	r3, [r3, #1]
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	d83b      	bhi.n	8008032 <USBD_StdDevReq+0xc2>
 8007fba:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <USBD_StdDevReq+0x50>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08008015 	.word	0x08008015
 8007fc4:	08008029 	.word	0x08008029
 8007fc8:	08008033 	.word	0x08008033
 8007fcc:	0800801f 	.word	0x0800801f
 8007fd0:	08008033 	.word	0x08008033
 8007fd4:	08007ff3 	.word	0x08007ff3
 8007fd8:	08007fe9 	.word	0x08007fe9
 8007fdc:	08008033 	.word	0x08008033
 8007fe0:	0800800b 	.word	0x0800800b
 8007fe4:	08007ffd 	.word	0x08007ffd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa3c 	bl	8008468 <USBD_GetDescriptor>
          break;
 8007ff0:	e024      	b.n	800803c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fba1 	bl	800873c <USBD_SetAddress>
          break;
 8007ffa:	e01f      	b.n	800803c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fbe0 	bl	80087c4 <USBD_SetConfig>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]
          break;
 8008008:	e018      	b.n	800803c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fc83 	bl	8008918 <USBD_GetConfig>
          break;
 8008012:	e013      	b.n	800803c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fcb4 	bl	8008984 <USBD_GetStatus>
          break;
 800801c:	e00e      	b.n	800803c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fce3 	bl	80089ec <USBD_SetFeature>
          break;
 8008026:	e009      	b.n	800803c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fd07 	bl	8008a3e <USBD_ClrFeature>
          break;
 8008030:	e004      	b.n	800803c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fd5e 	bl	8008af6 <USBD_CtlError>
          break;
 800803a:	bf00      	nop
      }
      break;
 800803c:	e004      	b.n	8008048 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fd58 	bl	8008af6 <USBD_CtlError>
      break;
 8008046:	bf00      	nop
  }

  return ret;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop

08008054 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800806a:	2b40      	cmp	r3, #64	; 0x40
 800806c:	d005      	beq.n	800807a <USBD_StdItfReq+0x26>
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	d852      	bhi.n	8008118 <USBD_StdItfReq+0xc4>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <USBD_StdItfReq+0x26>
 8008076:	2b20      	cmp	r3, #32
 8008078:	d14e      	bne.n	8008118 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	b2db      	uxtb	r3, r3
 8008082:	3b01      	subs	r3, #1
 8008084:	2b02      	cmp	r3, #2
 8008086:	d840      	bhi.n	800810a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	889b      	ldrh	r3, [r3, #4]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d836      	bhi.n	8008100 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	889b      	ldrh	r3, [r3, #4]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff ff13 	bl	8007ec6 <USBD_CoreFindIF>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2bff      	cmp	r3, #255	; 0xff
 80080a8:	d01d      	beq.n	80080e6 <USBD_StdItfReq+0x92>
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d11a      	bne.n	80080e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080b0:	7bba      	ldrb	r2, [r7, #14]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	32ae      	adds	r2, #174	; 0xae
 80080b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00f      	beq.n	80080e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080c0:	7bba      	ldrb	r2, [r7, #14]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080c8:	7bba      	ldrb	r2, [r7, #14]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	32ae      	adds	r2, #174	; 0xae
 80080ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080de:	e004      	b.n	80080ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080e4:	e001      	b.n	80080ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80080e6:	2303      	movs	r3, #3
 80080e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	88db      	ldrh	r3, [r3, #6]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d110      	bne.n	8008114 <USBD_StdItfReq+0xc0>
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10d      	bne.n	8008114 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fdc7 	bl	8008c8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080fe:	e009      	b.n	8008114 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fcf7 	bl	8008af6 <USBD_CtlError>
          break;
 8008108:	e004      	b.n	8008114 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fcf2 	bl	8008af6 <USBD_CtlError>
          break;
 8008112:	e000      	b.n	8008116 <USBD_StdItfReq+0xc2>
          break;
 8008114:	bf00      	nop
      }
      break;
 8008116:	e004      	b.n	8008122 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fceb 	bl	8008af6 <USBD_CtlError>
      break;
 8008120:	bf00      	nop
  }

  return ret;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	889b      	ldrh	r3, [r3, #4]
 800813e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008148:	2b40      	cmp	r3, #64	; 0x40
 800814a:	d007      	beq.n	800815c <USBD_StdEPReq+0x30>
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	f200 817f 	bhi.w	8008450 <USBD_StdEPReq+0x324>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d02a      	beq.n	80081ac <USBD_StdEPReq+0x80>
 8008156:	2b20      	cmp	r3, #32
 8008158:	f040 817a 	bne.w	8008450 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff febd 	bl	8007ee0 <USBD_CoreFindEP>
 8008166:	4603      	mov	r3, r0
 8008168:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800816a:	7b7b      	ldrb	r3, [r7, #13]
 800816c:	2bff      	cmp	r3, #255	; 0xff
 800816e:	f000 8174 	beq.w	800845a <USBD_StdEPReq+0x32e>
 8008172:	7b7b      	ldrb	r3, [r7, #13]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f040 8170 	bne.w	800845a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800817a:	7b7a      	ldrb	r2, [r7, #13]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008182:	7b7a      	ldrb	r2, [r7, #13]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	32ae      	adds	r2, #174	; 0xae
 8008188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 8163 	beq.w	800845a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008194:	7b7a      	ldrb	r2, [r7, #13]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	32ae      	adds	r2, #174	; 0xae
 800819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
 80081a6:	4603      	mov	r3, r0
 80081a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081aa:	e156      	b.n	800845a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	785b      	ldrb	r3, [r3, #1]
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d008      	beq.n	80081c6 <USBD_StdEPReq+0x9a>
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	f300 8145 	bgt.w	8008444 <USBD_StdEPReq+0x318>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 809b 	beq.w	80082f6 <USBD_StdEPReq+0x1ca>
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d03c      	beq.n	800823e <USBD_StdEPReq+0x112>
 80081c4:	e13e      	b.n	8008444 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d002      	beq.n	80081d8 <USBD_StdEPReq+0xac>
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d016      	beq.n	8008204 <USBD_StdEPReq+0xd8>
 80081d6:	e02c      	b.n	8008232 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00d      	beq.n	80081fa <USBD_StdEPReq+0xce>
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	2b80      	cmp	r3, #128	; 0x80
 80081e2:	d00a      	beq.n	80081fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 f921 	bl	8009430 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081ee:	2180      	movs	r1, #128	; 0x80
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f91d 	bl	8009430 <USBD_LL_StallEP>
 80081f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081f8:	e020      	b.n	800823c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fc7a 	bl	8008af6 <USBD_CtlError>
              break;
 8008202:	e01b      	b.n	800823c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	885b      	ldrh	r3, [r3, #2]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10e      	bne.n	800822a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00b      	beq.n	800822a <USBD_StdEPReq+0xfe>
 8008212:	7bbb      	ldrb	r3, [r7, #14]
 8008214:	2b80      	cmp	r3, #128	; 0x80
 8008216:	d008      	beq.n	800822a <USBD_StdEPReq+0xfe>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	88db      	ldrh	r3, [r3, #6]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d104      	bne.n	800822a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 f903 	bl	8009430 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fd2e 	bl	8008c8c <USBD_CtlSendStatus>

              break;
 8008230:	e004      	b.n	800823c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fc5e 	bl	8008af6 <USBD_CtlError>
              break;
 800823a:	bf00      	nop
          }
          break;
 800823c:	e107      	b.n	800844e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d002      	beq.n	8008250 <USBD_StdEPReq+0x124>
 800824a:	2b03      	cmp	r3, #3
 800824c:	d016      	beq.n	800827c <USBD_StdEPReq+0x150>
 800824e:	e04b      	b.n	80082e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00d      	beq.n	8008272 <USBD_StdEPReq+0x146>
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b80      	cmp	r3, #128	; 0x80
 800825a:	d00a      	beq.n	8008272 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 f8e5 	bl	8009430 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008266:	2180      	movs	r1, #128	; 0x80
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f001 f8e1 	bl	8009430 <USBD_LL_StallEP>
 800826e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008270:	e040      	b.n	80082f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fc3e 	bl	8008af6 <USBD_CtlError>
              break;
 800827a:	e03b      	b.n	80082f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	885b      	ldrh	r3, [r3, #2]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d136      	bne.n	80082f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 f8eb 	bl	800946e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fcf7 	bl	8008c8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7ff fe1c 	bl	8007ee0 <USBD_CoreFindEP>
 80082a8:	4603      	mov	r3, r0
 80082aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082ac:	7b7b      	ldrb	r3, [r7, #13]
 80082ae:	2bff      	cmp	r3, #255	; 0xff
 80082b0:	d01f      	beq.n	80082f2 <USBD_StdEPReq+0x1c6>
 80082b2:	7b7b      	ldrb	r3, [r7, #13]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d11c      	bne.n	80082f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082b8:	7b7a      	ldrb	r2, [r7, #13]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082c0:	7b7a      	ldrb	r2, [r7, #13]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	32ae      	adds	r2, #174	; 0xae
 80082c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082d0:	7b7a      	ldrb	r2, [r7, #13]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	32ae      	adds	r2, #174	; 0xae
 80082d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	4798      	blx	r3
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80082e6:	e004      	b.n	80082f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fc03 	bl	8008af6 <USBD_CtlError>
              break;
 80082f0:	e000      	b.n	80082f4 <USBD_StdEPReq+0x1c8>
              break;
 80082f2:	bf00      	nop
          }
          break;
 80082f4:	e0ab      	b.n	800844e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d002      	beq.n	8008308 <USBD_StdEPReq+0x1dc>
 8008302:	2b03      	cmp	r3, #3
 8008304:	d032      	beq.n	800836c <USBD_StdEPReq+0x240>
 8008306:	e097      	b.n	8008438 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <USBD_StdEPReq+0x1f2>
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b80      	cmp	r3, #128	; 0x80
 8008312:	d004      	beq.n	800831e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fbed 	bl	8008af6 <USBD_CtlError>
                break;
 800831c:	e091      	b.n	8008442 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800831e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008322:	2b00      	cmp	r3, #0
 8008324:	da0b      	bge.n	800833e <USBD_StdEPReq+0x212>
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	3310      	adds	r3, #16
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	4413      	add	r3, r2
 800833a:	3304      	adds	r3, #4
 800833c:	e00b      	b.n	8008356 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	4413      	add	r3, r2
 8008354:	3304      	adds	r3, #4
 8008356:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2202      	movs	r2, #2
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fc37 	bl	8008bd8 <USBD_CtlSendData>
              break;
 800836a:	e06a      	b.n	8008442 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800836c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008370:	2b00      	cmp	r3, #0
 8008372:	da11      	bge.n	8008398 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	f003 020f 	and.w	r2, r3, #15
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	440b      	add	r3, r1
 8008386:	3324      	adds	r3, #36	; 0x24
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d117      	bne.n	80083be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fbb0 	bl	8008af6 <USBD_CtlError>
                  break;
 8008396:	e054      	b.n	8008442 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	f003 020f 	and.w	r2, r3, #15
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d104      	bne.n	80083be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fb9d 	bl	8008af6 <USBD_CtlError>
                  break;
 80083bc:	e041      	b.n	8008442 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	da0b      	bge.n	80083de <USBD_StdEPReq+0x2b2>
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	3310      	adds	r3, #16
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	4413      	add	r3, r2
 80083da:	3304      	adds	r3, #4
 80083dc:	e00b      	b.n	80083f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	3304      	adds	r3, #4
 80083f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <USBD_StdEPReq+0x2d8>
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b80      	cmp	r3, #128	; 0x80
 8008402:	d103      	bne.n	800840c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	e00e      	b.n	800842a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 f84b 	bl	80094ac <USBD_LL_IsStallEP>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2201      	movs	r2, #1
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	e002      	b.n	800842a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2202      	movs	r2, #2
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fbd1 	bl	8008bd8 <USBD_CtlSendData>
              break;
 8008436:	e004      	b.n	8008442 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fb5b 	bl	8008af6 <USBD_CtlError>
              break;
 8008440:	bf00      	nop
          }
          break;
 8008442:	e004      	b.n	800844e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fb55 	bl	8008af6 <USBD_CtlError>
          break;
 800844c:	bf00      	nop
      }
      break;
 800844e:	e005      	b.n	800845c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fb4f 	bl	8008af6 <USBD_CtlError>
      break;
 8008458:	e000      	b.n	800845c <USBD_StdEPReq+0x330>
      break;
 800845a:	bf00      	nop
  }

  return ret;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	885b      	ldrh	r3, [r3, #2]
 8008482:	0a1b      	lsrs	r3, r3, #8
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	2b06      	cmp	r3, #6
 800848a:	f200 8128 	bhi.w	80086de <USBD_GetDescriptor+0x276>
 800848e:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <USBD_GetDescriptor+0x2c>)
 8008490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008494:	080084b1 	.word	0x080084b1
 8008498:	080084c9 	.word	0x080084c9
 800849c:	08008509 	.word	0x08008509
 80084a0:	080086df 	.word	0x080086df
 80084a4:	080086df 	.word	0x080086df
 80084a8:	0800867f 	.word	0x0800867f
 80084ac:	080086ab 	.word	0x080086ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	7c12      	ldrb	r2, [r2, #16]
 80084bc:	f107 0108 	add.w	r1, r7, #8
 80084c0:	4610      	mov	r0, r2
 80084c2:	4798      	blx	r3
 80084c4:	60f8      	str	r0, [r7, #12]
      break;
 80084c6:	e112      	b.n	80086ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7c1b      	ldrb	r3, [r3, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10d      	bne.n	80084ec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	f107 0208 	add.w	r2, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3301      	adds	r3, #1
 80084e6:	2202      	movs	r2, #2
 80084e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084ea:	e100      	b.n	80086ee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	f107 0208 	add.w	r2, r7, #8
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	2202      	movs	r2, #2
 8008504:	701a      	strb	r2, [r3, #0]
      break;
 8008506:	e0f2      	b.n	80086ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	885b      	ldrh	r3, [r3, #2]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b05      	cmp	r3, #5
 8008510:	f200 80ac 	bhi.w	800866c <USBD_GetDescriptor+0x204>
 8008514:	a201      	add	r2, pc, #4	; (adr r2, 800851c <USBD_GetDescriptor+0xb4>)
 8008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851a:	bf00      	nop
 800851c:	08008535 	.word	0x08008535
 8008520:	08008569 	.word	0x08008569
 8008524:	0800859d 	.word	0x0800859d
 8008528:	080085d1 	.word	0x080085d1
 800852c:	08008605 	.word	0x08008605
 8008530:	08008639 	.word	0x08008639
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7c12      	ldrb	r2, [r2, #16]
 800854c:	f107 0108 	add.w	r1, r7, #8
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008556:	e091      	b.n	800867c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 facb 	bl	8008af6 <USBD_CtlError>
            err++;
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	3301      	adds	r3, #1
 8008564:	72fb      	strb	r3, [r7, #11]
          break;
 8008566:	e089      	b.n	800867c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	7c12      	ldrb	r2, [r2, #16]
 8008580:	f107 0108 	add.w	r1, r7, #8
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800858a:	e077      	b.n	800867c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fab1 	bl	8008af6 <USBD_CtlError>
            err++;
 8008594:	7afb      	ldrb	r3, [r7, #11]
 8008596:	3301      	adds	r3, #1
 8008598:	72fb      	strb	r3, [r7, #11]
          break;
 800859a:	e06f      	b.n	800867c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00b      	beq.n	80085c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	7c12      	ldrb	r2, [r2, #16]
 80085b4:	f107 0108 	add.w	r1, r7, #8
 80085b8:	4610      	mov	r0, r2
 80085ba:	4798      	blx	r3
 80085bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085be:	e05d      	b.n	800867c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa97 	bl	8008af6 <USBD_CtlError>
            err++;
 80085c8:	7afb      	ldrb	r3, [r7, #11]
 80085ca:	3301      	adds	r3, #1
 80085cc:	72fb      	strb	r3, [r7, #11]
          break;
 80085ce:	e055      	b.n	800867c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	7c12      	ldrb	r2, [r2, #16]
 80085e8:	f107 0108 	add.w	r1, r7, #8
 80085ec:	4610      	mov	r0, r2
 80085ee:	4798      	blx	r3
 80085f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085f2:	e043      	b.n	800867c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa7d 	bl	8008af6 <USBD_CtlError>
            err++;
 80085fc:	7afb      	ldrb	r3, [r7, #11]
 80085fe:	3301      	adds	r3, #1
 8008600:	72fb      	strb	r3, [r7, #11]
          break;
 8008602:	e03b      	b.n	800867c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	7c12      	ldrb	r2, [r2, #16]
 800861c:	f107 0108 	add.w	r1, r7, #8
 8008620:	4610      	mov	r0, r2
 8008622:	4798      	blx	r3
 8008624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008626:	e029      	b.n	800867c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa63 	bl	8008af6 <USBD_CtlError>
            err++;
 8008630:	7afb      	ldrb	r3, [r7, #11]
 8008632:	3301      	adds	r3, #1
 8008634:	72fb      	strb	r3, [r7, #11]
          break;
 8008636:	e021      	b.n	800867c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	7c12      	ldrb	r2, [r2, #16]
 8008650:	f107 0108 	add.w	r1, r7, #8
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
 8008658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800865a:	e00f      	b.n	800867c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fa49 	bl	8008af6 <USBD_CtlError>
            err++;
 8008664:	7afb      	ldrb	r3, [r7, #11]
 8008666:	3301      	adds	r3, #1
 8008668:	72fb      	strb	r3, [r7, #11]
          break;
 800866a:	e007      	b.n	800867c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fa41 	bl	8008af6 <USBD_CtlError>
          err++;
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	3301      	adds	r3, #1
 8008678:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800867a:	bf00      	nop
      }
      break;
 800867c:	e037      	b.n	80086ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	7c1b      	ldrb	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d109      	bne.n	800869a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868e:	f107 0208 	add.w	r2, r7, #8
 8008692:	4610      	mov	r0, r2
 8008694:	4798      	blx	r3
 8008696:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008698:	e029      	b.n	80086ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fa2a 	bl	8008af6 <USBD_CtlError>
        err++;
 80086a2:	7afb      	ldrb	r3, [r7, #11]
 80086a4:	3301      	adds	r3, #1
 80086a6:	72fb      	strb	r3, [r7, #11]
      break;
 80086a8:	e021      	b.n	80086ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7c1b      	ldrb	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10d      	bne.n	80086ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	f107 0208 	add.w	r2, r7, #8
 80086be:	4610      	mov	r0, r2
 80086c0:	4798      	blx	r3
 80086c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3301      	adds	r3, #1
 80086c8:	2207      	movs	r2, #7
 80086ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086cc:	e00f      	b.n	80086ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fa10 	bl	8008af6 <USBD_CtlError>
        err++;
 80086d6:	7afb      	ldrb	r3, [r7, #11]
 80086d8:	3301      	adds	r3, #1
 80086da:	72fb      	strb	r3, [r7, #11]
      break;
 80086dc:	e007      	b.n	80086ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fa08 	bl	8008af6 <USBD_CtlError>
      err++;
 80086e6:	7afb      	ldrb	r3, [r7, #11]
 80086e8:	3301      	adds	r3, #1
 80086ea:	72fb      	strb	r3, [r7, #11]
      break;
 80086ec:	bf00      	nop
  }

  if (err != 0U)
 80086ee:	7afb      	ldrb	r3, [r7, #11]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d11e      	bne.n	8008732 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	88db      	ldrh	r3, [r3, #6]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d016      	beq.n	800872a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80086fc:	893b      	ldrh	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00e      	beq.n	8008720 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	88da      	ldrh	r2, [r3, #6]
 8008706:	893b      	ldrh	r3, [r7, #8]
 8008708:	4293      	cmp	r3, r2
 800870a:	bf28      	it	cs
 800870c:	4613      	movcs	r3, r2
 800870e:	b29b      	uxth	r3, r3
 8008710:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008712:	893b      	ldrh	r3, [r7, #8]
 8008714:	461a      	mov	r2, r3
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fa5d 	bl	8008bd8 <USBD_CtlSendData>
 800871e:	e009      	b.n	8008734 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f9e7 	bl	8008af6 <USBD_CtlError>
 8008728:	e004      	b.n	8008734 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 faae 	bl	8008c8c <USBD_CtlSendStatus>
 8008730:	e000      	b.n	8008734 <USBD_GetDescriptor+0x2cc>
    return;
 8008732:	bf00      	nop
  }
}
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop

0800873c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	889b      	ldrh	r3, [r3, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d131      	bne.n	80087b2 <USBD_SetAddress+0x76>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	88db      	ldrh	r3, [r3, #6]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d12d      	bne.n	80087b2 <USBD_SetAddress+0x76>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	885b      	ldrh	r3, [r3, #2]
 800875a:	2b7f      	cmp	r3, #127	; 0x7f
 800875c:	d829      	bhi.n	80087b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008768:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b03      	cmp	r3, #3
 8008774:	d104      	bne.n	8008780 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f9bc 	bl	8008af6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877e:	e01d      	b.n	80087bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7bfa      	ldrb	r2, [r7, #15]
 8008784:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 feb9 	bl	8009504 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa7a 	bl	8008c8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d004      	beq.n	80087a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2202      	movs	r2, #2
 80087a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a6:	e009      	b.n	80087bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b0:	e004      	b.n	80087bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f99e 	bl	8008af6 <USBD_CtlError>
  }
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	4b4e      	ldr	r3, [pc, #312]	; (8008914 <USBD_SetConfig+0x150>)
 80087da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087dc:	4b4d      	ldr	r3, [pc, #308]	; (8008914 <USBD_SetConfig+0x150>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d905      	bls.n	80087f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f985 	bl	8008af6 <USBD_CtlError>
    return USBD_FAIL;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e08c      	b.n	800890a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d002      	beq.n	8008802 <USBD_SetConfig+0x3e>
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d029      	beq.n	8008854 <USBD_SetConfig+0x90>
 8008800:	e075      	b.n	80088ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008802:	4b44      	ldr	r3, [pc, #272]	; (8008914 <USBD_SetConfig+0x150>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d020      	beq.n	800884c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800880a:	4b42      	ldr	r3, [pc, #264]	; (8008914 <USBD_SetConfig+0x150>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008814:	4b3f      	ldr	r3, [pc, #252]	; (8008914 <USBD_SetConfig+0x150>)
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff f821 	bl	8007862 <USBD_SetClassConfig>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d008      	beq.n	800883c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f962 	bl	8008af6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2202      	movs	r2, #2
 8008836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800883a:	e065      	b.n	8008908 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fa25 	bl	8008c8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2203      	movs	r2, #3
 8008846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800884a:	e05d      	b.n	8008908 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fa1d 	bl	8008c8c <USBD_CtlSendStatus>
      break;
 8008852:	e059      	b.n	8008908 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008854:	4b2f      	ldr	r3, [pc, #188]	; (8008914 <USBD_SetConfig+0x150>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d112      	bne.n	8008882 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008864:	4b2b      	ldr	r3, [pc, #172]	; (8008914 <USBD_SetConfig+0x150>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800886e:	4b29      	ldr	r3, [pc, #164]	; (8008914 <USBD_SetConfig+0x150>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff f810 	bl	800789a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa06 	bl	8008c8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008880:	e042      	b.n	8008908 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008882:	4b24      	ldr	r3, [pc, #144]	; (8008914 <USBD_SetConfig+0x150>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	429a      	cmp	r2, r3
 800888e:	d02a      	beq.n	80088e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	b2db      	uxtb	r3, r3
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7fe fffe 	bl	800789a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800889e:	4b1d      	ldr	r3, [pc, #116]	; (8008914 <USBD_SetConfig+0x150>)
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088a8:	4b1a      	ldr	r3, [pc, #104]	; (8008914 <USBD_SetConfig+0x150>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7fe ffd7 	bl	8007862 <USBD_SetClassConfig>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00f      	beq.n	80088de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f918 	bl	8008af6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fe ffe3 	bl	800789a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088dc:	e014      	b.n	8008908 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f9d4 	bl	8008c8c <USBD_CtlSendStatus>
      break;
 80088e4:	e010      	b.n	8008908 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f9d0 	bl	8008c8c <USBD_CtlSendStatus>
      break;
 80088ec:	e00c      	b.n	8008908 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f900 	bl	8008af6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088f6:	4b07      	ldr	r3, [pc, #28]	; (8008914 <USBD_SetConfig+0x150>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7fe ffcc 	bl	800789a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008902:	2303      	movs	r3, #3
 8008904:	73fb      	strb	r3, [r7, #15]
      break;
 8008906:	bf00      	nop
  }

  return ret;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	200001f4 	.word	0x200001f4

08008918 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	88db      	ldrh	r3, [r3, #6]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d004      	beq.n	8008934 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f8e2 	bl	8008af6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008932:	e023      	b.n	800897c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b02      	cmp	r3, #2
 800893e:	dc02      	bgt.n	8008946 <USBD_GetConfig+0x2e>
 8008940:	2b00      	cmp	r3, #0
 8008942:	dc03      	bgt.n	800894c <USBD_GetConfig+0x34>
 8008944:	e015      	b.n	8008972 <USBD_GetConfig+0x5a>
 8008946:	2b03      	cmp	r3, #3
 8008948:	d00b      	beq.n	8008962 <USBD_GetConfig+0x4a>
 800894a:	e012      	b.n	8008972 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3308      	adds	r3, #8
 8008956:	2201      	movs	r2, #1
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f93c 	bl	8008bd8 <USBD_CtlSendData>
        break;
 8008960:	e00c      	b.n	800897c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3304      	adds	r3, #4
 8008966:	2201      	movs	r2, #1
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f934 	bl	8008bd8 <USBD_CtlSendData>
        break;
 8008970:	e004      	b.n	800897c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f8be 	bl	8008af6 <USBD_CtlError>
        break;
 800897a:	bf00      	nop
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008994:	b2db      	uxtb	r3, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	2b02      	cmp	r3, #2
 800899a:	d81e      	bhi.n	80089da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	88db      	ldrh	r3, [r3, #6]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d004      	beq.n	80089ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f8a5 	bl	8008af6 <USBD_CtlError>
        break;
 80089ac:	e01a      	b.n	80089e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f043 0202 	orr.w	r2, r3, #2
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	330c      	adds	r3, #12
 80089ce:	2202      	movs	r2, #2
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f900 	bl	8008bd8 <USBD_CtlSendData>
      break;
 80089d8:	e004      	b.n	80089e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f88a 	bl	8008af6 <USBD_CtlError>
      break;
 80089e2:	bf00      	nop
  }
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	885b      	ldrh	r3, [r3, #2]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d107      	bne.n	8008a0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f940 	bl	8008c8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a0c:	e013      	b.n	8008a36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	885b      	ldrh	r3, [r3, #2]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d10b      	bne.n	8008a2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	889b      	ldrh	r3, [r3, #4]
 8008a1a:	0a1b      	lsrs	r3, r3, #8
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f930 	bl	8008c8c <USBD_CtlSendStatus>
}
 8008a2c:	e003      	b.n	8008a36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f860 	bl	8008af6 <USBD_CtlError>
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	3b01      	subs	r3, #1
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d80b      	bhi.n	8008a6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	885b      	ldrh	r3, [r3, #2]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d10c      	bne.n	8008a78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f910 	bl	8008c8c <USBD_CtlSendStatus>
      }
      break;
 8008a6c:	e004      	b.n	8008a78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f840 	bl	8008af6 <USBD_CtlError>
      break;
 8008a76:	e000      	b.n	8008a7a <USBD_ClrFeature+0x3c>
      break;
 8008a78:	bf00      	nop
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	781a      	ldrb	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	781a      	ldrb	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff fa41 	bl	8007f34 <SWAPBYTE>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3301      	adds	r3, #1
 8008abe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f7ff fa34 	bl	8007f34 <SWAPBYTE>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461a      	mov	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3301      	adds	r3, #1
 8008ade:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7ff fa27 	bl	8007f34 <SWAPBYTE>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	461a      	mov	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	80da      	strh	r2, [r3, #6]
}
 8008aee:	bf00      	nop
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b00:	2180      	movs	r1, #128	; 0x80
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fc94 	bl	8009430 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b08:	2100      	movs	r1, #0
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fc90 	bl	8009430 <USBD_LL_StallEP>
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d036      	beq.n	8008b9c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b32:	6938      	ldr	r0, [r7, #16]
 8008b34:	f000 f836 	bl	8008ba4 <USBD_GetLen>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	005b      	lsls	r3, r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	3301      	adds	r3, #1
 8008b56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	2203      	movs	r2, #3
 8008b60:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	3301      	adds	r3, #1
 8008b66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b68:	e013      	b.n	8008b92 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	4413      	add	r3, r2
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	7812      	ldrb	r2, [r2, #0]
 8008b74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	613b      	str	r3, [r7, #16]
    idx++;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	4413      	add	r3, r2
 8008b88:	2200      	movs	r2, #0
 8008b8a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e7      	bne.n	8008b6a <USBD_GetString+0x52>
 8008b9a:	e000      	b.n	8008b9e <USBD_GetString+0x86>
    return;
 8008b9c:	bf00      	nop
  }
}
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bb4:	e005      	b.n	8008bc2 <USBD_GetLen+0x1e>
  {
    len++;
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1f5      	bne.n	8008bb6 <USBD_GetLen+0x12>
  }

  return len;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 fc9f 	bl	8009542 <USBD_LL_Transmit>

  return USBD_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	2100      	movs	r1, #0
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 fc8e 	bl	8009542 <USBD_LL_Transmit>

  return USBD_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2203      	movs	r2, #3
 8008c40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fc92 	bl	8009584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 fc81 	bl	8009584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2204      	movs	r2, #4
 8008c98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fc4d 	bl	8009542 <USBD_LL_Transmit>

  return USBD_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fc5b 	bl	8009584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	4912      	ldr	r1, [pc, #72]	; (8008d28 <MX_USB_DEVICE_Init+0x50>)
 8008ce0:	4812      	ldr	r0, [pc, #72]	; (8008d2c <MX_USB_DEVICE_Init+0x54>)
 8008ce2:	f7fe fd41 	bl	8007768 <USBD_Init>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cec:	f7f7 fe28 	bl	8000940 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008cf0:	490f      	ldr	r1, [pc, #60]	; (8008d30 <MX_USB_DEVICE_Init+0x58>)
 8008cf2:	480e      	ldr	r0, [pc, #56]	; (8008d2c <MX_USB_DEVICE_Init+0x54>)
 8008cf4:	f7fe fd68 	bl	80077c8 <USBD_RegisterClass>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cfe:	f7f7 fe1f 	bl	8000940 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8008d02:	490c      	ldr	r1, [pc, #48]	; (8008d34 <MX_USB_DEVICE_Init+0x5c>)
 8008d04:	4809      	ldr	r0, [pc, #36]	; (8008d2c <MX_USB_DEVICE_Init+0x54>)
 8008d06:	f7fe fce1 	bl	80076cc <USBD_AUDIO_RegisterInterface>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d10:	f7f7 fe16 	bl	8000940 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d14:	4805      	ldr	r0, [pc, #20]	; (8008d2c <MX_USB_DEVICE_Init+0x54>)
 8008d16:	f7fe fd8d 	bl	8007834 <USBD_Start>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d20:	f7f7 fe0e 	bl	8000940 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d24:	bf00      	nop
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	200000dc 	.word	0x200000dc
 8008d2c:	200001f8 	.word	0x200001f8
 8008d30:	2000000c 	.word	0x2000000c
 8008d34:	200000c0 	.word	0x200000c0

08008d38 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8008d44:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
	Audio_Player_Stop();
 8008d5a:	f7f7 fbd7 	bl	800050c <Audio_Player_Stop>
  UNUSED(options);
  return (USBD_OK);
 8008d5e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	4613      	mov	r3, r2
 8008d74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d002      	beq.n	8008d82 <AUDIO_AudioCmd_FS+0x1a>
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d005      	beq.n	8008d8c <AUDIO_AudioCmd_FS+0x24>
 8008d80:	e009      	b.n	8008d96 <AUDIO_AudioCmd_FS+0x2e>
  {
    case AUDIO_CMD_START:
    	Audio_Player_Play(pbuf, size);
 8008d82:	68b9      	ldr	r1, [r7, #8]
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7f7 fba1 	bl	80004cc <Audio_Player_Play>
    break;
 8008d8a:	e004      	b.n	8008d96 <AUDIO_AudioCmd_FS+0x2e>

    case AUDIO_CMD_PLAY:
    	Audio_Player_Play(pbuf, size);
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7f7 fb9c 	bl	80004cc <Audio_Player_Play>
    break;
 8008d94:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008d96:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8008daa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8008dc2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8008dde:	2101      	movs	r1, #1
 8008de0:	4803      	ldr	r0, [pc, #12]	; (8008df0 <AUDIO_PeriodicTC_FS+0x20>)
 8008de2:	f7f9 f8a5 	bl	8001f30 <HAL_GPIO_TogglePin>
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008de6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	40020800 	.word	0x40020800

08008df4 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008df8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 8008e08:	2102      	movs	r1, #2
 8008e0a:	4802      	ldr	r0, [pc, #8]	; (8008e14 <TransferComplete_CallBack_FS+0x10>)
 8008e0c:	f7fe fa73 	bl	80072f6 <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 8008e10:	bf00      	nop
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	200001f8 	.word	0x200001f8

08008e18 <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	4802      	ldr	r0, [pc, #8]	; (8008e28 <HalfTransfer_CallBack_FS+0x10>)
 8008e20:	f7fe fa69 	bl	80072f6 <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 8008e24:	bf00      	nop
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200001f8 	.word	0x200001f8

08008e2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	6039      	str	r1, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2212      	movs	r2, #18
 8008e3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e3e:	4b03      	ldr	r3, [pc, #12]	; (8008e4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	200000f8 	.word	0x200000f8

08008e50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2204      	movs	r2, #4
 8008e60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e62:	4b03      	ldr	r3, [pc, #12]	; (8008e70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	2000010c 	.word	0x2000010c

08008e74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d105      	bne.n	8008e92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	4907      	ldr	r1, [pc, #28]	; (8008ea8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e8a:	4808      	ldr	r0, [pc, #32]	; (8008eac <USBD_FS_ProductStrDescriptor+0x38>)
 8008e8c:	f7ff fe44 	bl	8008b18 <USBD_GetString>
 8008e90:	e004      	b.n	8008e9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	4904      	ldr	r1, [pc, #16]	; (8008ea8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e96:	4805      	ldr	r0, [pc, #20]	; (8008eac <USBD_FS_ProductStrDescriptor+0x38>)
 8008e98:	f7ff fe3e 	bl	8008b18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e9c:	4b02      	ldr	r3, [pc, #8]	; (8008ea8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200004d4 	.word	0x200004d4
 8008eac:	08009878 	.word	0x08009878

08008eb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	6039      	str	r1, [r7, #0]
 8008eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	4904      	ldr	r1, [pc, #16]	; (8008ed0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ec0:	4804      	ldr	r0, [pc, #16]	; (8008ed4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ec2:	f7ff fe29 	bl	8008b18 <USBD_GetString>
  return USBD_StrDesc;
 8008ec6:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	200004d4 	.word	0x200004d4
 8008ed4:	08009894 	.word	0x08009894

08008ed8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	6039      	str	r1, [r7, #0]
 8008ee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	221a      	movs	r2, #26
 8008ee8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eea:	f000 f843 	bl	8008f74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008eee:	4b02      	ldr	r3, [pc, #8]	; (8008ef8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000110 	.word	0x20000110

08008efc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	6039      	str	r1, [r7, #0]
 8008f06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d105      	bne.n	8008f1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	4907      	ldr	r1, [pc, #28]	; (8008f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f12:	4808      	ldr	r0, [pc, #32]	; (8008f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f14:	f7ff fe00 	bl	8008b18 <USBD_GetString>
 8008f18:	e004      	b.n	8008f24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	4904      	ldr	r1, [pc, #16]	; (8008f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f1e:	4805      	ldr	r0, [pc, #20]	; (8008f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f20:	f7ff fdfa 	bl	8008b18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200004d4 	.word	0x200004d4
 8008f34:	080098a8 	.word	0x080098a8

08008f38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6039      	str	r1, [r7, #0]
 8008f42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d105      	bne.n	8008f56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	4907      	ldr	r1, [pc, #28]	; (8008f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f4e:	4808      	ldr	r0, [pc, #32]	; (8008f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f50:	f7ff fde2 	bl	8008b18 <USBD_GetString>
 8008f54:	e004      	b.n	8008f60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4904      	ldr	r1, [pc, #16]	; (8008f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f5a:	4805      	ldr	r0, [pc, #20]	; (8008f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f5c:	f7ff fddc 	bl	8008b18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f60:	4b02      	ldr	r3, [pc, #8]	; (8008f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	200004d4 	.word	0x200004d4
 8008f70:	080098b8 	.word	0x080098b8

08008f74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f7a:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <Get_SerialNum+0x44>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f80:	4b0e      	ldr	r3, [pc, #56]	; (8008fbc <Get_SerialNum+0x48>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f86:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <Get_SerialNum+0x4c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4413      	add	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	4909      	ldr	r1, [pc, #36]	; (8008fc4 <Get_SerialNum+0x50>)
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f814 	bl	8008fcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	4908      	ldr	r1, [pc, #32]	; (8008fc8 <Get_SerialNum+0x54>)
 8008fa8:	68b8      	ldr	r0, [r7, #8]
 8008faa:	f000 f80f 	bl	8008fcc <IntToUnicode>
  }
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	1fff7a10 	.word	0x1fff7a10
 8008fbc:	1fff7a14 	.word	0x1fff7a14
 8008fc0:	1fff7a18 	.word	0x1fff7a18
 8008fc4:	20000112 	.word	0x20000112
 8008fc8:	20000122 	.word	0x20000122

08008fcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]
 8008fe2:	e027      	b.n	8009034 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	0f1b      	lsrs	r3, r3, #28
 8008fe8:	2b09      	cmp	r3, #9
 8008fea:	d80b      	bhi.n	8009004 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	0f1b      	lsrs	r3, r3, #28
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	440b      	add	r3, r1
 8008ffc:	3230      	adds	r2, #48	; 0x30
 8008ffe:	b2d2      	uxtb	r2, r2
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	e00a      	b.n	800901a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	0f1b      	lsrs	r3, r3, #28
 8009008:	b2da      	uxtb	r2, r3
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	4619      	mov	r1, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	440b      	add	r3, r1
 8009014:	3237      	adds	r2, #55	; 0x37
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	3301      	adds	r3, #1
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	4413      	add	r3, r2
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	3301      	adds	r3, #1
 8009032:	75fb      	strb	r3, [r7, #23]
 8009034:	7dfa      	ldrb	r2, [r7, #23]
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	429a      	cmp	r2, r3
 800903a:	d3d3      	bcc.n	8008fe4 <IntToUnicode+0x18>
  }
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
	...

0800904c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08a      	sub	sp, #40	; 0x28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009054:	f107 0314 	add.w	r3, r7, #20
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	605a      	str	r2, [r3, #4]
 800905e:	609a      	str	r2, [r3, #8]
 8009060:	60da      	str	r2, [r3, #12]
 8009062:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800906c:	d13a      	bne.n	80090e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800906e:	2300      	movs	r3, #0
 8009070:	613b      	str	r3, [r7, #16]
 8009072:	4b1e      	ldr	r3, [pc, #120]	; (80090ec <HAL_PCD_MspInit+0xa0>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	4a1d      	ldr	r2, [pc, #116]	; (80090ec <HAL_PCD_MspInit+0xa0>)
 8009078:	f043 0301 	orr.w	r3, r3, #1
 800907c:	6313      	str	r3, [r2, #48]	; 0x30
 800907e:	4b1b      	ldr	r3, [pc, #108]	; (80090ec <HAL_PCD_MspInit+0xa0>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800908a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800908e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009090:	2302      	movs	r3, #2
 8009092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009094:	2300      	movs	r3, #0
 8009096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009098:	2303      	movs	r3, #3
 800909a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800909c:	230a      	movs	r3, #10
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090a0:	f107 0314 	add.w	r3, r7, #20
 80090a4:	4619      	mov	r1, r3
 80090a6:	4812      	ldr	r0, [pc, #72]	; (80090f0 <HAL_PCD_MspInit+0xa4>)
 80090a8:	f7f8 fc2e 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090ac:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <HAL_PCD_MspInit+0xa0>)
 80090ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b0:	4a0e      	ldr	r2, [pc, #56]	; (80090ec <HAL_PCD_MspInit+0xa0>)
 80090b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b6:	6353      	str	r3, [r2, #52]	; 0x34
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <HAL_PCD_MspInit+0xa0>)
 80090be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c0:	4a0a      	ldr	r2, [pc, #40]	; (80090ec <HAL_PCD_MspInit+0xa0>)
 80090c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090c6:	6453      	str	r3, [r2, #68]	; 0x44
 80090c8:	4b08      	ldr	r3, [pc, #32]	; (80090ec <HAL_PCD_MspInit+0xa0>)
 80090ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090d4:	2200      	movs	r2, #0
 80090d6:	2100      	movs	r1, #0
 80090d8:	2043      	movs	r0, #67	; 0x43
 80090da:	f7f7 fe6b 	bl	8000db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090de:	2043      	movs	r0, #67	; 0x43
 80090e0:	f7f7 fe94 	bl	8000e0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090e4:	bf00      	nop
 80090e6:	3728      	adds	r7, #40	; 0x28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	40023800 	.word	0x40023800
 80090f0:	40020000 	.word	0x40020000

080090f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f7fe fbdf 	bl	80078ce <USBD_LL_SetupStage>
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	78fb      	ldrb	r3, [r7, #3]
 8009140:	4619      	mov	r1, r3
 8009142:	f7fe fc19 	bl	8007978 <USBD_LL_DataOutStage>
}
 8009146:	bf00      	nop
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	4613      	mov	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	334c      	adds	r3, #76	; 0x4c
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	4619      	mov	r1, r3
 8009176:	f7fe fcb2 	bl	8007ade <USBD_LL_DataInStage>
}
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fde6 	bl	8007d62 <USBD_LL_SOF>
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091a6:	2301      	movs	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d102      	bne.n	80091b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
 80091b6:	e008      	b.n	80091ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d102      	bne.n	80091c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80091c0:	2301      	movs	r3, #1
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	e001      	b.n	80091ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80091c6:	f7f7 fbbb 	bl	8000940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091d0:	7bfa      	ldrb	r2, [r7, #15]
 80091d2:	4611      	mov	r1, r2
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fd86 	bl	8007ce6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fd2e 	bl	8007c42 <USBD_LL_Reset>
}
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fd81 	bl	8007d06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6812      	ldr	r2, [r2, #0]
 8009212:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009216:	f043 0301 	orr.w	r3, r3, #1
 800921a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <HAL_PCD_SuspendCallback+0x48>)
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	4a03      	ldr	r2, [pc, #12]	; (8009238 <HAL_PCD_SuspendCallback+0x48>)
 800922a:	f043 0306 	orr.w	r3, r3, #6
 800922e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	e000ed00 	.word	0xe000ed00

0800923c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fd71 	bl	8007d32 <USBD_LL_Resume>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	4611      	mov	r1, r2
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe fdc9 	bl	8007e06 <USBD_LL_IsoOUTIncomplete>
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800928e:	78fa      	ldrb	r2, [r7, #3]
 8009290:	4611      	mov	r1, r2
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fd85 	bl	8007da2 <USBD_LL_IsoINIncomplete>
}
 8009298:	bf00      	nop
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fe fddb 	bl	8007e6a <USBD_LL_DevConnected>
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe fdd8 	bl	8007e80 <USBD_LL_DevDisconnected>
}
 80092d0:	bf00      	nop
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d13c      	bne.n	8009362 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092e8:	4a20      	ldr	r2, [pc, #128]	; (800936c <USBD_LL_Init+0x94>)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a1e      	ldr	r2, [pc, #120]	; (800936c <USBD_LL_Init+0x94>)
 80092f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092f8:	4b1c      	ldr	r3, [pc, #112]	; (800936c <USBD_LL_Init+0x94>)
 80092fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80092fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009300:	4b1a      	ldr	r3, [pc, #104]	; (800936c <USBD_LL_Init+0x94>)
 8009302:	2204      	movs	r2, #4
 8009304:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009306:	4b19      	ldr	r3, [pc, #100]	; (800936c <USBD_LL_Init+0x94>)
 8009308:	2202      	movs	r2, #2
 800930a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800930c:	4b17      	ldr	r3, [pc, #92]	; (800936c <USBD_LL_Init+0x94>)
 800930e:	2200      	movs	r2, #0
 8009310:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009312:	4b16      	ldr	r3, [pc, #88]	; (800936c <USBD_LL_Init+0x94>)
 8009314:	2202      	movs	r2, #2
 8009316:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009318:	4b14      	ldr	r3, [pc, #80]	; (800936c <USBD_LL_Init+0x94>)
 800931a:	2200      	movs	r2, #0
 800931c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800931e:	4b13      	ldr	r3, [pc, #76]	; (800936c <USBD_LL_Init+0x94>)
 8009320:	2200      	movs	r2, #0
 8009322:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009324:	4b11      	ldr	r3, [pc, #68]	; (800936c <USBD_LL_Init+0x94>)
 8009326:	2200      	movs	r2, #0
 8009328:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800932a:	4b10      	ldr	r3, [pc, #64]	; (800936c <USBD_LL_Init+0x94>)
 800932c:	2200      	movs	r2, #0
 800932e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009330:	4b0e      	ldr	r3, [pc, #56]	; (800936c <USBD_LL_Init+0x94>)
 8009332:	2200      	movs	r2, #0
 8009334:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009336:	480d      	ldr	r0, [pc, #52]	; (800936c <USBD_LL_Init+0x94>)
 8009338:	f7f9 fe70 	bl	800301c <HAL_PCD_Init>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009342:	f7f7 fafd 	bl	8000940 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009346:	2180      	movs	r1, #128	; 0x80
 8009348:	4808      	ldr	r0, [pc, #32]	; (800936c <USBD_LL_Init+0x94>)
 800934a:	f7fb f8da 	bl	8004502 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800934e:	2240      	movs	r2, #64	; 0x40
 8009350:	2100      	movs	r1, #0
 8009352:	4806      	ldr	r0, [pc, #24]	; (800936c <USBD_LL_Init+0x94>)
 8009354:	f7fb f88e 	bl	8004474 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009358:	2280      	movs	r2, #128	; 0x80
 800935a:	2101      	movs	r1, #1
 800935c:	4803      	ldr	r0, [pc, #12]	; (800936c <USBD_LL_Init+0x94>)
 800935e:	f7fb f889 	bl	8004474 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	200006d4 	.word	0x200006d4

08009370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009386:	4618      	mov	r0, r3
 8009388:	f7f9 ff78 	bl	800327c <HAL_PCD_Start>
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	4618      	mov	r0, r3
 8009394:	f000 f942 	bl	800961c <USBD_Get_USB_Status>
 8009398:	4603      	mov	r3, r0
 800939a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800939c:	7bbb      	ldrb	r3, [r7, #14]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	4608      	mov	r0, r1
 80093b0:	4611      	mov	r1, r2
 80093b2:	461a      	mov	r2, r3
 80093b4:	4603      	mov	r3, r0
 80093b6:	70fb      	strb	r3, [r7, #3]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70bb      	strb	r3, [r7, #2]
 80093bc:	4613      	mov	r3, r2
 80093be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093ce:	78bb      	ldrb	r3, [r7, #2]
 80093d0:	883a      	ldrh	r2, [r7, #0]
 80093d2:	78f9      	ldrb	r1, [r7, #3]
 80093d4:	f7fa fc49 	bl	8003c6a <HAL_PCD_EP_Open>
 80093d8:	4603      	mov	r3, r0
 80093da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 f91c 	bl	800961c <USBD_Get_USB_Status>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	460b      	mov	r3, r1
 80093fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800940c:	78fa      	ldrb	r2, [r7, #3]
 800940e:	4611      	mov	r1, r2
 8009410:	4618      	mov	r0, r3
 8009412:	f7fa fc92 	bl	8003d3a <HAL_PCD_EP_Close>
 8009416:	4603      	mov	r3, r0
 8009418:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	4618      	mov	r0, r3
 800941e:	f000 f8fd 	bl	800961c <USBD_Get_USB_Status>
 8009422:	4603      	mov	r3, r0
 8009424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009426:	7bbb      	ldrb	r3, [r7, #14]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800944a:	78fa      	ldrb	r2, [r7, #3]
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f7fa fd6a 	bl	8003f28 <HAL_PCD_EP_SetStall>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f8de 	bl	800961c <USBD_Get_USB_Status>
 8009460:	4603      	mov	r3, r0
 8009462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009464:	7bbb      	ldrb	r3, [r7, #14]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009488:	78fa      	ldrb	r2, [r7, #3]
 800948a:	4611      	mov	r1, r2
 800948c:	4618      	mov	r0, r3
 800948e:	f7fa fdaf 	bl	8003ff0 <HAL_PCD_EP_ClrStall>
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	4618      	mov	r0, r3
 800949a:	f000 f8bf 	bl	800961c <USBD_Get_USB_Status>
 800949e:	4603      	mov	r3, r0
 80094a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da0b      	bge.n	80094e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ce:	68f9      	ldr	r1, [r7, #12]
 80094d0:	4613      	mov	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	333e      	adds	r3, #62	; 0x3e
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	e00b      	b.n	80094f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094e6:	68f9      	ldr	r1, [r7, #12]
 80094e8:	4613      	mov	r3, r2
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	4413      	add	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	440b      	add	r3, r1
 80094f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80094f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800951e:	78fa      	ldrb	r2, [r7, #3]
 8009520:	4611      	mov	r1, r2
 8009522:	4618      	mov	r0, r3
 8009524:	f7fa fb7c 	bl	8003c20 <HAL_PCD_SetAddress>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f874 	bl	800961c <USBD_Get_USB_Status>
 8009534:	4603      	mov	r3, r0
 8009536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009538:	7bbb      	ldrb	r3, [r7, #14]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b086      	sub	sp, #24
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
 800954e:	460b      	mov	r3, r1
 8009550:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009560:	7af9      	ldrb	r1, [r7, #11]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	f7fa fc95 	bl	8003e94 <HAL_PCD_EP_Transmit>
 800956a:	4603      	mov	r3, r0
 800956c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	4618      	mov	r0, r3
 8009572:	f000 f853 	bl	800961c <USBD_Get_USB_Status>
 8009576:	4603      	mov	r3, r0
 8009578:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800957a:	7dbb      	ldrb	r3, [r7, #22]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	460b      	mov	r3, r1
 8009592:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095a2:	7af9      	ldrb	r1, [r7, #11]
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	f7fa fc11 	bl	8003dce <HAL_PCD_EP_Receive>
 80095ac:	4603      	mov	r3, r0
 80095ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 f832 	bl	800961c <USBD_Get_USB_Status>
 80095b8:	4603      	mov	r3, r0
 80095ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095d8:	78fa      	ldrb	r2, [r7, #3]
 80095da:	4611      	mov	r1, r2
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fa fc41 	bl	8003e64 <HAL_PCD_EP_GetRxCount>
 80095e2:	4603      	mov	r3, r0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095f4:	4b03      	ldr	r3, [pc, #12]	; (8009604 <USBD_static_malloc+0x18>)
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000be0 	.word	0x20000be0

08009608 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]

}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	2b03      	cmp	r3, #3
 800962e:	d817      	bhi.n	8009660 <USBD_Get_USB_Status+0x44>
 8009630:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <USBD_Get_USB_Status+0x1c>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	08009649 	.word	0x08009649
 800963c:	0800964f 	.word	0x0800964f
 8009640:	08009655 	.word	0x08009655
 8009644:	0800965b 	.word	0x0800965b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73fb      	strb	r3, [r7, #15]
    break;
 800964c:	e00b      	b.n	8009666 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800964e:	2303      	movs	r3, #3
 8009650:	73fb      	strb	r3, [r7, #15]
    break;
 8009652:	e008      	b.n	8009666 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009654:	2301      	movs	r3, #1
 8009656:	73fb      	strb	r3, [r7, #15]
    break;
 8009658:	e005      	b.n	8009666 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800965a:	2303      	movs	r3, #3
 800965c:	73fb      	strb	r3, [r7, #15]
    break;
 800965e:	e002      	b.n	8009666 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009660:	2303      	movs	r3, #3
 8009662:	73fb      	strb	r3, [r7, #15]
    break;
 8009664:	bf00      	nop
  }
  return usb_status;
 8009666:	7bfb      	ldrb	r3, [r7, #15]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <__libc_init_array>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	4d0d      	ldr	r5, [pc, #52]	; (80096ac <__libc_init_array+0x38>)
 8009678:	4c0d      	ldr	r4, [pc, #52]	; (80096b0 <__libc_init_array+0x3c>)
 800967a:	1b64      	subs	r4, r4, r5
 800967c:	10a4      	asrs	r4, r4, #2
 800967e:	2600      	movs	r6, #0
 8009680:	42a6      	cmp	r6, r4
 8009682:	d109      	bne.n	8009698 <__libc_init_array+0x24>
 8009684:	4d0b      	ldr	r5, [pc, #44]	; (80096b4 <__libc_init_array+0x40>)
 8009686:	4c0c      	ldr	r4, [pc, #48]	; (80096b8 <__libc_init_array+0x44>)
 8009688:	f000 f820 	bl	80096cc <_init>
 800968c:	1b64      	subs	r4, r4, r5
 800968e:	10a4      	asrs	r4, r4, #2
 8009690:	2600      	movs	r6, #0
 8009692:	42a6      	cmp	r6, r4
 8009694:	d105      	bne.n	80096a2 <__libc_init_array+0x2e>
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	f855 3b04 	ldr.w	r3, [r5], #4
 800969c:	4798      	blx	r3
 800969e:	3601      	adds	r6, #1
 80096a0:	e7ee      	b.n	8009680 <__libc_init_array+0xc>
 80096a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a6:	4798      	blx	r3
 80096a8:	3601      	adds	r6, #1
 80096aa:	e7f2      	b.n	8009692 <__libc_init_array+0x1e>
 80096ac:	080098e8 	.word	0x080098e8
 80096b0:	080098e8 	.word	0x080098e8
 80096b4:	080098e8 	.word	0x080098e8
 80096b8:	080098ec 	.word	0x080098ec

080096bc <memset>:
 80096bc:	4402      	add	r2, r0
 80096be:	4603      	mov	r3, r0
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d100      	bne.n	80096c6 <memset+0xa>
 80096c4:	4770      	bx	lr
 80096c6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ca:	e7f9      	b.n	80096c0 <memset+0x4>

080096cc <_init>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	bf00      	nop
 80096d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d2:	bc08      	pop	{r3}
 80096d4:	469e      	mov	lr, r3
 80096d6:	4770      	bx	lr

080096d8 <_fini>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	bf00      	nop
 80096dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096de:	bc08      	pop	{r3}
 80096e0:	469e      	mov	lr, r3
 80096e2:	4770      	bx	lr
