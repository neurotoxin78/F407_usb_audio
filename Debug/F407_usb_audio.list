
F407_usb_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009564  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098e8  080098e8  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  080098e8  080098e8  000198e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098f0  080098f0  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098f0  080098f0  000198f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098f4  080098f4  000198f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  080098f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002012c  2**0
                  CONTENTS
 10 .bss          00004708  2000012c  2000012c  0002012c  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20004834  20004834  0002012c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122a3  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000388d  00000000  00000000  000323ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00035c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd8  00000000  00000000  00036b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002422d  00000000  00000000  000377f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015905  00000000  00000000  0005ba25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6740  00000000  00000000  0007132a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137a6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038f4  00000000  00000000  00137abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080096d4 	.word	0x080096d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	080096d4 	.word	0x080096d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Audio_Player_Play>:
#define DMA_MAX_SZE                     0xFFFF
#define DMA_MAX(_X_)                (((_X_) <= DMA_MAX_SZE)? (_X_):DMA_MAX_SZE)
#define AUDIODATA_SIZE                  2   /* 16-bits audio data size */

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004dc:	d307      	bcc.n	80004ee <Audio_Player_Play+0x22>
		Size = 0xFFFF;
 80004de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e2:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <Audio_Player_Play+0x38>)
 80004ea:	f001 fd23 	bl	8001f34 <HAL_GPIO_TogglePin>
	}
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)pBuffer, Size);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <Audio_Player_Play+0x3c>)
 80004f8:	f001 ff2c 	bl	8002354 <HAL_I2S_Transmit_DMA>
//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800
 8000508:	20000148 	.word	0x20000148

0800050c <Audio_Player_Stop>:
{
	HAL_I2S_DMAResume(&hi2s2);
}

void Audio_Player_Stop(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_I2S_DMAStop(&hi2s2);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <Audio_Player_Stop+0x10>)
 8000512:	f001 ffc7 	bl	80024a4 <HAL_I2S_DMAStop>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000148 	.word	0x20000148

08000520 <HAL_I2S_TxHalfCpltCallback>:
{
//	WM8978_VolumeCtl(vol);
}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800052e:	f001 fd01 	bl	8001f34 <HAL_GPIO_TogglePin>
	HalfTransfer_CallBack_FS();
 8000532:	f008 fc75 	bl	8008e20 <HalfTransfer_CallBack_FS>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40020800 	.word	0x40020800

08000544 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800054c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <HAL_I2S_TxCpltCallback+0x20>)
 8000552:	f001 fcef 	bl	8001f34 <HAL_GPIO_TogglePin>
	TransferComplete_CallBack_FS();
 8000556:	f008 fc59 	bl	8008e0c <TransferComplete_CallBack_FS>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40020800 	.word	0x40020800

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_DMA_Init+0x3c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	200f      	movs	r0, #15
 8000590:	f000 fc12 	bl	8000db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000594:	200f      	movs	r0, #15
 8000596:	f000 fc3b 	bl	8000e10 <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_GPIO_Init+0xb8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a26      	ldr	r2, [pc, #152]	; (8000660 <MX_GPIO_Init+0xb8>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b24      	ldr	r3, [pc, #144]	; (8000660 <MX_GPIO_Init+0xb8>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_GPIO_Init+0xb8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <MX_GPIO_Init+0xb8>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_GPIO_Init+0xb8>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_GPIO_Init+0xb8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <MX_GPIO_Init+0xb8>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_GPIO_Init+0xb8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_GPIO_Init+0xb8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <MX_GPIO_Init+0xb8>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_GPIO_Init+0xb8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <MX_GPIO_Init+0xbc>)
 8000636:	f001 fc4b 	bl	8001ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800063a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_GPIO_Init+0xbc>)
 8000654:	f001 f95a 	bl	800190c <HAL_GPIO_Init>

}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40020800 	.word	0x40020800

08000668 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_I2S2_Init+0x54>)
 800066e:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <MX_I2S2_Init+0x58>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2S2_Init+0x54>)
 8000674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000678:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_I2S2_Init+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2S2_Init+0x54>)
 8000682:	2201      	movs	r2, #1
 8000684:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_I2S2_Init+0x54>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_I2S2_Init+0x54>)
 800068e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000692:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2S2_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_I2S2_Init+0x54>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2S2_Init+0x54>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_I2S2_Init+0x54>)
 80006a8:	f001 fc6c 	bl	8001f84 <HAL_I2S_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80006b2:	f000 f947 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000148 	.word	0x20000148
 80006c0:	40003800 	.word	0x40003800

080006c4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08e      	sub	sp, #56	; 0x38
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a4e      	ldr	r2, [pc, #312]	; (8000828 <HAL_I2S_MspInit+0x164>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	f040 8094 	bne.w	800081e <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80006fa:	2332      	movs	r3, #50	; 0x32
 80006fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fd0a 	bl	8005120 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000712:	f000 f917 	bl	8000944 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b44      	ldr	r3, [pc, #272]	; (800082c <HAL_I2S_MspInit+0x168>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a43      	ldr	r2, [pc, #268]	; (800082c <HAL_I2S_MspInit+0x168>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
 8000726:	4b41      	ldr	r3, [pc, #260]	; (800082c <HAL_I2S_MspInit+0x168>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b3d      	ldr	r3, [pc, #244]	; (800082c <HAL_I2S_MspInit+0x168>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a3c      	ldr	r2, [pc, #240]	; (800082c <HAL_I2S_MspInit+0x168>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b3a      	ldr	r3, [pc, #232]	; (800082c <HAL_I2S_MspInit+0x168>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <HAL_I2S_MspInit+0x168>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a35      	ldr	r2, [pc, #212]	; (800082c <HAL_I2S_MspInit+0x168>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <HAL_I2S_MspInit+0x168>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800076a:	2304      	movs	r3, #4
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800077a:	2306      	movs	r3, #6
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4619      	mov	r1, r3
 8000784:	482a      	ldr	r0, [pc, #168]	; (8000830 <HAL_I2S_MspInit+0x16c>)
 8000786:	f001 f8c1 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 800078a:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800079c:	2305      	movs	r3, #5
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4619      	mov	r1, r3
 80007a6:	4823      	ldr	r0, [pc, #140]	; (8000834 <HAL_I2S_MspInit+0x170>)
 80007a8:	f001 f8b0 	bl	800190c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <HAL_I2S_MspInit+0x178>)
 80007b0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007ba:	2240      	movs	r2, #64	; 0x40
 80007bc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ca:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007d2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007da:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007e8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007f2:	2203      	movs	r2, #3
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_I2S_MspInit+0x174>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <HAL_I2S_MspInit+0x174>)
 8000804:	f000 fb28 	bl	8000e58 <HAL_DMA_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 800080e:	f000 f899 	bl	8000944 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_I2S_MspInit+0x174>)
 8000816:	639a      	str	r2, [r3, #56]	; 0x38
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <HAL_I2S_MspInit+0x174>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800081e:	bf00      	nop
 8000820:	3738      	adds	r7, #56	; 0x38
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40003800 	.word	0x40003800
 800082c:	40023800 	.word	0x40023800
 8000830:	40020800 	.word	0x40020800
 8000834:	40020400 	.word	0x40020400
 8000838:	20000190 	.word	0x20000190
 800083c:	40026070 	.word	0x40026070

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 f932 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f810 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f7ff feac 	bl	80005a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000850:	f008 fa44 	bl	8008cdc <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 8000854:	f7ff fe88 	bl	8000568 <MX_DMA_Init>
  MX_I2S2_Init();
 8000858:	f7ff ff06 	bl	8000668 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800085c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000860:	4801      	ldr	r0, [pc, #4]	; (8000868 <main+0x28>)
 8000862:	f001 fb67 	bl	8001f34 <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000866:	e7fe      	b.n	8000866 <main+0x26>
 8000868:	40020800 	.word	0x40020800

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	; 0x50
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	2230      	movs	r2, #48	; 0x30
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f008 ff22 	bl	80096c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <SystemClock_Config+0xd0>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a28      	ldr	r2, [pc, #160]	; (800093c <SystemClock_Config+0xd0>)
 800089a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <SystemClock_Config+0xd0>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <SystemClock_Config+0xd4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a22      	ldr	r2, [pc, #136]	; (8000940 <SystemClock_Config+0xd4>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <SystemClock_Config+0xd4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008dc:	2304      	movs	r3, #4
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008e0:	23a8      	movs	r3, #168	; 0xa8
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e8:	2307      	movs	r3, #7
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fe25 	bl	8004540 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008fc:	f000 f822 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2302      	movs	r3, #2
 8000906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800090c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000910:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000916:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2105      	movs	r1, #5
 800091e:	4618      	mov	r0, r3
 8000920:	f004 f936 	bl	8004b90 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800092a:	f000 f80b 	bl	8000944 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800092e:	f004 fabd 	bl	8004eac <HAL_RCC_EnableCSS>
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	; 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>

0800094e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80009b8:	f004 fb96 	bl	80050e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x8>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f8a4 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <DMA1_Stream4_IRQHandler+0x10>)
 8000a12:	f000 fd11 	bl	8001438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000190 	.word	0x20000190

08000a20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <OTG_FS_IRQHandler+0x10>)
 8000a26:	f002 fc5e 	bl	80032e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200006d4 	.word	0x200006d4

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5e:	490e      	ldr	r1, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a74:	4c0b      	ldr	r4, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a82:	f7ff ffd7 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f008 fdf9 	bl	800967c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fed9 	bl	8000840 <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000a9c:	080098f8 	.word	0x080098f8
  ldr r2, =_sbss
 8000aa0:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000aa4:	20004834 	.word	0x20004834

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_Init+0x40>)
 8000ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_Init+0x40>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x40>)
 8000ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 f94f 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff ff40 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023c00 	.word	0x40023c00

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f996 	bl	8000e40 <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 f944 	bl	8000db8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	200001f0 	.word	0x200001f0

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200001f0 	.word	0x200001f0

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff ffee 	bl	8000b78 <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb6:	bf00      	nop
 8000bb8:	f7ff ffde 	bl	8000b78 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	; (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d44:	d301      	bcc.n	8000d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00f      	b.n	8000d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <SysTick_Config+0x40>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d52:	210f      	movs	r1, #15
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f7ff ff8e 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SysTick_Config+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Config+0x40>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b07      	cmp	r3, #7
 8000d84:	d00f      	beq.n	8000da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	d00c      	beq.n	8000da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d009      	beq.n	8000da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d006      	beq.n	8000da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d003      	beq.n	8000da6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d9e:	2190      	movs	r1, #144	; 0x90
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000da2:	f7ff fdd4 	bl	800094e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff16 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	080096ec 	.word	0x080096ec

08000db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d903      	bls.n	8000dd8 <HAL_NVIC_SetPriority+0x20>
 8000dd0:	21a8      	movs	r1, #168	; 0xa8
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <HAL_NVIC_SetPriority+0x54>)
 8000dd4:	f7ff fdbb 	bl	800094e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d903      	bls.n	8000de6 <HAL_NVIC_SetPriority+0x2e>
 8000dde:	21a9      	movs	r1, #169	; 0xa9
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <HAL_NVIC_SetPriority+0x54>)
 8000de2:	f7ff fdb4 	bl	800094e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de6:	f7ff ff1b 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	6978      	ldr	r0, [r7, #20]
 8000df2:	f7ff ff6b 	bl	8000ccc <NVIC_EncodePriority>
 8000df6:	4602      	mov	r2, r0
 8000df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff3a 	bl	8000c78 <__NVIC_SetPriority>
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	080096ec 	.word	0x080096ec

08000e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	da03      	bge.n	8000e2a <HAL_NVIC_EnableIRQ+0x1a>
 8000e22:	21bc      	movs	r1, #188	; 0xbc
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_NVIC_EnableIRQ+0x2c>)
 8000e26:	f7ff fd92 	bl	800094e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff04 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	080096ec 	.word	0x080096ec

08000e40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff73 	bl	8000d34 <SysTick_Config>
 8000e4e:	4603      	mov	r3, r0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fe88 	bl	8000b78 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e203      	b.n	800127c <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a8b      	ldr	r2, [pc, #556]	; (80010a8 <HAL_DMA_Init+0x250>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d04e      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a8a      	ldr	r2, [pc, #552]	; (80010ac <HAL_DMA_Init+0x254>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d049      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a88      	ldr	r2, [pc, #544]	; (80010b0 <HAL_DMA_Init+0x258>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d044      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a87      	ldr	r2, [pc, #540]	; (80010b4 <HAL_DMA_Init+0x25c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d03f      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a85      	ldr	r2, [pc, #532]	; (80010b8 <HAL_DMA_Init+0x260>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d03a      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a84      	ldr	r2, [pc, #528]	; (80010bc <HAL_DMA_Init+0x264>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d035      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a82      	ldr	r2, [pc, #520]	; (80010c0 <HAL_DMA_Init+0x268>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d030      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a81      	ldr	r2, [pc, #516]	; (80010c4 <HAL_DMA_Init+0x26c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d02b      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a7f      	ldr	r2, [pc, #508]	; (80010c8 <HAL_DMA_Init+0x270>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d026      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7e      	ldr	r2, [pc, #504]	; (80010cc <HAL_DMA_Init+0x274>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d021      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a7c      	ldr	r2, [pc, #496]	; (80010d0 <HAL_DMA_Init+0x278>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01c      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a7b      	ldr	r2, [pc, #492]	; (80010d4 <HAL_DMA_Init+0x27c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d017      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a79      	ldr	r2, [pc, #484]	; (80010d8 <HAL_DMA_Init+0x280>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d012      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a78      	ldr	r2, [pc, #480]	; (80010dc <HAL_DMA_Init+0x284>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00d      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a76      	ldr	r2, [pc, #472]	; (80010e0 <HAL_DMA_Init+0x288>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d008      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a75      	ldr	r2, [pc, #468]	; (80010e4 <HAL_DMA_Init+0x28c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d003      	beq.n	8000f1c <HAL_DMA_Init+0xc4>
 8000f14:	21b7      	movs	r1, #183	; 0xb7
 8000f16:	4874      	ldr	r0, [pc, #464]	; (80010e8 <HAL_DMA_Init+0x290>)
 8000f18:	f7ff fd19 	bl	800094e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d026      	beq.n	8000f72 <HAL_DMA_Init+0x11a>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f2c:	d021      	beq.n	8000f72 <HAL_DMA_Init+0x11a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f36:	d01c      	beq.n	8000f72 <HAL_DMA_Init+0x11a>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8000f40:	d017      	beq.n	8000f72 <HAL_DMA_Init+0x11a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000f4a:	d012      	beq.n	8000f72 <HAL_DMA_Init+0x11a>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8000f54:	d00d      	beq.n	8000f72 <HAL_DMA_Init+0x11a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8000f5e:	d008      	beq.n	8000f72 <HAL_DMA_Init+0x11a>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8000f68:	d003      	beq.n	8000f72 <HAL_DMA_Init+0x11a>
 8000f6a:	21b8      	movs	r1, #184	; 0xb8
 8000f6c:	485e      	ldr	r0, [pc, #376]	; (80010e8 <HAL_DMA_Init+0x290>)
 8000f6e:	f7ff fcee 	bl	800094e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <HAL_DMA_Init+0x13a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b40      	cmp	r3, #64	; 0x40
 8000f80:	d007      	beq.n	8000f92 <HAL_DMA_Init+0x13a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b80      	cmp	r3, #128	; 0x80
 8000f88:	d003      	beq.n	8000f92 <HAL_DMA_Init+0x13a>
 8000f8a:	21b9      	movs	r1, #185	; 0xb9
 8000f8c:	4856      	ldr	r0, [pc, #344]	; (80010e8 <HAL_DMA_Init+0x290>)
 8000f8e:	f7ff fcde 	bl	800094e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f9a:	d007      	beq.n	8000fac <HAL_DMA_Init+0x154>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_DMA_Init+0x154>
 8000fa4:	21ba      	movs	r1, #186	; 0xba
 8000fa6:	4850      	ldr	r0, [pc, #320]	; (80010e8 <HAL_DMA_Init+0x290>)
 8000fa8:	f7ff fcd1 	bl	800094e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb4:	d007      	beq.n	8000fc6 <HAL_DMA_Init+0x16e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_DMA_Init+0x16e>
 8000fbe:	21bb      	movs	r1, #187	; 0xbb
 8000fc0:	4849      	ldr	r0, [pc, #292]	; (80010e8 <HAL_DMA_Init+0x290>)
 8000fc2:	f7ff fcc4 	bl	800094e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00d      	beq.n	8000fea <HAL_DMA_Init+0x192>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fd6:	d008      	beq.n	8000fea <HAL_DMA_Init+0x192>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fe0:	d003      	beq.n	8000fea <HAL_DMA_Init+0x192>
 8000fe2:	21bc      	movs	r1, #188	; 0xbc
 8000fe4:	4840      	ldr	r0, [pc, #256]	; (80010e8 <HAL_DMA_Init+0x290>)
 8000fe6:	f7ff fcb2 	bl	800094e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00d      	beq.n	800100e <HAL_DMA_Init+0x1b6>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ffa:	d008      	beq.n	800100e <HAL_DMA_Init+0x1b6>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001004:	d003      	beq.n	800100e <HAL_DMA_Init+0x1b6>
 8001006:	21bd      	movs	r1, #189	; 0xbd
 8001008:	4837      	ldr	r0, [pc, #220]	; (80010e8 <HAL_DMA_Init+0x290>)
 800100a:	f7ff fca0 	bl	800094e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00c      	beq.n	8001030 <HAL_DMA_Init+0x1d8>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800101e:	d007      	beq.n	8001030 <HAL_DMA_Init+0x1d8>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	2b20      	cmp	r3, #32
 8001026:	d003      	beq.n	8001030 <HAL_DMA_Init+0x1d8>
 8001028:	21be      	movs	r1, #190	; 0xbe
 800102a:	482f      	ldr	r0, [pc, #188]	; (80010e8 <HAL_DMA_Init+0x290>)
 800102c:	f7ff fc8f 	bl	800094e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d012      	beq.n	800105e <HAL_DMA_Init+0x206>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001040:	d00d      	beq.n	800105e <HAL_DMA_Init+0x206>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800104a:	d008      	beq.n	800105e <HAL_DMA_Init+0x206>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001054:	d003      	beq.n	800105e <HAL_DMA_Init+0x206>
 8001056:	21bf      	movs	r1, #191	; 0xbf
 8001058:	4823      	ldr	r0, [pc, #140]	; (80010e8 <HAL_DMA_Init+0x290>)
 800105a:	f7ff fc78 	bl	800094e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <HAL_DMA_Init+0x21e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	2b04      	cmp	r3, #4
 800106c:	d003      	beq.n	8001076 <HAL_DMA_Init+0x21e>
 800106e:	21c0      	movs	r1, #192	; 0xc0
 8001070:	481d      	ldr	r0, [pc, #116]	; (80010e8 <HAL_DMA_Init+0x290>)
 8001072:	f7ff fc6c 	bl	800094e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	2b00      	cmp	r3, #0
 800107c:	d064      	beq.n	8001148 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	2b00      	cmp	r3, #0
 8001084:	d032      	beq.n	80010ec <HAL_DMA_Init+0x294>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	2b01      	cmp	r3, #1
 800108c:	d02e      	beq.n	80010ec <HAL_DMA_Init+0x294>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	2b02      	cmp	r3, #2
 8001094:	d02a      	beq.n	80010ec <HAL_DMA_Init+0x294>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	2b03      	cmp	r3, #3
 800109c:	d026      	beq.n	80010ec <HAL_DMA_Init+0x294>
 800109e:	21c5      	movs	r1, #197	; 0xc5
 80010a0:	4811      	ldr	r0, [pc, #68]	; (80010e8 <HAL_DMA_Init+0x290>)
 80010a2:	f7ff fc54 	bl	800094e <assert_failed>
 80010a6:	e021      	b.n	80010ec <HAL_DMA_Init+0x294>
 80010a8:	40026010 	.word	0x40026010
 80010ac:	40026028 	.word	0x40026028
 80010b0:	40026040 	.word	0x40026040
 80010b4:	40026058 	.word	0x40026058
 80010b8:	40026070 	.word	0x40026070
 80010bc:	40026088 	.word	0x40026088
 80010c0:	400260a0 	.word	0x400260a0
 80010c4:	400260b8 	.word	0x400260b8
 80010c8:	40026410 	.word	0x40026410
 80010cc:	40026428 	.word	0x40026428
 80010d0:	40026440 	.word	0x40026440
 80010d4:	40026458 	.word	0x40026458
 80010d8:	40026470 	.word	0x40026470
 80010dc:	40026488 	.word	0x40026488
 80010e0:	400264a0 	.word	0x400264a0
 80010e4:	400264b8 	.word	0x400264b8
 80010e8:	08009728 	.word	0x08009728
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d012      	beq.n	800111a <HAL_DMA_Init+0x2c2>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80010fc:	d00d      	beq.n	800111a <HAL_DMA_Init+0x2c2>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001106:	d008      	beq.n	800111a <HAL_DMA_Init+0x2c2>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001110:	d003      	beq.n	800111a <HAL_DMA_Init+0x2c2>
 8001112:	21c6      	movs	r1, #198	; 0xc6
 8001114:	485b      	ldr	r0, [pc, #364]	; (8001284 <HAL_DMA_Init+0x42c>)
 8001116:	f7ff fc1a 	bl	800094e <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	2b00      	cmp	r3, #0
 8001120:	d012      	beq.n	8001148 <HAL_DMA_Init+0x2f0>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800112a:	d00d      	beq.n	8001148 <HAL_DMA_Init+0x2f0>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001134:	d008      	beq.n	8001148 <HAL_DMA_Init+0x2f0>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800113e:	d003      	beq.n	8001148 <HAL_DMA_Init+0x2f0>
 8001140:	21c7      	movs	r1, #199	; 0xc7
 8001142:	4850      	ldr	r0, [pc, #320]	; (8001284 <HAL_DMA_Init+0x42c>)
 8001144:	f7ff fc03 	bl	800094e <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001168:	e00f      	b.n	800118a <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800116a:	f7ff fd05 	bl	8000b78 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b05      	cmp	r3, #5
 8001176:	d908      	bls.n	800118a <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2220      	movs	r2, #32
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2203      	movs	r2, #3
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e078      	b.n	800127c <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e8      	bne.n	800116a <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	4b39      	ldr	r3, [pc, #228]	; (8001288 <HAL_DMA_Init+0x430>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d107      	bne.n	80011f4 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4313      	orrs	r3, r2
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f023 0307 	bic.w	r3, r3, #7
 800120a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	4313      	orrs	r3, r2
 8001214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	2b04      	cmp	r3, #4
 800121c:	d117      	bne.n	800124e <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00e      	beq.n	800124e <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 faef 	bl	8001814 <DMA_CheckFifoParam>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800124a:	2301      	movs	r3, #1
 800124c:	e016      	b.n	800127c <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 faa6 	bl	80017a8 <DMA_CalcBaseAndBitshift>
 800125c:	4603      	mov	r3, r0
 800125e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	223f      	movs	r2, #63	; 0x3f
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	08009728 	.word	0x08009728
 8001288:	f010803f 	.word	0xf010803f

0800128c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_DMA_Start_IT+0x26>
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d304      	bcc.n	80012bc <HAL_DMA_Start_IT+0x30>
 80012b2:	f240 11cb 	movw	r1, #459	; 0x1cb
 80012b6:	4827      	ldr	r0, [pc, #156]	; (8001354 <HAL_DMA_Start_IT+0xc8>)
 80012b8:	f7ff fb49 	bl	800094e <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_DMA_Start_IT+0x3e>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e040      	b.n	800134c <HAL_DMA_Start_IT+0xc0>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d12f      	bne.n	800133e <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2202      	movs	r2, #2
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 fa2a 	bl	800174c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	223f      	movs	r2, #63	; 0x3f
 80012fe:	409a      	lsls	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0216 	orr.w	r2, r2, #22
 8001312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	2b00      	cmp	r3, #0
 800131a:	d007      	beq.n	800132c <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0208 	orr.w	r2, r2, #8
 800132a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e005      	b.n	800134a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001346:	2302      	movs	r3, #2
 8001348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800134a:	7dfb      	ldrb	r3, [r7, #23]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	08009728 	.word	0x08009728

08001358 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001366:	f7ff fc07 	bl	8000b78 <HAL_GetTick>
 800136a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d008      	beq.n	800138a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e052      	b.n	8001430 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0216 	bic.w	r2, r2, #22
 8001398:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <HAL_DMA_Abort+0x62>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0208 	bic.w	r2, r2, #8
 80013c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013da:	e013      	b.n	8001404 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013dc:	f7ff fbcc 	bl	8000b78 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d90c      	bls.n	8001404 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2220      	movs	r2, #32
 80013ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e015      	b.n	8001430 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1e4      	bne.n	80013dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	223f      	movs	r2, #63	; 0x3f
 8001418:	409a      	lsls	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001444:	4b8e      	ldr	r3, [pc, #568]	; (8001680 <HAL_DMA_IRQHandler+0x248>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a8e      	ldr	r2, [pc, #568]	; (8001684 <HAL_DMA_IRQHandler+0x24c>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0a9b      	lsrs	r3, r3, #10
 8001450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001462:	2208      	movs	r2, #8
 8001464:	409a      	lsls	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01a      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0204 	bic.w	r2, r2, #4
 800148a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	2208      	movs	r2, #8
 8001492:	409a      	lsls	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149c:	f043 0201 	orr.w	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	2201      	movs	r2, #1
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d012      	beq.n	80014da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	2201      	movs	r2, #1
 80014c8:	409a      	lsls	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d2:	f043 0202 	orr.w	r2, r3, #2
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014de:	2204      	movs	r2, #4
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d012      	beq.n	8001510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00b      	beq.n	8001510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	2204      	movs	r2, #4
 80014fe:	409a      	lsls	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001508:	f043 0204 	orr.w	r2, r3, #4
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	2210      	movs	r2, #16
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d043      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03c      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001532:	2210      	movs	r2, #16
 8001534:	409a      	lsls	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d018      	beq.n	800157a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d108      	bne.n	8001568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	2b00      	cmp	r3, #0
 800155c:	d024      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	4798      	blx	r3
 8001566:	e01f      	b.n	80015a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
 8001578:	e016      	b.n	80015a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d107      	bne.n	8001598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0208 	bic.w	r2, r2, #8
 8001596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	2220      	movs	r2, #32
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 808f 	beq.w	80016d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 8087 	beq.w	80016d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ce:	2220      	movs	r2, #32
 80015d0:	409a      	lsls	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d136      	bne.n	8001650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0216 	bic.w	r2, r2, #22
 80015f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d103      	bne.n	8001612 <HAL_DMA_IRQHandler+0x1da>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0208 	bic.w	r2, r2, #8
 8001620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001626:	223f      	movs	r2, #63	; 0x3f
 8001628:	409a      	lsls	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001642:	2b00      	cmp	r3, #0
 8001644:	d07e      	beq.n	8001744 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
        }
        return;
 800164e:	e079      	b.n	8001744 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01d      	beq.n	800169a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	2b00      	cmp	r3, #0
 8001672:	d031      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
 800167c:	e02c      	b.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000
 8001684:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d023      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
 8001698:	e01e      	b.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10f      	bne.n	80016c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0210 	bic.w	r2, r2, #16
 80016b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d032      	beq.n	8001746 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d022      	beq.n	8001732 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2205      	movs	r2, #5
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3301      	adds	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	d307      	bcc.n	8001720 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f2      	bne.n	8001704 <HAL_DMA_IRQHandler+0x2cc>
 800171e:	e000      	b.n	8001722 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001720:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	4798      	blx	r3
 8001742:	e000      	b.n	8001746 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001744:	bf00      	nop
    }
  }
}
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b40      	cmp	r3, #64	; 0x40
 8001778:	d108      	bne.n	800178c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800178a:	e007      	b.n	800179c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	60da      	str	r2, [r3, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	3b10      	subs	r3, #16
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <DMA_CalcBaseAndBitshift+0x64>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <DMA_CalcBaseAndBitshift+0x68>)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d909      	bls.n	80017ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	1d1a      	adds	r2, r3, #4
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	659a      	str	r2, [r3, #88]	; 0x58
 80017e8:	e007      	b.n	80017fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017f2:	f023 0303 	bic.w	r3, r3, #3
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	aaaaaaab 	.word	0xaaaaaaab
 8001810:	080098e0 	.word	0x080098e0

08001814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d11f      	bne.n	800186e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d856      	bhi.n	80018e2 <DMA_CheckFifoParam+0xce>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <DMA_CheckFifoParam+0x28>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	0800185f 	.word	0x0800185f
 8001844:	0800184d 	.word	0x0800184d
 8001848:	080018e3 	.word	0x080018e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d046      	beq.n	80018e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800185c:	e043      	b.n	80018e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001866:	d140      	bne.n	80018ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800186c:	e03d      	b.n	80018ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001876:	d121      	bne.n	80018bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d837      	bhi.n	80018ee <DMA_CheckFifoParam+0xda>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <DMA_CheckFifoParam+0x70>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08001895 	.word	0x08001895
 8001888:	0800189b 	.word	0x0800189b
 800188c:	08001895 	.word	0x08001895
 8001890:	080018ad 	.word	0x080018ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
      break;
 8001898:	e030      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d025      	beq.n	80018f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018aa:	e022      	b.n	80018f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018b4:	d11f      	bne.n	80018f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018ba:	e01c      	b.n	80018f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d903      	bls.n	80018ca <DMA_CheckFifoParam+0xb6>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d003      	beq.n	80018d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018c8:	e018      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
      break;
 80018ce:	e015      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00e      	beq.n	80018fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
      break;
 80018e0:	e00b      	b.n	80018fa <DMA_CheckFifoParam+0xe6>
      break;
 80018e2:	bf00      	nop
 80018e4:	e00a      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
 80018e8:	e008      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018ea:	bf00      	nop
 80018ec:	e006      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018ee:	bf00      	nop
 80018f0:	e004      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018f2:	bf00      	nop
 80018f4:	e002      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;   
 80018f6:	bf00      	nop
 80018f8:	e000      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018fa:	bf00      	nop
    }
  } 
  
  return status; 
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a39      	ldr	r2, [pc, #228]	; (8001a0c <HAL_GPIO_Init+0x100>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d023      	beq.n	8001972 <HAL_GPIO_Init+0x66>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <HAL_GPIO_Init+0x104>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01f      	beq.n	8001972 <HAL_GPIO_Init+0x66>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a37      	ldr	r2, [pc, #220]	; (8001a14 <HAL_GPIO_Init+0x108>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01b      	beq.n	8001972 <HAL_GPIO_Init+0x66>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a36      	ldr	r2, [pc, #216]	; (8001a18 <HAL_GPIO_Init+0x10c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d017      	beq.n	8001972 <HAL_GPIO_Init+0x66>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a35      	ldr	r2, [pc, #212]	; (8001a1c <HAL_GPIO_Init+0x110>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x66>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a34      	ldr	r2, [pc, #208]	; (8001a20 <HAL_GPIO_Init+0x114>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00f      	beq.n	8001972 <HAL_GPIO_Init+0x66>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <HAL_GPIO_Init+0x118>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00b      	beq.n	8001972 <HAL_GPIO_Init+0x66>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a32      	ldr	r2, [pc, #200]	; (8001a28 <HAL_GPIO_Init+0x11c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x66>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a31      	ldr	r2, [pc, #196]	; (8001a2c <HAL_GPIO_Init+0x120>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x66>
 800196a:	21ac      	movs	r1, #172	; 0xac
 800196c:	4830      	ldr	r0, [pc, #192]	; (8001a30 <HAL_GPIO_Init+0x124>)
 800196e:	f7fe ffee 	bl	800094e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_GPIO_Init+0x7c>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x84>
 8001988:	21ad      	movs	r1, #173	; 0xad
 800198a:	4829      	ldr	r0, [pc, #164]	; (8001a30 <HAL_GPIO_Init+0x124>)
 800198c:	f7fe ffdf 	bl	800094e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d035      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d031      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b11      	cmp	r3, #17
 80019a6:	d02d      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d029      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b12      	cmp	r3, #18
 80019b6:	d025      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80019c0:	d020      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80019ca:	d01b      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80019d4:	d016      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80019de:	d011      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80019e8:	d00c      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0xf8>
 80019fc:	21ae      	movs	r1, #174	; 0xae
 80019fe:	480c      	ldr	r0, [pc, #48]	; (8001a30 <HAL_GPIO_Init+0x124>)
 8001a00:	f7fe ffa5 	bl	800094e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	e242      	b.n	8001e90 <HAL_GPIO_Init+0x584>
 8001a0a:	bf00      	nop
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40020800 	.word	0x40020800
 8001a18:	40020c00 	.word	0x40020c00
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40021400 	.word	0x40021400
 8001a24:	40021800 	.word	0x40021800
 8001a28:	40021c00 	.word	0x40021c00
 8001a2c:	40022000 	.word	0x40022000
 8001a30:	08009760 	.word	0x08009760
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 821c 	bne.w	8001e8a <HAL_GPIO_Init+0x57e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d005      	beq.n	8001a6a <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d144      	bne.n	8001af4 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00f      	beq.n	8001a92 <HAL_GPIO_Init+0x186>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d00b      	beq.n	8001a92 <HAL_GPIO_Init+0x186>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x186>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x186>
 8001a8a:	21c0      	movs	r1, #192	; 0xc0
 8001a8c:	4881      	ldr	r0, [pc, #516]	; (8001c94 <HAL_GPIO_Init+0x388>)
 8001a8e:	f7fe ff5e 	bl	800094e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d027      	beq.n	8001b50 <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <HAL_GPIO_Init+0x214>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0x214>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x214>
 8001b18:	21d1      	movs	r1, #209	; 0xd1
 8001b1a:	485e      	ldr	r0, [pc, #376]	; (8001c94 <HAL_GPIO_Init+0x388>)
 8001b1c:	f7fe ff17 	bl	800094e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	f040 80c1 	bne.w	8001ce0 <HAL_GPIO_Init+0x3d4>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8098 	beq.w	8001c98 <HAL_GPIO_Init+0x38c>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b09      	cmp	r3, #9
 8001b6e:	f000 8093 	beq.w	8001c98 <HAL_GPIO_Init+0x38c>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 808e 	beq.w	8001c98 <HAL_GPIO_Init+0x38c>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8089 	beq.w	8001c98 <HAL_GPIO_Init+0x38c>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8084 	beq.w	8001c98 <HAL_GPIO_Init+0x38c>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d07f      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d07b      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d077      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d073      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d06f      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d06b      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d067      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d063      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d05f      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d05b      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	d057      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d053      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	d04f      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b06      	cmp	r3, #6
 8001bfe:	d04b      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d047      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	2b07      	cmp	r3, #7
 8001c0e:	d043      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	d03f      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	d03b      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d037      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d033      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d02f      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d02b      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	d027      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b0a      	cmp	r3, #10
 8001c4e:	d023      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2b0a      	cmp	r3, #10
 8001c56:	d01f      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b0b      	cmp	r3, #11
 8001c5e:	d01b      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d017      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d013      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b0d      	cmp	r3, #13
 8001c76:	d00f      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d00b      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d007      	beq.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c88:	21de      	movs	r1, #222	; 0xde
 8001c8a:	4802      	ldr	r0, [pc, #8]	; (8001c94 <HAL_GPIO_Init+0x388>)
 8001c8c:	f7fe fe5f 	bl	800094e <assert_failed>
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x38c>
 8001c92:	bf00      	nop
 8001c94:	08009760 	.word	0x08009760
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80b4 	beq.w	8001e8a <HAL_GPIO_Init+0x57e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <HAL_GPIO_Init+0x598>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ea4 <HAL_GPIO_Init+0x598>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <HAL_GPIO_Init+0x598>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <HAL_GPIO_Init+0x59c>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a51      	ldr	r2, [pc, #324]	; (8001eac <HAL_GPIO_Init+0x5a0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x4b6>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a50      	ldr	r2, [pc, #320]	; (8001eb0 <HAL_GPIO_Init+0x5a4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x4b2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4f      	ldr	r2, [pc, #316]	; (8001eb4 <HAL_GPIO_Init+0x5a8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x4ae>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <HAL_GPIO_Init+0x5ac>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x4aa>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4d      	ldr	r2, [pc, #308]	; (8001ebc <HAL_GPIO_Init+0x5b0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x4a6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <HAL_GPIO_Init+0x5b4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x4a2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <HAL_GPIO_Init+0x5b8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x49e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <HAL_GPIO_Init+0x5bc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x49a>
 8001da2:	2307      	movs	r3, #7
 8001da4:	e00e      	b.n	8001dc4 <HAL_GPIO_Init+0x4b8>
 8001da6:	2308      	movs	r3, #8
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x4b8>
 8001daa:	2306      	movs	r3, #6
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x4b8>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x4b8>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x4b8>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x4b8>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x4b8>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x4b8>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd4:	4934      	ldr	r1, [pc, #208]	; (8001ea8 <HAL_GPIO_Init+0x59c>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_GPIO_Init+0x5c0>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x4fa>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e06:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <HAL_GPIO_Init+0x5c0>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_GPIO_Init+0x5c0>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x524>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <HAL_GPIO_Init+0x5c0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_GPIO_Init+0x5c0>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x54e>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <HAL_GPIO_Init+0x5c0>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_GPIO_Init+0x5c0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x578>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_GPIO_Init+0x5c0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	f67f adce 	bls.w	8001a34 <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40021800 	.word	0x40021800
 8001ec8:	40021c00 	.word	0x40021c00
 8001ecc:	40013c00 	.word	0x40013c00

08001ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_GPIO_WritePin+0x20>
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_GPIO_WritePin+0x2a>
 8001ef0:	f240 119d 	movw	r1, #413	; 0x19d
 8001ef4:	480e      	ldr	r0, [pc, #56]	; (8001f30 <HAL_GPIO_WritePin+0x60>)
 8001ef6:	f7fe fd2a 	bl	800094e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001efa:	787b      	ldrb	r3, [r7, #1]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_WritePin+0x40>
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d004      	beq.n	8001f10 <HAL_GPIO_WritePin+0x40>
 8001f06:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001f0a:	4809      	ldr	r0, [pc, #36]	; (8001f30 <HAL_GPIO_WritePin+0x60>)
 8001f0c:	f7fe fd1f 	bl	800094e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	08009760 	.word	0x08009760

08001f34 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <HAL_GPIO_TogglePin+0x1c>
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	041b      	lsls	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_GPIO_TogglePin+0x26>
 8001f50:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001f54:	480a      	ldr	r0, [pc, #40]	; (8001f80 <HAL_GPIO_TogglePin+0x4c>)
 8001f56:	f7fe fcfa 	bl	800094e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f60:	887a      	ldrh	r2, [r7, #2]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	041a      	lsls	r2, r3, #16
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	400b      	ands	r3, r1
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	08009760 	.word	0x08009760

08001f84 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1d1      	b.n	800233a <HAL_I2S_Init+0x3b6>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a93      	ldr	r2, [pc, #588]	; (80021e8 <HAL_I2S_Init+0x264>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_I2S_Init+0x30>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a91      	ldr	r2, [pc, #580]	; (80021ec <HAL_I2S_Init+0x268>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_I2S_Init+0x30>
 8001faa:	f240 111b 	movw	r1, #283	; 0x11b
 8001fae:	4890      	ldr	r0, [pc, #576]	; (80021f0 <HAL_I2S_Init+0x26c>)
 8001fb0:	f7fe fccd 	bl	800094e <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_I2S_Init+0x60>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc4:	d00e      	beq.n	8001fe4 <HAL_I2S_Init+0x60>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fce:	d009      	beq.n	8001fe4 <HAL_I2S_Init+0x60>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fd8:	d004      	beq.n	8001fe4 <HAL_I2S_Init+0x60>
 8001fda:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001fde:	4884      	ldr	r0, [pc, #528]	; (80021f0 <HAL_I2S_Init+0x26c>)
 8001fe0:	f7fe fcb5 	bl	800094e <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d014      	beq.n	8002016 <HAL_I2S_Init+0x92>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d010      	beq.n	8002016 <HAL_I2S_Init+0x92>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d00c      	beq.n	8002016 <HAL_I2S_Init+0x92>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b30      	cmp	r3, #48	; 0x30
 8002002:	d008      	beq.n	8002016 <HAL_I2S_Init+0x92>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2bb0      	cmp	r3, #176	; 0xb0
 800200a:	d004      	beq.n	8002016 <HAL_I2S_Init+0x92>
 800200c:	f240 111d 	movw	r1, #285	; 0x11d
 8002010:	4877      	ldr	r0, [pc, #476]	; (80021f0 <HAL_I2S_Init+0x26c>)
 8002012:	f7fe fc9c 	bl	800094e <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_I2S_Init+0xbc>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d00c      	beq.n	8002040 <HAL_I2S_Init+0xbc>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d008      	beq.n	8002040 <HAL_I2S_Init+0xbc>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d004      	beq.n	8002040 <HAL_I2S_Init+0xbc>
 8002036:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800203a:	486d      	ldr	r0, [pc, #436]	; (80021f0 <HAL_I2S_Init+0x26c>)
 800203c:	f7fe fc87 	bl	800094e <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002048:	d008      	beq.n	800205c <HAL_I2S_Init+0xd8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_I2S_Init+0xd8>
 8002052:	f240 111f 	movw	r1, #287	; 0x11f
 8002056:	4866      	ldr	r0, [pc, #408]	; (80021f0 <HAL_I2S_Init+0x26c>)
 8002058:	f7fe fc79 	bl	800094e <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002064:	d304      	bcc.n	8002070 <HAL_I2S_Init+0xec>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4a62      	ldr	r2, [pc, #392]	; (80021f4 <HAL_I2S_Init+0x270>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d908      	bls.n	8002082 <HAL_I2S_Init+0xfe>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d004      	beq.n	8002082 <HAL_I2S_Init+0xfe>
 8002078:	f44f 7190 	mov.w	r1, #288	; 0x120
 800207c:	485c      	ldr	r0, [pc, #368]	; (80021f0 <HAL_I2S_Init+0x26c>)
 800207e:	f7fe fc66 	bl	800094e <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_I2S_Init+0x118>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b08      	cmp	r3, #8
 8002090:	d004      	beq.n	800209c <HAL_I2S_Init+0x118>
 8002092:	f240 1121 	movw	r1, #289	; 0x121
 8002096:	4856      	ldr	r0, [pc, #344]	; (80021f0 <HAL_I2S_Init+0x26c>)
 8002098:	f7fe fc59 	bl	800094e <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d008      	beq.n	80020b6 <HAL_I2S_Init+0x132>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_I2S_Init+0x132>
 80020ac:	f44f 7191 	mov.w	r1, #290	; 0x122
 80020b0:	484f      	ldr	r0, [pc, #316]	; (80021f0 <HAL_I2S_Init+0x26c>)
 80020b2:	f7fe fc4c 	bl	800094e <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_I2S_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4a      	ldr	r2, [pc, #296]	; (80021f8 <HAL_I2S_Init+0x274>)
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7fe faf7 	bl	80006c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020ec:	f023 030f 	bic.w	r3, r3, #15
 80020f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d060      	beq.n	80021c4 <HAL_I2S_Init+0x240>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <HAL_I2S_Init+0x18c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800210a:	2310      	movs	r3, #16
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e001      	b.n	8002114 <HAL_I2S_Init+0x190>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b20      	cmp	r3, #32
 800211a:	d802      	bhi.n	8002122 <HAL_I2S_Init+0x19e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002122:	2001      	movs	r0, #1
 8002124:	f003 f9f6 	bl	8005514 <HAL_RCCEx_GetPeriphCLKFreq>
 8002128:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002132:	d125      	bne.n	8002180 <HAL_I2S_Init+0x1fc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <HAL_I2S_Init+0x1da>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	fbb2 f2f3 	udiv	r2, r2, r3
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	461a      	mov	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	3305      	adds	r3, #5
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e01f      	b.n	800219e <HAL_I2S_Init+0x21a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	fbb2 f2f3 	udiv	r2, r2, r3
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	461a      	mov	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	3305      	adds	r3, #5
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e00e      	b.n	800219e <HAL_I2S_Init+0x21a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fbb2 f2f3 	udiv	r2, r2, r3
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	3305      	adds	r3, #5
 800219c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_I2S_Init+0x278>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e003      	b.n	80021cc <HAL_I2S_Init+0x248>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d902      	bls.n	80021d8 <HAL_I2S_Init+0x254>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	2bff      	cmp	r3, #255	; 0xff
 80021d6:	d913      	bls.n	8002200 <HAL_I2S_Init+0x27c>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0a8      	b.n	800233a <HAL_I2S_Init+0x3b6>
 80021e8:	40003800 	.word	0x40003800
 80021ec:	40003c00 	.word	0x40003c00
 80021f0:	0800979c 	.word	0x0800979c
 80021f4:	0002ee00 	.word	0x0002ee00
 80021f8:	080029e5 	.word	0x080029e5
 80021fc:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	ea42 0103 	orr.w	r1, r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	430a      	orrs	r2, r1
 8002212:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800221e:	f023 030f 	bic.w	r3, r3, #15
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6851      	ldr	r1, [r2, #4]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6892      	ldr	r2, [r2, #8]
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68d2      	ldr	r2, [r2, #12]
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6992      	ldr	r2, [r2, #24]
 8002236:	430a      	orrs	r2, r1
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002242:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_I2S_Init+0x2da>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d004      	beq.n	800225e <HAL_I2S_Init+0x2da>
 8002254:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002258:	483a      	ldr	r0, [pc, #232]	; (8002344 <HAL_I2S_Init+0x3c0>)
 800225a:	f7fe fb78 	bl	800094e <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d161      	bne.n	800232a <HAL_I2S_Init+0x3a6>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a37      	ldr	r2, [pc, #220]	; (8002348 <HAL_I2S_Init+0x3c4>)
 800226a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a36      	ldr	r2, [pc, #216]	; (800234c <HAL_I2S_Init+0x3c8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_I2S_Init+0x2f6>
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_I2S_Init+0x3cc>)
 8002278:	e001      	b.n	800227e <HAL_I2S_Init+0x2fa>
 800227a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	4931      	ldr	r1, [pc, #196]	; (800234c <HAL_I2S_Init+0x3c8>)
 8002286:	428a      	cmp	r2, r1
 8002288:	d101      	bne.n	800228e <HAL_I2S_Init+0x30a>
 800228a:	4a31      	ldr	r2, [pc, #196]	; (8002350 <HAL_I2S_Init+0x3cc>)
 800228c:	e001      	b.n	8002292 <HAL_I2S_Init+0x30e>
 800228e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002292:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002296:	f023 030f 	bic.w	r3, r3, #15
 800229a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_I2S_Init+0x3c8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_I2S_Init+0x326>
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_I2S_Init+0x3cc>)
 80022a8:	e001      	b.n	80022ae <HAL_I2S_Init+0x32a>
 80022aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022ae:	2202      	movs	r2, #2
 80022b0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a25      	ldr	r2, [pc, #148]	; (800234c <HAL_I2S_Init+0x3c8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_I2S_Init+0x33c>
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_I2S_Init+0x3cc>)
 80022be:	e001      	b.n	80022c4 <HAL_I2S_Init+0x340>
 80022c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d0:	d003      	beq.n	80022da <HAL_I2S_Init+0x356>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <HAL_I2S_Init+0x35e>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e001      	b.n	80022e6 <HAL_I2S_Init+0x362>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002304:	4313      	orrs	r3, r2
 8002306:	b29a      	uxth	r2, r3
 8002308:	897b      	ldrh	r3, [r7, #10]
 800230a:	4313      	orrs	r3, r2
 800230c:	b29b      	uxth	r3, r3
 800230e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002312:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_I2S_Init+0x3c8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_I2S_Init+0x39e>
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_I2S_Init+0x3cc>)
 8002320:	e001      	b.n	8002326 <HAL_I2S_Init+0x3a2>
 8002322:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002326:	897a      	ldrh	r2, [r7, #10]
 8002328:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	0800979c 	.word	0x0800979c
 8002348:	08002b6d 	.word	0x08002b6d
 800234c:	40003800 	.word	0x40003800
 8002350:	40003400 	.word	0x40003400

08002354 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	4613      	mov	r3, r2
 8002360:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_I2S_Transmit_DMA+0x1a>
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e08e      	b.n	8002490 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2S_Transmit_DMA+0x2e>
 800237e:	2302      	movs	r3, #2
 8002380:	e086      	b.n	8002490 <HAL_I2S_Transmit_DMA+0x13c>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d005      	beq.n	80023a2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
 80023a0:	e076      	b.n	8002490 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2203      	movs	r2, #3
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d002      	beq.n	80023ce <HAL_I2S_Transmit_DMA+0x7a>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d10a      	bne.n	80023e4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023e2:	e005      	b.n	80023f0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	4a28      	ldr	r2, [pc, #160]	; (8002498 <HAL_I2S_Transmit_DMA+0x144>)
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	4a27      	ldr	r2, [pc, #156]	; (800249c <HAL_I2S_Transmit_DMA+0x148>)
 80023fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <HAL_I2S_Transmit_DMA+0x14c>)
 8002406:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002410:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002418:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002420:	f7fe ff34 	bl	800128c <HAL_DMA_Start_IT>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00f      	beq.n	800244a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f043 0208 	orr.w	r2, r3, #8
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e022      	b.n	8002490 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002466:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0202 	orr.w	r2, r2, #2
 8002484:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	080028c3 	.word	0x080028c3
 800249c:	08002881 	.word	0x08002881
 80024a0:	080028df 	.word	0x080028df

080024a4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b8:	d004      	beq.n	80024c4 <HAL_I2S_DMAStop+0x20>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 80d1 	bne.w	8002666 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00f      	beq.n	80024ec <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe ff41 	bl	8001358 <HAL_DMA_Abort>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0208 	orr.w	r2, r3, #8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80024ec:	2364      	movs	r3, #100	; 0x64
 80024ee:	2201      	movs	r2, #1
 80024f0:	2102      	movs	r1, #2
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fb00 	bl	8002af8 <I2S_WaitFlagStateUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002516:	2364      	movs	r3, #100	; 0x64
 8002518:	2200      	movs	r2, #0
 800251a:	2180      	movs	r1, #128	; 0x80
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 faeb 	bl	8002af8 <I2S_WaitFlagStateUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00b      	beq.n	8002540 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0202 	bic.w	r2, r2, #2
 800256c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b05      	cmp	r3, #5
 8002578:	f040 8165 	bne.w	8002846 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00f      	beq.n	80025a4 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fee5 	bl	8001358 <HAL_DMA_Abort>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f043 0208 	orr.w	r2, r3, #8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a8a      	ldr	r2, [pc, #552]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_I2S_DMAStop+0x10e>
 80025ae:	4b8a      	ldr	r3, [pc, #552]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 80025b0:	e001      	b.n	80025b6 <HAL_I2S_DMAStop+0x112>
 80025b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4985      	ldr	r1, [pc, #532]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 80025be:	428b      	cmp	r3, r1
 80025c0:	d101      	bne.n	80025c6 <HAL_I2S_DMAStop+0x122>
 80025c2:	4b85      	ldr	r3, [pc, #532]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 80025c4:	e001      	b.n	80025ca <HAL_I2S_DMAStop+0x126>
 80025c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ce:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a7e      	ldr	r2, [pc, #504]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_I2S_DMAStop+0x13e>
 80025de:	4b7e      	ldr	r3, [pc, #504]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 80025e0:	e001      	b.n	80025e6 <HAL_I2S_DMAStop+0x142>
 80025e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a79      	ldr	r2, [pc, #484]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d101      	bne.n	80025f8 <HAL_I2S_DMAStop+0x154>
 80025f4:	4b78      	ldr	r3, [pc, #480]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 80025f6:	e001      	b.n	80025fc <HAL_I2S_DMAStop+0x158>
 80025f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a73      	ldr	r2, [pc, #460]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_I2S_DMAStop+0x16c>
 800260c:	4b72      	ldr	r3, [pc, #456]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 800260e:	e001      	b.n	8002614 <HAL_I2S_DMAStop+0x170>
 8002610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	496e      	ldr	r1, [pc, #440]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 800261c:	428b      	cmp	r3, r1
 800261e:	d101      	bne.n	8002624 <HAL_I2S_DMAStop+0x180>
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 8002622:	e001      	b.n	8002628 <HAL_I2S_DMAStop+0x184>
 8002624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800264e:	e0fa      	b.n	8002846 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5f      	ldr	r2, [pc, #380]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_I2S_DMAStop+0x1ba>
 800265a:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 800265c:	e001      	b.n	8002662 <HAL_I2S_DMAStop+0x1be>
 800265e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002662:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002664:	e0ef      	b.n	8002846 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800266e:	d005      	beq.n	800267c <HAL_I2S_DMAStop+0x1d8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002678:	f040 80e5 	bne.w	8002846 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00f      	beq.n	80026a4 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fe65 	bl	8001358 <HAL_DMA_Abort>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f043 0208 	orr.w	r2, r3, #8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	f040 809a 	bne.w	80027e6 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00f      	beq.n	80026da <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fe4a 	bl	8001358 <HAL_DMA_Abort>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0208 	orr.w	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80026da:	f7fe fa4d 	bl	8000b78 <HAL_GetTick>
 80026de:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80026e0:	e012      	b.n	8002708 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80026e2:	f7fe fa49 	bl	8000b78 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b64      	cmp	r3, #100	; 0x64
 80026ee:	d90b      	bls.n	8002708 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d101      	bne.n	8002716 <HAL_I2S_DMAStop+0x272>
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 8002714:	e001      	b.n	800271a <HAL_I2S_DMAStop+0x276>
 8002716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b02      	cmp	r3, #2
 8002722:	d1de      	bne.n	80026e2 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002724:	e012      	b.n	800274c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002726:	f7fe fa27 	bl	8000b78 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	d90b      	bls.n	800274c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_I2S_DMAStop+0x2b6>
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 8002758:	e001      	b.n	800275e <HAL_I2S_DMAStop+0x2ba>
 800275a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d0de      	beq.n	8002726 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_I2S_DMAStop+0x2d2>
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 8002774:	e001      	b.n	800277a <HAL_I2S_DMAStop+0x2d6>
 8002776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4914      	ldr	r1, [pc, #80]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 8002782:	428b      	cmp	r3, r1
 8002784:	d101      	bne.n	800278a <HAL_I2S_DMAStop+0x2e6>
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 8002788:	e001      	b.n	800278e <HAL_I2S_DMAStop+0x2ea>
 800278a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800278e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002792:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_I2S_DMAStop+0x302>
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 80027a4:	e001      	b.n	80027aa <HAL_I2S_DMAStop+0x306>
 80027a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_I2S_DMAStop+0x31a>
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 80027bc:	e001      	b.n	80027c2 <HAL_I2S_DMAStop+0x31e>
 80027be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4902      	ldr	r1, [pc, #8]	; (80027d4 <HAL_I2S_DMAStop+0x330>)
 80027ca:	428b      	cmp	r3, r1
 80027cc:	d106      	bne.n	80027dc <HAL_I2S_DMAStop+0x338>
 80027ce:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <HAL_I2S_DMAStop+0x334>)
 80027d0:	e006      	b.n	80027e0 <HAL_I2S_DMAStop+0x33c>
 80027d2:	bf00      	nop
 80027d4:	40003800 	.word	0x40003800
 80027d8:	40003400 	.word	0x40003400
 80027dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027e0:	f022 0202 	bic.w	r2, r2, #2
 80027e4:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002824:	d10c      	bne.n	8002840 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	77fb      	strb	r3, [r7, #31]
 800283e:	e002      	b.n	8002846 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800284e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10e      	bne.n	80028b4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0202 	bic.w	r2, r2, #2
 80028a4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7fd fe45 	bl	8000544 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7fd fe25 	bl	8000520 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0203 	bic.w	r2, r2, #3
 80028fa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f043 0208 	orr.w	r2, r3, #8
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff ffa5 	bl	800286c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	881a      	ldrh	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c9a      	adds	r2, r3, #2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10e      	bne.n	800297e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800296e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7fd fde3 	bl	8000544 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	b292      	uxth	r2, r2
 800299a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	1c9a      	adds	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ff3e 	bl	8002858 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d13a      	bne.n	8002a76 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d109      	bne.n	8002a1e <I2S_IRQHandler+0x3a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	d102      	bne.n	8002a1e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ffb4 	bl	8002986 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d126      	bne.n	8002a76 <I2S_IRQHandler+0x92>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d11f      	bne.n	8002a76 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a44:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	f043 0202 	orr.w	r2, r3, #2
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fefb 	bl	800286c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d136      	bne.n	8002af0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d109      	bne.n	8002aa0 <I2S_IRQHandler+0xbc>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b80      	cmp	r3, #128	; 0x80
 8002a98:	d102      	bne.n	8002aa0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ff45 	bl	800292a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d122      	bne.n	8002af0 <I2S_IRQHandler+0x10c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d11b      	bne.n	8002af0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ac6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff febe 	bl	800286c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b08:	f7fe f836 	bl	8000b78 <HAL_GetTick>
 8002b0c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b0e:	e018      	b.n	8002b42 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d014      	beq.n	8002b42 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002b18:	f7fe f82e 	bl	8000b78 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d902      	bls.n	8002b2e <I2S_WaitFlagStateUntilTimeout+0x36>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e00f      	b.n	8002b62 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	bf0c      	ite	eq
 8002b52:	2301      	moveq	r3, #1
 8002b54:	2300      	movne	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1d7      	bne.n	8002b10 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a92      	ldr	r2, [pc, #584]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b86:	4b92      	ldr	r3, [pc, #584]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b88:	e001      	b.n	8002b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a8b      	ldr	r2, [pc, #556]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ba4:	4b8a      	ldr	r3, [pc, #552]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ba6:	e001      	b.n	8002bac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ba8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb8:	d004      	beq.n	8002bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8099 	bne.w	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d107      	bne.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f925 	bl	8002e28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f9c8 	bl	8002f88 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d13a      	bne.n	8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d035      	beq.n	8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a6e      	ldr	r2, [pc, #440]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c16:	4b6e      	ldr	r3, [pc, #440]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c18:	e001      	b.n	8002c1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4969      	ldr	r1, [pc, #420]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c26:	428b      	cmp	r3, r1
 8002c28:	d101      	bne.n	8002c2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c2a:	4b69      	ldr	r3, [pc, #420]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c2c:	e001      	b.n	8002c32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f043 0202 	orr.w	r2, r3, #2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fdfa 	bl	800286c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	f040 80c3 	bne.w	8002e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80bd 	beq.w	8002e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a49      	ldr	r2, [pc, #292]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002caa:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cac:	e001      	b.n	8002cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4944      	ldr	r1, [pc, #272]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cba:	428b      	cmp	r3, r1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cbe:	4b44      	ldr	r3, [pc, #272]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cc0:	e001      	b.n	8002cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f043 0204 	orr.w	r2, r3, #4
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fdbc 	bl	800286c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cf4:	e089      	b.n	8002e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d107      	bne.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8be 	bl	8002e8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f8fd 	bl	8002f24 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d12f      	bne.n	8002d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d02a      	beq.n	8002d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d58:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d5a:	e001      	b.n	8002d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4919      	ldr	r1, [pc, #100]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d68:	428b      	cmp	r3, r1
 8002d6a:	d101      	bne.n	8002d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d6c:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d6e:	e001      	b.n	8002d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fd6c 	bl	800286c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d136      	bne.n	8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d031      	beq.n	8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002db4:	e001      	b.n	8002dba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002db6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4902      	ldr	r1, [pc, #8]	; (8002dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dc2:	428b      	cmp	r3, r1
 8002dc4:	d106      	bne.n	8002dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002dc6:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dc8:	e006      	b.n	8002dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002dca:	bf00      	nop
 8002dcc:	40003800 	.word	0x40003800
 8002dd0:	40003400 	.word	0x40003400
 8002dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ddc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fd32 	bl	800286c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e08:	e000      	b.n	8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e0a:	bf00      	nop
}
 8002e0c:	bf00      	nop
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	1c99      	adds	r1, r3, #2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6251      	str	r1, [r2, #36]	; 0x24
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d113      	bne.n	8002e82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ffc9 	bl	8002e14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	1c99      	adds	r1, r3, #2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6251      	str	r1, [r2, #36]	; 0x24
 8002e9e:	8819      	ldrh	r1, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <I2SEx_TxISR_I2SExt+0x90>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <I2SEx_TxISR_I2SExt+0x22>
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <I2SEx_TxISR_I2SExt+0x94>)
 8002eac:	e001      	b.n	8002eb2 <I2SEx_TxISR_I2SExt+0x26>
 8002eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d121      	bne.n	8002f12 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <I2SEx_TxISR_I2SExt+0x90>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d101      	bne.n	8002edc <I2SEx_TxISR_I2SExt+0x50>
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <I2SEx_TxISR_I2SExt+0x94>)
 8002eda:	e001      	b.n	8002ee0 <I2SEx_TxISR_I2SExt+0x54>
 8002edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	490d      	ldr	r1, [pc, #52]	; (8002f1c <I2SEx_TxISR_I2SExt+0x90>)
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	d101      	bne.n	8002ef0 <I2SEx_TxISR_I2SExt+0x64>
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <I2SEx_TxISR_I2SExt+0x94>)
 8002eee:	e001      	b.n	8002ef4 <I2SEx_TxISR_I2SExt+0x68>
 8002ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ef8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff81 	bl	8002e14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40003800 	.word	0x40003800
 8002f20:	40003400 	.word	0x40003400

08002f24 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68d8      	ldr	r0, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	1c99      	adds	r1, r3, #2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f3c:	b282      	uxth	r2, r0
 8002f3e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d113      	bne.n	8002f80 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f66:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff4a 	bl	8002e14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <I2SEx_RxISR_I2SExt+0x90>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <I2SEx_RxISR_I2SExt+0x16>
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <I2SEx_RxISR_I2SExt+0x94>)
 8002f9c:	e001      	b.n	8002fa2 <I2SEx_RxISR_I2SExt+0x1a>
 8002f9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa2:	68d8      	ldr	r0, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	1c99      	adds	r1, r3, #2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fae:	b282      	uxth	r2, r0
 8002fb0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d121      	bne.n	800300e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <I2SEx_RxISR_I2SExt+0x90>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <I2SEx_RxISR_I2SExt+0x50>
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <I2SEx_RxISR_I2SExt+0x94>)
 8002fd6:	e001      	b.n	8002fdc <I2SEx_RxISR_I2SExt+0x54>
 8002fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	490d      	ldr	r1, [pc, #52]	; (8003018 <I2SEx_RxISR_I2SExt+0x90>)
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	d101      	bne.n	8002fec <I2SEx_RxISR_I2SExt+0x64>
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <I2SEx_RxISR_I2SExt+0x94>)
 8002fea:	e001      	b.n	8002ff0 <I2SEx_RxISR_I2SExt+0x68>
 8002fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ff4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff03 	bl	8002e14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40003800 	.word	0x40003800
 800301c:	40003400 	.word	0x40003400

08003020 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	b08f      	sub	sp, #60	; 0x3c
 8003024:	af0a      	add	r7, sp, #40	; 0x28
 8003026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e11d      	b.n	800326e <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800303a:	d008      	beq.n	800304e <HAL_PCD_Init+0x2e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a8d      	ldr	r2, [pc, #564]	; (8003278 <HAL_PCD_Init+0x258>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d003      	beq.n	800304e <HAL_PCD_Init+0x2e>
 8003046:	2187      	movs	r1, #135	; 0x87
 8003048:	488c      	ldr	r0, [pc, #560]	; (800327c <HAL_PCD_Init+0x25c>)
 800304a:	f7fd fc80 	bl	800094e <assert_failed>

  USBx = hpcd->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f005 fff3 	bl	8009054 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2203      	movs	r2, #3
 8003072:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f002 fbb4 	bl	80057fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	687e      	ldr	r6, [r7, #4]
 800309a:	466d      	mov	r5, sp
 800309c:	f106 0410 	add.w	r4, r6, #16
 80030a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80030b0:	1d33      	adds	r3, r6, #4
 80030b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b4:	6838      	ldr	r0, [r7, #0]
 80030b6:	f002 fa8b 	bl	80055d0 <USB_CoreInit>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d0      	b.n	800326e <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 fba2 	bl	800581c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	e04a      	b.n	8003174 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	333d      	adds	r3, #61	; 0x3d
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	333c      	adds	r3, #60	; 0x3c
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	b298      	uxth	r0, r3
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3344      	adds	r3, #68	; 0x44
 800311a:	4602      	mov	r2, r0
 800311c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	3340      	adds	r3, #64	; 0x40
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3348      	adds	r3, #72	; 0x48
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	334c      	adds	r3, #76	; 0x4c
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3354      	adds	r3, #84	; 0x54
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	3301      	adds	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d3af      	bcc.n	80030de <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	e044      	b.n	800320e <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	3301      	adds	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d3b5      	bcc.n	8003184 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	687e      	ldr	r6, [r7, #4]
 8003220:	466d      	mov	r5, sp
 8003222:	f106 0410 	add.w	r4, r6, #16
 8003226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003232:	e885 0003 	stmia.w	r5, {r0, r1}
 8003236:	1d33      	adds	r3, r6, #4
 8003238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323a:	6838      	ldr	r0, [r7, #0]
 800323c:	f002 fb3a 	bl	80058b4 <USB_DevInit>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e00d      	b.n	800326e <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fc89 	bl	8006b7e <USB_DevDisconnect>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003276:	bf00      	nop
 8003278:	40040000 	.word	0x40040000
 800327c:	080097d4 	.word	0x080097d4

08003280 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_PCD_Start+0x1c>
 8003298:	2302      	movs	r3, #2
 800329a:	e020      	b.n	80032de <HAL_PCD_Start+0x5e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d109      	bne.n	80032c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d005      	beq.n	80032c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f002 fa87 	bl	80057d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 fc34 	bl	8006b3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032e6:	b590      	push	{r4, r7, lr}
 80032e8:	b08d      	sub	sp, #52	; 0x34
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f003 fcf2 	bl	8006ce6 <USB_GetMode>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f040 848a 	bne.w	8003c1e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 fc56 	bl	8006bc0 <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8480 	beq.w	8003c1c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f003 fc43 	bl	8006bc0 <USB_ReadInterrupts>
 800333a:	4603      	mov	r3, r0
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d107      	bne.n	8003354 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f002 0202 	and.w	r2, r2, #2
 8003352:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f003 fc31 	bl	8006bc0 <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b10      	cmp	r3, #16
 8003366:	d161      	bne.n	800342c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0210 	bic.w	r2, r2, #16
 8003376:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f003 020f 	and.w	r2, r3, #15
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	3304      	adds	r3, #4
 8003396:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	0c5b      	lsrs	r3, r3, #17
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d124      	bne.n	80033ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d035      	beq.n	800341c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	6a38      	ldr	r0, [r7, #32]
 80033c4:	f003 fa68 	bl	8006898 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d4:	441a      	add	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e6:	441a      	add	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	621a      	str	r2, [r3, #32]
 80033ec:	e016      	b.n	800341c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	0c5b      	lsrs	r3, r3, #17
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d110      	bne.n	800341c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003400:	2208      	movs	r2, #8
 8003402:	4619      	mov	r1, r3
 8003404:	6a38      	ldr	r0, [r7, #32]
 8003406:	f003 fa47 	bl	8006898 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003416:	441a      	add	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0210 	orr.w	r2, r2, #16
 800342a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f003 fbc5 	bl	8006bc0 <USB_ReadInterrupts>
 8003436:	4603      	mov	r3, r0
 8003438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003440:	f040 80a7 	bne.w	8003592 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f003 fbca 	bl	8006be6 <USB_ReadDevAllOutEpInterrupt>
 8003452:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003454:	e099      	b.n	800358a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 808e 	beq.w	800357e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f003 fbee 	bl	8006c4e <USB_ReadDevOutEPInterrupt>
 8003472:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00c      	beq.n	8003498 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	2301      	movs	r3, #1
 800348e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fec2 	bl	800421c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00c      	beq.n	80034bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ae:	461a      	mov	r2, r3
 80034b0:	2308      	movs	r3, #8
 80034b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 ff98 	bl	80043ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	461a      	mov	r2, r3
 80034d4:	2310      	movs	r3, #16
 80034d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d030      	beq.n	8003544 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d109      	bne.n	8003502 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003500:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	78db      	ldrb	r3, [r3, #3]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d108      	bne.n	8003532 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2200      	movs	r2, #0
 8003524:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f005 fe97 	bl	8009260 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353e:	461a      	mov	r2, r3
 8003540:	2302      	movs	r3, #2
 8003542:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355a:	461a      	mov	r2, r3
 800355c:	2320      	movs	r3, #32
 800355e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003576:	461a      	mov	r2, r3
 8003578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800357c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	3301      	adds	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	f47f af62 	bne.w	8003456 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f003 fb12 	bl	8006bc0 <USB_ReadInterrupts>
 800359c:	4603      	mov	r3, r0
 800359e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035a6:	f040 80db 	bne.w	8003760 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 fb33 	bl	8006c1a <USB_ReadDevAllInEpInterrupt>
 80035b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035ba:	e0cd      	b.n	8003758 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80c2 	beq.w	800374c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 fb59 	bl	8006c8a <USB_ReadDevInEPInterrupt>
 80035d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d057      	beq.n	8003694 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	2201      	movs	r2, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69f9      	ldr	r1, [r7, #28]
 8003600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003604:	4013      	ands	r3, r2
 8003606:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003614:	461a      	mov	r2, r3
 8003616:	2301      	movs	r3, #1
 8003618:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d132      	bne.n	8003688 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	334c      	adds	r3, #76	; 0x4c
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4403      	add	r3, r0
 8003642:	3348      	adds	r3, #72	; 0x48
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4419      	add	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4403      	add	r3, r0
 8003656:	334c      	adds	r3, #76	; 0x4c
 8003658:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	2b00      	cmp	r3, #0
 800365e:	d113      	bne.n	8003688 <HAL_PCD_IRQHandler+0x3a2>
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3354      	adds	r3, #84	; 0x54
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003680:	461a      	mov	r2, r3
 8003682:	2101      	movs	r1, #1
 8003684:	f003 fb60 	bl	8006d48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	b2db      	uxtb	r3, r3
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f005 fd61 	bl	8009156 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036aa:	461a      	mov	r2, r3
 80036ac:	2308      	movs	r3, #8
 80036ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	461a      	mov	r2, r3
 80036c8:	2310      	movs	r3, #16
 80036ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e2:	461a      	mov	r2, r3
 80036e4:	2340      	movs	r3, #64	; 0x40
 80036e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d023      	beq.n	800373a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f4:	6a38      	ldr	r0, [r7, #32]
 80036f6:	f002 fa41 	bl	8005b7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	3338      	adds	r3, #56	; 0x38
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	3304      	adds	r3, #4
 800370c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	78db      	ldrb	r3, [r3, #3]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2200      	movs	r2, #0
 800371a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	b2db      	uxtb	r3, r3
 8003720:	4619      	mov	r1, r3
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f005 fdae 	bl	8009284 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003734:	461a      	mov	r2, r3
 8003736:	2302      	movs	r3, #2
 8003738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fcdb 	bl	8004102 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	3301      	adds	r3, #1
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	f47f af2e 	bne.w	80035bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f003 fa2b 	bl	8006bc0 <USB_ReadInterrupts>
 800376a:	4603      	mov	r3, r0
 800376c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003774:	d122      	bne.n	80037bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003790:	2b01      	cmp	r3, #1
 8003792:	d108      	bne.n	80037a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800379c:	2100      	movs	r1, #0
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fec2 	bl	8004528 <HAL_PCDEx_LPM_Callback>
 80037a4:	e002      	b.n	80037ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f005 fd4c 	bl	8009244 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 f9fd 	bl	8006bc0 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d0:	d112      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f005 fd08 	bl	80091f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f003 f9df 	bl	8006bc0 <USB_ReadInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380c:	f040 80b7 	bne.w	800397e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2110      	movs	r1, #16
 800382a:	4618      	mov	r0, r3
 800382c:	f002 f9a6 	bl	8005b7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003830:	2300      	movs	r3, #0
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003834:	e046      	b.n	80038c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003842:	461a      	mov	r2, r3
 8003844:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003848:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003864:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003868:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	461a      	mov	r2, r3
 8003878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800387c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388e:	0151      	lsls	r1, r2, #5
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	440a      	add	r2, r1
 8003894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800389c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	3301      	adds	r3, #1
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d3b3      	bcc.n	8003836 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fa:	f043 030b 	orr.w	r3, r3, #11
 80038fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003910:	f043 030b 	orr.w	r3, r3, #11
 8003914:	6453      	str	r3, [r2, #68]	; 0x44
 8003916:	e015      	b.n	8003944 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003926:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800392a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800392e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393e:	f043 030b 	orr.w	r3, r3, #11
 8003942:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003952:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003956:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003968:	461a      	mov	r2, r3
 800396a:	f003 f9ed 	bl	8006d48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800397c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f003 f91c 	bl	8006bc0 <USB_ReadInterrupts>
 8003988:	4603      	mov	r3, r0
 800398a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800398e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003992:	d124      	bne.n	80039de <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f003 f9b2 	bl	8006d02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 f967 	bl	8005c76 <USB_GetDevSpeed>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681c      	ldr	r4, [r3, #0]
 80039b4:	f001 fb8c 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80039b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	4620      	mov	r0, r4
 80039c4:	f001 fe66 	bl	8005694 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f005 fbec 	bl	80091a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 f8ec 	bl	8006bc0 <USB_ReadInterrupts>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d10a      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f005 fbc9 	bl	800918a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f002 0208 	and.w	r2, r2, #8
 8003a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 f8d7 	bl	8006bc0 <USB_ReadInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b80      	cmp	r3, #128	; 0x80
 8003a1a:	d122      	bne.n	8003a62 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a28:	2301      	movs	r3, #1
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2c:	e014      	b.n	8003a58 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fb27 	bl	80040a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	3301      	adds	r3, #1
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d3e5      	bcc.n	8003a2e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f003 f8aa 	bl	8006bc0 <USB_ReadInterrupts>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a76:	d13b      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a78:	2301      	movs	r3, #1
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7c:	e02b      	b.n	8003ad6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3340      	adds	r3, #64	; 0x40
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d115      	bne.n	8003ad0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003aa4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	da12      	bge.n	8003ad0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	333f      	adds	r3, #63	; 0x3f
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fae8 	bl	80040a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3ce      	bcc.n	8003a7e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f003 f863 	bl	8006bc0 <USB_ReadInterrupts>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b04:	d155      	bne.n	8003bb2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b06:	2301      	movs	r3, #1
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	e045      	b.n	8003b98 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d12e      	bne.n	8003b92 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da2b      	bge.n	8003b92 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d121      	bne.n	8003b92 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b8e:	6053      	str	r3, [r2, #4]
            break;
 8003b90:	e007      	b.n	8003ba2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	3301      	adds	r3, #1
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3b4      	bcc.n	8003b0c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 f802 	bl	8006bc0 <USB_ReadInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d10a      	bne.n	8003bde <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f005 fb6d 	bl	80092a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 ffec 	bl	8006bc0 <USB_ReadInterrupts>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d115      	bne.n	8003c1e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f005 fb5d 	bl	80092c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	e000      	b.n	8003c1e <HAL_PCD_IRQHandler+0x938>
      return;
 8003c1c:	bf00      	nop
    }
  }
}
 8003c1e:	3734      	adds	r7, #52	; 0x34
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd90      	pop	{r4, r7, pc}

08003c24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_PCD_SetAddress+0x1a>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e013      	b.n	8003c66 <HAL_PCD_SetAddress+0x42>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	4611      	mov	r1, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f002 ff4a 	bl	8006af0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	4608      	mov	r0, r1
 8003c78:	4611      	mov	r1, r2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	70fb      	strb	r3, [r7, #3]
 8003c80:	460b      	mov	r3, r1
 8003c82:	803b      	strh	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da0f      	bge.n	8003cb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 020f 	and.w	r2, r3, #15
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	3338      	adds	r3, #56	; 0x38
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	705a      	strb	r2, [r3, #1]
 8003cb2:	e00f      	b.n	8003cd4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	f003 020f 	and.w	r2, r3, #15
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	3304      	adds	r3, #4
 8003ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ce0:	883a      	ldrh	r2, [r7, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	78ba      	ldrb	r2, [r7, #2]
 8003cea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cfe:	78bb      	ldrb	r3, [r7, #2]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d102      	bne.n	8003d0a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_PCD_EP_Open+0xaa>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e00e      	b.n	8003d36 <HAL_PCD_EP_Open+0xc8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68f9      	ldr	r1, [r7, #12]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 ffca 	bl	8005cc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d34:	7afb      	ldrb	r3, [r7, #11]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da0f      	bge.n	8003d72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	f003 020f 	and.w	r2, r3, #15
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	3338      	adds	r3, #56	; 0x38
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	3304      	adds	r3, #4
 8003d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	705a      	strb	r2, [r3, #1]
 8003d70:	e00f      	b.n	8003d92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	3304      	adds	r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_PCD_EP_Close+0x6e>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e00e      	b.n	8003dca <HAL_PCD_EP_Close+0x8c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68f9      	ldr	r1, [r7, #12]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 f808 	bl	8005dd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	460b      	mov	r3, r1
 8003de0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de2:	7afb      	ldrb	r3, [r7, #11]
 8003de4:	f003 020f 	and.w	r2, r3, #15
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2200      	movs	r2, #0
 8003e12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e14:	7afb      	ldrb	r3, [r7, #11]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d102      	bne.n	8003e2e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	6979      	ldr	r1, [r7, #20]
 8003e46:	f002 fae7 	bl	8006418 <USB_EP0StartXfer>
 8003e4a:	e008      	b.n	8003e5e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	6979      	ldr	r1, [r7, #20]
 8003e5a:	f002 f895 	bl	8005f88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea8:	7afb      	ldrb	r3, [r7, #11]
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	3338      	adds	r3, #56	; 0x38
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed8:	7afb      	ldrb	r3, [r7, #11]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d102      	bne.n	8003ef2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	6979      	ldr	r1, [r7, #20]
 8003f0a:	f002 fa85 	bl	8006418 <USB_EP0StartXfer>
 8003f0e:	e008      	b.n	8003f22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	f002 f833 	bl	8005f88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	f003 020f 	and.w	r2, r3, #15
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d901      	bls.n	8003f4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e050      	b.n	8003fec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da0f      	bge.n	8003f72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	f003 020f 	and.w	r2, r3, #15
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	3338      	adds	r3, #56	; 0x38
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	3304      	adds	r3, #4
 8003f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	705a      	strb	r2, [r3, #1]
 8003f70:	e00d      	b.n	8003f8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	3304      	adds	r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_PCD_EP_SetStall+0x82>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e01e      	b.n	8003fec <HAL_PCD_EP_SetStall+0xc0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f002 fcc3 	bl	8006948 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	b2d9      	uxtb	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f002 feb3 	bl	8006d48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	f003 020f 	and.w	r2, r3, #15
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d901      	bls.n	8004012 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e042      	b.n	8004098 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004016:	2b00      	cmp	r3, #0
 8004018:	da0f      	bge.n	800403a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	f003 020f 	and.w	r2, r3, #15
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	3338      	adds	r3, #56	; 0x38
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	3304      	adds	r3, #4
 8004030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	705a      	strb	r2, [r3, #1]
 8004038:	e00f      	b.n	800405a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	f003 020f 	and.w	r2, r3, #15
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	b2da      	uxtb	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_PCD_EP_ClrStall+0x86>
 8004076:	2302      	movs	r3, #2
 8004078:	e00e      	b.n	8004098 <HAL_PCD_EP_ClrStall+0xa4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	4618      	mov	r0, r3
 800408a:	f002 fccb 	bl	8006a24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da0c      	bge.n	80040ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	f003 020f 	and.w	r2, r3, #15
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	3338      	adds	r3, #56	; 0x38
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4413      	add	r3, r2
 80040c8:	3304      	adds	r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e00c      	b.n	80040e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68f9      	ldr	r1, [r7, #12]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f002 faea 	bl	80066c8 <USB_EPStopXfer>
 80040f4:	4603      	mov	r3, r0
 80040f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040f8:	7afb      	ldrb	r3, [r7, #11]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b08a      	sub	sp, #40	; 0x28
 8004106:	af02      	add	r7, sp, #8
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	3338      	adds	r3, #56	; 0x38
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	429a      	cmp	r2, r3
 8004134:	d901      	bls.n	800413a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06c      	b.n	8004214 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	429a      	cmp	r2, r3
 800414e:	d902      	bls.n	8004156 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3303      	adds	r3, #3
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800415e:	e02b      	b.n	80041b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	429a      	cmp	r2, r3
 8004174:	d902      	bls.n	800417c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3303      	adds	r3, #3
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6919      	ldr	r1, [r3, #16]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004194:	b2db      	uxtb	r3, r3
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	4603      	mov	r3, r0
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f002 fb3e 	bl	800681c <USB_WritePacket>

    ep->xfer_buff  += len;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	441a      	add	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	441a      	add	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d809      	bhi.n	80041e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d203      	bcs.n	80041e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1be      	bne.n	8004160 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d811      	bhi.n	8004212 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	2201      	movs	r2, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	43db      	mvns	r3, r3
 8004208:	6939      	ldr	r1, [r7, #16]
 800420a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800420e:	4013      	ands	r3, r2
 8004210:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3720      	adds	r7, #32
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	333c      	adds	r3, #60	; 0x3c
 8004234:	3304      	adds	r3, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d17b      	bne.n	800434a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d015      	beq.n	8004288 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	4a61      	ldr	r2, [pc, #388]	; (80043e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	f240 80b9 	bls.w	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80b3 	beq.w	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427e:	461a      	mov	r2, r3
 8004280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004284:	6093      	str	r3, [r2, #8]
 8004286:	e0a7      	b.n	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	461a      	mov	r2, r3
 80042a0:	2320      	movs	r3, #32
 80042a2:	6093      	str	r3, [r2, #8]
 80042a4:	e098      	b.n	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f040 8093 	bne.w	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	4a4b      	ldr	r2, [pc, #300]	; (80043e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d90f      	bls.n	80042da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d0:	461a      	mov	r2, r3
 80042d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d6:	6093      	str	r3, [r2, #8]
 80042d8:	e07e      	b.n	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	3304      	adds	r3, #4
 80042ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	0159      	lsls	r1, r3, #5
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	440b      	add	r3, r1
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004306:	1ad2      	subs	r2, r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d114      	bne.n	800433c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004324:	461a      	mov	r2, r3
 8004326:	2101      	movs	r1, #1
 8004328:	f002 fd0e 	bl	8006d48 <USB_EP0_OutStart>
 800432c:	e006      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	441a      	add	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f004 feec 	bl	8009120 <HAL_PCD_DataOutStageCallback>
 8004348:	e046      	b.n	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	4a26      	ldr	r2, [pc, #152]	; (80043e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d124      	bne.n	800439c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	461a      	mov	r2, r3
 800436a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436e:	6093      	str	r3, [r2, #8]
 8004370:	e032      	b.n	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	2320      	movs	r3, #32
 800438c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f004 fec3 	bl	8009120 <HAL_PCD_DataOutStageCallback>
 800439a:	e01d      	b.n	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d114      	bne.n	80043cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	4613      	mov	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043c4:	461a      	mov	r2, r3
 80043c6:	2100      	movs	r1, #0
 80043c8:	f002 fcbe 	bl	8006d48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	4619      	mov	r1, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f004 fea4 	bl	8009120 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	4f54300a 	.word	0x4f54300a
 80043e8:	4f54310a 	.word	0x4f54310a

080043ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	333c      	adds	r3, #60	; 0x3c
 8004404:	3304      	adds	r3, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a15      	ldr	r2, [pc, #84]	; (8004474 <PCD_EP_OutSetupPacket_int+0x88>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d90e      	bls.n	8004440 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	461a      	mov	r2, r3
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f004 fe5b 	bl	80090fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <PCD_EP_OutSetupPacket_int+0x88>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d90c      	bls.n	8004468 <PCD_EP_OutSetupPacket_int+0x7c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d108      	bne.n	8004468 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004460:	461a      	mov	r2, r3
 8004462:	2101      	movs	r1, #1
 8004464:	f002 fc70 	bl	8006d48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	4f54300a 	.word	0x4f54300a

08004478 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	70fb      	strb	r3, [r7, #3]
 8004484:	4613      	mov	r3, r2
 8004486:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004496:	883b      	ldrh	r3, [r7, #0]
 8004498:	0419      	lsls	r1, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
 80044a4:	e028      	b.n	80044f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4413      	add	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	e00d      	b.n	80044d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	3340      	adds	r3, #64	; 0x40
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	4413      	add	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	3301      	adds	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	3b01      	subs	r3, #1
 80044dc:	429a      	cmp	r2, r3
 80044de:	d3ec      	bcc.n	80044ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044e0:	883b      	ldrh	r3, [r7, #0]
 80044e2:	0418      	lsls	r0, r3, #16
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6819      	ldr	r1, [r3, #0]
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	4302      	orrs	r2, r0
 80044f0:	3340      	adds	r3, #64	; 0x40
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e314      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b0f      	cmp	r3, #15
 8004558:	d903      	bls.n	8004562 <HAL_RCC_OscConfig+0x22>
 800455a:	21e6      	movs	r1, #230	; 0xe6
 800455c:	4897      	ldr	r0, [pc, #604]	; (80047bc <HAL_RCC_OscConfig+0x27c>)
 800455e:	f7fc f9f6 	bl	800094e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8088 	beq.w	8004680 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <HAL_RCC_OscConfig+0x54>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004580:	d008      	beq.n	8004594 <HAL_RCC_OscConfig+0x54>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800458a:	d003      	beq.n	8004594 <HAL_RCC_OscConfig+0x54>
 800458c:	21eb      	movs	r1, #235	; 0xeb
 800458e:	488b      	ldr	r0, [pc, #556]	; (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004590:	f7fc f9dd 	bl	800094e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004594:	4b8a      	ldr	r3, [pc, #552]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b04      	cmp	r3, #4
 800459e:	d00c      	beq.n	80045ba <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a0:	4b87      	ldr	r3, [pc, #540]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d112      	bne.n	80045d2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ac:	4b84      	ldr	r3, [pc, #528]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b8:	d10b      	bne.n	80045d2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ba:	4b81      	ldr	r3, [pc, #516]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d05b      	beq.n	800467e <HAL_RCC_OscConfig+0x13e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d157      	bne.n	800467e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e2d4      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0xaa>
 80045dc:	4b78      	ldr	r3, [pc, #480]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a77      	ldr	r2, [pc, #476]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80045e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	e01d      	b.n	8004626 <HAL_RCC_OscConfig+0xe6>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f2:	d10c      	bne.n	800460e <HAL_RCC_OscConfig+0xce>
 80045f4:	4b72      	ldr	r3, [pc, #456]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a71      	ldr	r2, [pc, #452]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80045fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a6e      	ldr	r2, [pc, #440]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	e00b      	b.n	8004626 <HAL_RCC_OscConfig+0xe6>
 800460e:	4b6c      	ldr	r3, [pc, #432]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6b      	ldr	r2, [pc, #428]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4b69      	ldr	r3, [pc, #420]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a68      	ldr	r2, [pc, #416]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004624:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d013      	beq.n	8004656 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fc faa3 	bl	8000b78 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004636:	f7fc fa9f 	bl	8000b78 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b64      	cmp	r3, #100	; 0x64
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e299      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004648:	4b5d      	ldr	r3, [pc, #372]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0xf6>
 8004654:	e014      	b.n	8004680 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fc fa8f 	bl	8000b78 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800465e:	f7fc fa8b 	bl	8000b78 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b64      	cmp	r3, #100	; 0x64
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e285      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x11e>
 800467c:	e000      	b.n	8004680 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d079      	beq.n	8004780 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_OscConfig+0x166>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d004      	beq.n	80046a6 <HAL_RCC_OscConfig+0x166>
 800469c:	f240 111d 	movw	r1, #285	; 0x11d
 80046a0:	4846      	ldr	r0, [pc, #280]	; (80047bc <HAL_RCC_OscConfig+0x27c>)
 80046a2:	f7fc f954 	bl	800094e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b1f      	cmp	r3, #31
 80046ac:	d904      	bls.n	80046b8 <HAL_RCC_OscConfig+0x178>
 80046ae:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80046b2:	4842      	ldr	r0, [pc, #264]	; (80047bc <HAL_RCC_OscConfig+0x27c>)
 80046b4:	f7fc f94b 	bl	800094e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046b8:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 030c 	and.w	r3, r3, #12
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c4:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d11c      	bne.n	800470a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d0:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d116      	bne.n	800470a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046dc:	4b38      	ldr	r3, [pc, #224]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_OscConfig+0x1b4>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e243      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f4:	4b32      	ldr	r3, [pc, #200]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	492f      	ldr	r1, [pc, #188]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004708:	e03a      	b.n	8004780 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d020      	beq.n	8004754 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004712:	4b2c      	ldr	r3, [pc, #176]	; (80047c4 <HAL_RCC_OscConfig+0x284>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fc fa2e 	bl	8000b78 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004720:	f7fc fa2a 	bl	8000b78 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e224      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	491c      	ldr	r1, [pc, #112]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
 8004752:	e015      	b.n	8004780 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x284>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fc fa0d 	bl	8000b78 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004762:	f7fc fa09 	bl	8000b78 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e203      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004774:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_OscConfig+0x280>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d045      	beq.n	8004818 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_RCC_OscConfig+0x266>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d004      	beq.n	80047a6 <HAL_RCC_OscConfig+0x266>
 800479c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80047a0:	4806      	ldr	r0, [pc, #24]	; (80047bc <HAL_RCC_OscConfig+0x27c>)
 80047a2:	f7fc f8d4 	bl	800094e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01e      	beq.n	80047ec <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x288>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fc f9e0 	bl	8000b78 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ba:	e010      	b.n	80047de <HAL_RCC_OscConfig+0x29e>
 80047bc:	0800980c 	.word	0x0800980c
 80047c0:	40023800 	.word	0x40023800
 80047c4:	42470000 	.word	0x42470000
 80047c8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fc f9d4 	bl	8000b78 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e1ce      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	4b5e      	ldr	r3, [pc, #376]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80047e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x28c>
 80047ea:	e015      	b.n	8004818 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ec:	4b5b      	ldr	r3, [pc, #364]	; (800495c <HAL_RCC_OscConfig+0x41c>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f2:	f7fc f9c1 	bl	8000b78 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047fa:	f7fc f9bd 	bl	8000b78 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e1b7      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480c:	4b52      	ldr	r3, [pc, #328]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 800480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80b0 	beq.w	8004986 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <HAL_RCC_OscConfig+0x30c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d008      	beq.n	800484c <HAL_RCC_OscConfig+0x30c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b05      	cmp	r3, #5
 8004840:	d004      	beq.n	800484c <HAL_RCC_OscConfig+0x30c>
 8004842:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004846:	4846      	ldr	r0, [pc, #280]	; (8004960 <HAL_RCC_OscConfig+0x420>)
 8004848:	f7fc f881 	bl	800094e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484c:	4b42      	ldr	r3, [pc, #264]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10f      	bne.n	8004878 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	2300      	movs	r3, #0
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	4b3e      	ldr	r3, [pc, #248]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	4a3d      	ldr	r2, [pc, #244]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004866:	6413      	str	r3, [r2, #64]	; 0x40
 8004868:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004874:	2301      	movs	r3, #1
 8004876:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	4b3a      	ldr	r3, [pc, #232]	; (8004964 <HAL_RCC_OscConfig+0x424>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d118      	bne.n	80048b6 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004884:	4b37      	ldr	r3, [pc, #220]	; (8004964 <HAL_RCC_OscConfig+0x424>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a36      	ldr	r2, [pc, #216]	; (8004964 <HAL_RCC_OscConfig+0x424>)
 800488a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004890:	f7fc f972 	bl	8000b78 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004898:	f7fc f96e 	bl	8000b78 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e168      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_RCC_OscConfig+0x424>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d106      	bne.n	80048cc <HAL_RCC_OscConfig+0x38c>
 80048be:	4b26      	ldr	r3, [pc, #152]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a25      	ldr	r2, [pc, #148]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ca:	e01c      	b.n	8004906 <HAL_RCC_OscConfig+0x3c6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b05      	cmp	r3, #5
 80048d2:	d10c      	bne.n	80048ee <HAL_RCC_OscConfig+0x3ae>
 80048d4:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4a1f      	ldr	r2, [pc, #124]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80048da:	f043 0304 	orr.w	r3, r3, #4
 80048de:	6713      	str	r3, [r2, #112]	; 0x70
 80048e0:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6713      	str	r3, [r2, #112]	; 0x70
 80048ec:	e00b      	b.n	8004906 <HAL_RCC_OscConfig+0x3c6>
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a19      	ldr	r2, [pc, #100]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	4b17      	ldr	r3, [pc, #92]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	4a16      	ldr	r2, [pc, #88]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d015      	beq.n	800493a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7fc f933 	bl	8000b78 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004914:	e00a      	b.n	800492c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f7fc f92f 	bl	8000b78 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f241 3288 	movw	r2, #5000	; 0x1388
 8004924:	4293      	cmp	r3, r2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e127      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <HAL_RCC_OscConfig+0x418>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ee      	beq.n	8004916 <HAL_RCC_OscConfig+0x3d6>
 8004938:	e01c      	b.n	8004974 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493a:	f7fc f91d 	bl	8000b78 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004940:	e012      	b.n	8004968 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fc f919 	bl	8000b78 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d909      	bls.n	8004968 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e111      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
 8004958:	40023800 	.word	0x40023800
 800495c:	42470e80 	.word	0x42470e80
 8004960:	0800980c 	.word	0x0800980c
 8004964:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004968:	4b86      	ldr	r3, [pc, #536]	; (8004b84 <HAL_RCC_OscConfig+0x644>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e6      	bne.n	8004942 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d105      	bne.n	8004986 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497a:	4b82      	ldr	r3, [pc, #520]	; (8004b84 <HAL_RCC_OscConfig+0x644>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	4a81      	ldr	r2, [pc, #516]	; (8004b84 <HAL_RCC_OscConfig+0x644>)
 8004980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004984:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00c      	beq.n	80049a8 <HAL_RCC_OscConfig+0x468>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d008      	beq.n	80049a8 <HAL_RCC_OscConfig+0x468>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d004      	beq.n	80049a8 <HAL_RCC_OscConfig+0x468>
 800499e:	f240 11cd 	movw	r1, #461	; 0x1cd
 80049a2:	4879      	ldr	r0, [pc, #484]	; (8004b88 <HAL_RCC_OscConfig+0x648>)
 80049a4:	f7fb ffd3 	bl	800094e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80e4 	beq.w	8004b7a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049b2:	4b74      	ldr	r3, [pc, #464]	; (8004b84 <HAL_RCC_OscConfig+0x644>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	f000 80a5 	beq.w	8004b0a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	f040 8089 	bne.w	8004adc <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_RCC_OscConfig+0x4a6>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049da:	d004      	beq.n	80049e6 <HAL_RCC_OscConfig+0x4a6>
 80049dc:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80049e0:	4869      	ldr	r0, [pc, #420]	; (8004b88 <HAL_RCC_OscConfig+0x648>)
 80049e2:	f7fb ffb4 	bl	800094e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	2b3f      	cmp	r3, #63	; 0x3f
 80049ec:	d904      	bls.n	80049f8 <HAL_RCC_OscConfig+0x4b8>
 80049ee:	f240 11d7 	movw	r1, #471	; 0x1d7
 80049f2:	4865      	ldr	r0, [pc, #404]	; (8004b88 <HAL_RCC_OscConfig+0x648>)
 80049f4:	f7fb ffab 	bl	800094e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2b31      	cmp	r3, #49	; 0x31
 80049fe:	d904      	bls.n	8004a0a <HAL_RCC_OscConfig+0x4ca>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004a08:	d904      	bls.n	8004a14 <HAL_RCC_OscConfig+0x4d4>
 8004a0a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004a0e:	485e      	ldr	r0, [pc, #376]	; (8004b88 <HAL_RCC_OscConfig+0x648>)
 8004a10:	f7fb ff9d 	bl	800094e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d010      	beq.n	8004a3e <HAL_RCC_OscConfig+0x4fe>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d00c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x4fe>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	2b06      	cmp	r3, #6
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_OscConfig+0x4fe>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d004      	beq.n	8004a3e <HAL_RCC_OscConfig+0x4fe>
 8004a34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004a38:	4853      	ldr	r0, [pc, #332]	; (8004b88 <HAL_RCC_OscConfig+0x648>)
 8004a3a:	f7fb ff88 	bl	800094e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d903      	bls.n	8004a4e <HAL_RCC_OscConfig+0x50e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	2b0f      	cmp	r3, #15
 8004a4c:	d904      	bls.n	8004a58 <HAL_RCC_OscConfig+0x518>
 8004a4e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004a52:	484d      	ldr	r0, [pc, #308]	; (8004b88 <HAL_RCC_OscConfig+0x648>)
 8004a54:	f7fb ff7b 	bl	800094e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a58:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <HAL_RCC_OscConfig+0x64c>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5e:	f7fc f88b 	bl	8000b78 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a66:	f7fc f887 	bl	8000b78 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e081      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a78:	4b42      	ldr	r3, [pc, #264]	; (8004b84 <HAL_RCC_OscConfig+0x644>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f0      	bne.n	8004a66 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	019b      	lsls	r3, r3, #6
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	041b      	lsls	r3, r3, #16
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	061b      	lsls	r3, r3, #24
 8004aa8:	4936      	ldr	r1, [pc, #216]	; (8004b84 <HAL_RCC_OscConfig+0x644>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aae:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <HAL_RCC_OscConfig+0x64c>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7fc f860 	bl	8000b78 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fc f85c 	bl	8000b78 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e056      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ace:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <HAL_RCC_OscConfig+0x644>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x57c>
 8004ada:	e04e      	b.n	8004b7a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <HAL_RCC_OscConfig+0x64c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fc f849 	bl	8000b78 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aea:	f7fc f845 	bl	8000b78 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e03f      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afc:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <HAL_RCC_OscConfig+0x644>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <HAL_RCC_OscConfig+0x5aa>
 8004b08:	e037      	b.n	8004b7a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e032      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b16:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <HAL_RCC_OscConfig+0x644>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d028      	beq.n	8004b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d121      	bne.n	8004b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d11a      	bne.n	8004b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b46:	4013      	ands	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d111      	bne.n	8004b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d001      	beq.n	8004b7a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40023800 	.word	0x40023800
 8004b88:	0800980c 	.word	0x0800980c
 8004b8c:	42470060 	.word	0x42470060

08004b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e174      	b.n	8004e8e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x24>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b0f      	cmp	r3, #15
 8004bb2:	d904      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x2e>
 8004bb4:	f240 215a 	movw	r1, #602	; 0x25a
 8004bb8:	487b      	ldr	r0, [pc, #492]	; (8004da8 <HAL_RCC_ClockConfig+0x218>)
 8004bba:	f7fb fec8 	bl	800094e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d019      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x68>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d016      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x68>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d013      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x68>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d010      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x68>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d00d      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x68>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x68>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d007      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x68>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b07      	cmp	r3, #7
 8004bec:	d004      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x68>
 8004bee:	f240 215b 	movw	r1, #603	; 0x25b
 8004bf2:	486d      	ldr	r0, [pc, #436]	; (8004da8 <HAL_RCC_ClockConfig+0x218>)
 8004bf4:	f7fb feab 	bl	800094e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b6c      	ldr	r3, [pc, #432]	; (8004dac <HAL_RCC_ClockConfig+0x21c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d90c      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b69      	ldr	r3, [pc, #420]	; (8004dac <HAL_RCC_ClockConfig+0x21c>)
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0e:	4b67      	ldr	r3, [pc, #412]	; (8004dac <HAL_RCC_ClockConfig+0x21c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e136      	b.n	8004e8e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d049      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c38:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4a5c      	ldr	r2, [pc, #368]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c50:	4b57      	ldr	r3, [pc, #348]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4a56      	ldr	r2, [pc, #344]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d024      	beq.n	8004cae <HAL_RCC_ClockConfig+0x11e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b80      	cmp	r3, #128	; 0x80
 8004c6a:	d020      	beq.n	8004cae <HAL_RCC_ClockConfig+0x11e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b90      	cmp	r3, #144	; 0x90
 8004c72:	d01c      	beq.n	8004cae <HAL_RCC_ClockConfig+0x11e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2ba0      	cmp	r3, #160	; 0xa0
 8004c7a:	d018      	beq.n	8004cae <HAL_RCC_ClockConfig+0x11e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2bb0      	cmp	r3, #176	; 0xb0
 8004c82:	d014      	beq.n	8004cae <HAL_RCC_ClockConfig+0x11e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2bc0      	cmp	r3, #192	; 0xc0
 8004c8a:	d010      	beq.n	8004cae <HAL_RCC_ClockConfig+0x11e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2bd0      	cmp	r3, #208	; 0xd0
 8004c92:	d00c      	beq.n	8004cae <HAL_RCC_ClockConfig+0x11e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2be0      	cmp	r3, #224	; 0xe0
 8004c9a:	d008      	beq.n	8004cae <HAL_RCC_ClockConfig+0x11e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2bf0      	cmp	r3, #240	; 0xf0
 8004ca2:	d004      	beq.n	8004cae <HAL_RCC_ClockConfig+0x11e>
 8004ca4:	f240 217e 	movw	r1, #638	; 0x27e
 8004ca8:	483f      	ldr	r0, [pc, #252]	; (8004da8 <HAL_RCC_ClockConfig+0x218>)
 8004caa:	f7fb fe50 	bl	800094e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cae:	4b40      	ldr	r3, [pc, #256]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	493d      	ldr	r1, [pc, #244]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d059      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x166>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d00c      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x166>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x166>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d004      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x166>
 8004cec:	f240 2185 	movw	r1, #645	; 0x285
 8004cf0:	482d      	ldr	r0, [pc, #180]	; (8004da8 <HAL_RCC_ClockConfig+0x218>)
 8004cf2:	f7fb fe2c 	bl	800094e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d119      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0bf      	b.n	8004e8e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0af      	b.n	8004e8e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0a7      	b.n	8004e8e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4919      	ldr	r1, [pc, #100]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d50:	f7fb ff12 	bl	8000b78 <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fb ff0e 	bl	8000b78 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e08f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <HAL_RCC_ClockConfig+0x220>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 020c 	and.w	r2, r3, #12
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1eb      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_RCC_ClockConfig+0x21c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d212      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <HAL_RCC_ClockConfig+0x21c>)
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCC_ClockConfig+0x21c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d007      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e072      	b.n	8004e8e <HAL_RCC_ClockConfig+0x2fe>
 8004da8:	0800980c 	.word	0x0800980c
 8004dac:	40023c00 	.word	0x40023c00
 8004db0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d025      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d018      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x26a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd0:	d013      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x26a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dda:	d00e      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x26a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004de4:	d009      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x26a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004dee:	d004      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x26a>
 8004df0:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004df4:	4828      	ldr	r0, [pc, #160]	; (8004e98 <HAL_RCC_ClockConfig+0x308>)
 8004df6:	f7fb fdaa 	bl	800094e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dfa:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <HAL_RCC_ClockConfig+0x30c>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	4925      	ldr	r1, [pc, #148]	; (8004e9c <HAL_RCC_ClockConfig+0x30c>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d026      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d018      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x2c2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e28:	d013      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x2c2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e32:	d00e      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x2c2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004e3c:	d009      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x2c2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004e46:	d004      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x2c2>
 8004e48:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004e4c:	4812      	ldr	r0, [pc, #72]	; (8004e98 <HAL_RCC_ClockConfig+0x308>)
 8004e4e:	f7fb fd7e 	bl	800094e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCC_ClockConfig+0x30c>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	490e      	ldr	r1, [pc, #56]	; (8004e9c <HAL_RCC_ClockConfig+0x30c>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e66:	f000 f82d 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_ClockConfig+0x30c>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	490a      	ldr	r1, [pc, #40]	; (8004ea0 <HAL_RCC_ClockConfig+0x310>)
 8004e78:	5ccb      	ldrb	r3, [r1, r3]
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <HAL_RCC_ClockConfig+0x314>)
 8004e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x318>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fb fe32 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	0800980c 	.word	0x0800980c
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	080098d0 	.word	0x080098d0
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	20000004 	.word	0x20000004

08004eac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <HAL_RCC_EnableCSS+0x14>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	4247004c 	.word	0x4247004c

08004ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec8:	b094      	sub	sp, #80	; 0x50
 8004eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004edc:	4b79      	ldr	r3, [pc, #484]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d00d      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0x40>
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	f200 80e1 	bhi.w	80050b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d003      	beq.n	8004efe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ef6:	e0db      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef8:	4b73      	ldr	r3, [pc, #460]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004efc:	e0db      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004efe:	4b73      	ldr	r3, [pc, #460]	; (80050cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f02:	e0d8      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f04:	4b6f      	ldr	r3, [pc, #444]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d063      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1a:	4b6a      	ldr	r3, [pc, #424]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	2200      	movs	r2, #0
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f2e:	2300      	movs	r3, #0
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
 8004f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	f04f 0000 	mov.w	r0, #0
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	0159      	lsls	r1, r3, #5
 8004f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f48:	0150      	lsls	r0, r2, #5
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4621      	mov	r1, r4
 8004f50:	1a51      	subs	r1, r2, r1
 8004f52:	6139      	str	r1, [r7, #16]
 8004f54:	4629      	mov	r1, r5
 8004f56:	eb63 0301 	sbc.w	r3, r3, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	018b      	lsls	r3, r1, #6
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f72:	4651      	mov	r1, sl
 8004f74:	018a      	lsls	r2, r1, #6
 8004f76:	4651      	mov	r1, sl
 8004f78:	ebb2 0801 	subs.w	r8, r2, r1
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f96:	4690      	mov	r8, r2
 8004f98:	4699      	mov	r9, r3
 8004f9a:	4623      	mov	r3, r4
 8004f9c:	eb18 0303 	adds.w	r3, r8, r3
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	eb49 0303 	adc.w	r3, r9, r3
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	024b      	lsls	r3, r1, #9
 8004fba:	4621      	mov	r1, r4
 8004fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	024a      	lsls	r2, r1, #9
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fca:	2200      	movs	r2, #0
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fd4:	f7fb f8f8 	bl	80001c8 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4613      	mov	r3, r2
 8004fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe0:	e058      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe2:	4b38      	ldr	r3, [pc, #224]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	2200      	movs	r2, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	4611      	mov	r1, r2
 8004fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ff2:	623b      	str	r3, [r7, #32]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	f04f 0000 	mov.w	r0, #0
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	0159      	lsls	r1, r3, #5
 800500a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500e:	0150      	lsls	r0, r2, #5
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4641      	mov	r1, r8
 8005016:	ebb2 0a01 	subs.w	sl, r2, r1
 800501a:	4649      	mov	r1, r9
 800501c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800502c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005034:	ebb2 040a 	subs.w	r4, r2, sl
 8005038:	eb63 050b 	sbc.w	r5, r3, fp
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	00eb      	lsls	r3, r5, #3
 8005046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800504a:	00e2      	lsls	r2, r4, #3
 800504c:	4614      	mov	r4, r2
 800504e:	461d      	mov	r5, r3
 8005050:	4643      	mov	r3, r8
 8005052:	18e3      	adds	r3, r4, r3
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	464b      	mov	r3, r9
 8005058:	eb45 0303 	adc.w	r3, r5, r3
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800506a:	4629      	mov	r1, r5
 800506c:	028b      	lsls	r3, r1, #10
 800506e:	4621      	mov	r1, r4
 8005070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005074:	4621      	mov	r1, r4
 8005076:	028a      	lsls	r2, r1, #10
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507e:	2200      	movs	r2, #0
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	61fa      	str	r2, [r7, #28]
 8005084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005088:	f7fb f89e 	bl	80001c8 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4613      	mov	r3, r2
 8005092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	3301      	adds	r3, #1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ae:	e002      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3750      	adds	r7, #80	; 0x50
 80050bc:	46bd      	mov	sp, r7
 80050be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800
 80050c8:	00f42400 	.word	0x00f42400
 80050cc:	007a1200 	.word	0x007a1200

080050d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000000 	.word	0x20000000

080050e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_RCC_NMI_IRQHandler+0x20>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f4:	2b80      	cmp	r3, #128	; 0x80
 80050f6:	d104      	bne.n	8005102 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80050f8:	f000 f80a 	bl	8005110 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <HAL_RCC_NMI_IRQHandler+0x24>)
 80050fe:	2280      	movs	r2, #128	; 0x80
 8005100:	701a      	strb	r2, [r3, #0]
  }
}
 8005102:	bf00      	nop
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800
 800510c:	4002380e 	.word	0x4002380e

08005110 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
	...

08005120 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b07      	cmp	r3, #7
 800513e:	d904      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8005140:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8005144:	482c      	ldr	r0, [pc, #176]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8005146:	f7fb fc02 	bl	800094e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d105      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800515e:	2b00      	cmp	r3, #0
 8005160:	d056      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d903      	bls.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b07      	cmp	r3, #7
 8005170:	d904      	bls.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005172:	f640 11de 	movw	r1, #2526	; 0x9de
 8005176:	4820      	ldr	r0, [pc, #128]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8005178:	f7fb fbe9 	bl	800094e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b31      	cmp	r3, #49	; 0x31
 8005182:	d904      	bls.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800518c:	d904      	bls.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800518e:	f640 11df 	movw	r1, #2527	; 0x9df
 8005192:	4819      	ldr	r0, [pc, #100]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8005194:	f7fb fbdb 	bl	800094e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005198:	4b18      	ldr	r3, [pc, #96]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800519e:	f7fb fceb 	bl	8000b78 <HAL_GetTick>
 80051a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051a6:	f7fb fce7 	bl	8000b78 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e1a6      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b8:	4b11      	ldr	r3, [pc, #68]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	019a      	lsls	r2, r3, #6
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	071b      	lsls	r3, r3, #28
 80051d0:	490b      	ldr	r1, [pc, #44]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051d8:	4b08      	ldr	r3, [pc, #32]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051de:	f7fb fccb 	bl	8000b78 <HAL_GetTick>
 80051e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051e4:	e00e      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051e6:	f7fb fcc7 	bl	8000b78 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d907      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e186      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80051f8:	08009844 	.word	0x08009844
 80051fc:	42470068 	.word	0x42470068
 8005200:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005204:	4b88      	ldr	r3, [pc, #544]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ea      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8173 	beq.w	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005226:	f000 80a6 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005232:	f000 80a0 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	4a7c      	ldr	r2, [pc, #496]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	f000 809a 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	4a7a      	ldr	r2, [pc, #488]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005248:	4293      	cmp	r3, r2
 800524a:	f000 8094 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	4a78      	ldr	r2, [pc, #480]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005254:	4293      	cmp	r3, r2
 8005256:	f000 808e 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4a76      	ldr	r2, [pc, #472]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005260:	4293      	cmp	r3, r2
 8005262:	f000 8088 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	4a74      	ldr	r2, [pc, #464]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	f000 8082 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4a72      	ldr	r2, [pc, #456]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d07c      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a70      	ldr	r2, [pc, #448]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d077      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4a6f      	ldr	r2, [pc, #444]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d072      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4a6d      	ldr	r2, [pc, #436]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d06d      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	4a6c      	ldr	r2, [pc, #432]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d068      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a6a      	ldr	r2, [pc, #424]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d063      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	4a69      	ldr	r2, [pc, #420]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d05e      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a67      	ldr	r2, [pc, #412]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d059      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	4a66      	ldr	r2, [pc, #408]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d054      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a64      	ldr	r2, [pc, #400]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d04f      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4a63      	ldr	r2, [pc, #396]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d04a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a61      	ldr	r2, [pc, #388]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d045      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	4a60      	ldr	r2, [pc, #384]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d040      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a5e      	ldr	r2, [pc, #376]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d03b      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	4a5d      	ldr	r2, [pc, #372]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d036      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4a5b      	ldr	r2, [pc, #364]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d031      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	4a5a      	ldr	r2, [pc, #360]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d02c      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a58      	ldr	r2, [pc, #352]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d027      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4a57      	ldr	r2, [pc, #348]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d022      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a55      	ldr	r2, [pc, #340]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01d      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	4a54      	ldr	r2, [pc, #336]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d018      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a52      	ldr	r2, [pc, #328]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	4a51      	ldr	r2, [pc, #324]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00e      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a4f      	ldr	r2, [pc, #316]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d009      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	4a4e      	ldr	r2, [pc, #312]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800536c:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8005370:	484c      	ldr	r0, [pc, #304]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005372:	f7fb faec 	bl	800094e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	4b2b      	ldr	r3, [pc, #172]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005384:	6413      	str	r3, [r2, #64]	; 0x40
 8005386:	4b28      	ldr	r3, [pc, #160]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005392:	4b45      	ldr	r3, [pc, #276]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a44      	ldr	r2, [pc, #272]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8005398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800539e:	f7fb fbeb 	bl	8000b78 <HAL_GetTick>
 80053a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053a4:	e008      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053a6:	f7fb fbe7 	bl	8000b78 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e0a6      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053b8:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f0      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053c4:	4b18      	ldr	r3, [pc, #96]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d073      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x39c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d06c      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053e2:	4b11      	ldr	r3, [pc, #68]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ec:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053f2:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053f8:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b01      	cmp	r3, #1
 8005408:	d158      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x39c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800540a:	f7fb fbb5 	bl	8000b78 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005410:	e04e      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x390>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005412:	f7fb fbb1 	bl	8000b78 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005420:	4293      	cmp	r3, r2
 8005422:	d945      	bls.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x390>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e06e      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005428:	40023800 	.word	0x40023800
 800542c:	00020300 	.word	0x00020300
 8005430:	00030300 	.word	0x00030300
 8005434:	00040300 	.word	0x00040300
 8005438:	00050300 	.word	0x00050300
 800543c:	00060300 	.word	0x00060300
 8005440:	00070300 	.word	0x00070300
 8005444:	00080300 	.word	0x00080300
 8005448:	00090300 	.word	0x00090300
 800544c:	000a0300 	.word	0x000a0300
 8005450:	000b0300 	.word	0x000b0300
 8005454:	000c0300 	.word	0x000c0300
 8005458:	000d0300 	.word	0x000d0300
 800545c:	000e0300 	.word	0x000e0300
 8005460:	000f0300 	.word	0x000f0300
 8005464:	00100300 	.word	0x00100300
 8005468:	00110300 	.word	0x00110300
 800546c:	00120300 	.word	0x00120300
 8005470:	00130300 	.word	0x00130300
 8005474:	00140300 	.word	0x00140300
 8005478:	00150300 	.word	0x00150300
 800547c:	00160300 	.word	0x00160300
 8005480:	00170300 	.word	0x00170300
 8005484:	00180300 	.word	0x00180300
 8005488:	00190300 	.word	0x00190300
 800548c:	001a0300 	.word	0x001a0300
 8005490:	001b0300 	.word	0x001b0300
 8005494:	001c0300 	.word	0x001c0300
 8005498:	001d0300 	.word	0x001d0300
 800549c:	001e0300 	.word	0x001e0300
 80054a0:	001f0300 	.word	0x001f0300
 80054a4:	08009844 	.word	0x08009844
 80054a8:	40007000 	.word	0x40007000
 80054ac:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b0:	4b17      	ldr	r3, [pc, #92]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0aa      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c8:	d10d      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054de:	490c      	ldr	r1, [pc, #48]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	608b      	str	r3, [r1, #8]
 80054e4:	e005      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054f0:	6093      	str	r3, [r2, #8]
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80054f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fe:	4904      	ldr	r1, [pc, #16]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8005500:	4313      	orrs	r3, r2
 8005502:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800

08005514 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d13e      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005532:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d12f      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005548:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800554a:	617b      	str	r3, [r7, #20]
          break;
 800554c:	e02f      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800554e:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800555a:	d108      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800555c:	4b18      	ldr	r3, [pc, #96]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005564:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	e007      	b.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005576:	4a15      	ldr	r2, [pc, #84]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800557e:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005584:	099b      	lsrs	r3, r3, #6
 8005586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005598:	0f1b      	lsrs	r3, r3, #28
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]
          break;
 80055a6:	e002      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
          break;
 80055ac:	bf00      	nop
        }
      }
      break;
 80055ae:	bf00      	nop
    }
  }
  return frequency;
 80055b0:	697b      	ldr	r3, [r7, #20]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	00bb8000 	.word	0x00bb8000
 80055c8:	007a1200 	.word	0x007a1200
 80055cc:	00f42400 	.word	0x00f42400

080055d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055d0:	b084      	sub	sp, #16
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	f107 001c 	add.w	r0, r7, #28
 80055de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d122      	bne.n	800562e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d105      	bne.n	8005622 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fbee 	bl	8006e04 <USB_CoreReset>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
 800562c:	e01a      	b.n	8005664 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 fbe2 	bl	8006e04 <USB_CoreReset>
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
 8005656:	e005      	b.n	8005664 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	2b01      	cmp	r3, #1
 8005668:	d10b      	bne.n	8005682 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f043 0206 	orr.w	r2, r3, #6
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005682:	7bfb      	ldrb	r3, [r7, #15]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800568e:	b004      	add	sp, #16
 8005690:	4770      	bx	lr
	...

08005694 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d165      	bne.n	8005774 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4a41      	ldr	r2, [pc, #260]	; (80057b0 <USB_SetTurnaroundTime+0x11c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d906      	bls.n	80056be <USB_SetTurnaroundTime+0x2a>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4a40      	ldr	r2, [pc, #256]	; (80057b4 <USB_SetTurnaroundTime+0x120>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d202      	bcs.n	80056be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056b8:	230f      	movs	r3, #15
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e062      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4a3c      	ldr	r2, [pc, #240]	; (80057b4 <USB_SetTurnaroundTime+0x120>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d306      	bcc.n	80056d4 <USB_SetTurnaroundTime+0x40>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4a3b      	ldr	r2, [pc, #236]	; (80057b8 <USB_SetTurnaroundTime+0x124>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d202      	bcs.n	80056d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056ce:	230e      	movs	r3, #14
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e057      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4a38      	ldr	r2, [pc, #224]	; (80057b8 <USB_SetTurnaroundTime+0x124>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d306      	bcc.n	80056ea <USB_SetTurnaroundTime+0x56>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4a37      	ldr	r2, [pc, #220]	; (80057bc <USB_SetTurnaroundTime+0x128>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d202      	bcs.n	80056ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056e4:	230d      	movs	r3, #13
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e04c      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4a33      	ldr	r2, [pc, #204]	; (80057bc <USB_SetTurnaroundTime+0x128>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d306      	bcc.n	8005700 <USB_SetTurnaroundTime+0x6c>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4a32      	ldr	r2, [pc, #200]	; (80057c0 <USB_SetTurnaroundTime+0x12c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d802      	bhi.n	8005700 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056fa:	230c      	movs	r3, #12
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	e041      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4a2f      	ldr	r2, [pc, #188]	; (80057c0 <USB_SetTurnaroundTime+0x12c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d906      	bls.n	8005716 <USB_SetTurnaroundTime+0x82>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a2e      	ldr	r2, [pc, #184]	; (80057c4 <USB_SetTurnaroundTime+0x130>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d802      	bhi.n	8005716 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005710:	230b      	movs	r3, #11
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e036      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <USB_SetTurnaroundTime+0x130>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d906      	bls.n	800572c <USB_SetTurnaroundTime+0x98>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4a29      	ldr	r2, [pc, #164]	; (80057c8 <USB_SetTurnaroundTime+0x134>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d802      	bhi.n	800572c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005726:	230a      	movs	r3, #10
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e02b      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a26      	ldr	r2, [pc, #152]	; (80057c8 <USB_SetTurnaroundTime+0x134>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d906      	bls.n	8005742 <USB_SetTurnaroundTime+0xae>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4a25      	ldr	r2, [pc, #148]	; (80057cc <USB_SetTurnaroundTime+0x138>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d202      	bcs.n	8005742 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800573c:	2309      	movs	r3, #9
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e020      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4a21      	ldr	r2, [pc, #132]	; (80057cc <USB_SetTurnaroundTime+0x138>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d306      	bcc.n	8005758 <USB_SetTurnaroundTime+0xc4>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4a20      	ldr	r2, [pc, #128]	; (80057d0 <USB_SetTurnaroundTime+0x13c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d802      	bhi.n	8005758 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005752:	2308      	movs	r3, #8
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	e015      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4a1d      	ldr	r2, [pc, #116]	; (80057d0 <USB_SetTurnaroundTime+0x13c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d906      	bls.n	800576e <USB_SetTurnaroundTime+0xda>
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <USB_SetTurnaroundTime+0x140>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d202      	bcs.n	800576e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005768:	2307      	movs	r3, #7
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e00a      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800576e:	2306      	movs	r3, #6
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e007      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800577a:	2309      	movs	r3, #9
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e001      	b.n	8005784 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005780:	2309      	movs	r3, #9
 8005782:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	029b      	lsls	r3, r3, #10
 8005798:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800579c:	431a      	orrs	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	00d8acbf 	.word	0x00d8acbf
 80057b4:	00e4e1c0 	.word	0x00e4e1c0
 80057b8:	00f42400 	.word	0x00f42400
 80057bc:	01067380 	.word	0x01067380
 80057c0:	011a499f 	.word	0x011a499f
 80057c4:	01312cff 	.word	0x01312cff
 80057c8:	014ca43f 	.word	0x014ca43f
 80057cc:	016e3600 	.word	0x016e3600
 80057d0:	01a6ab1f 	.word	0x01a6ab1f
 80057d4:	01e84800 	.word	0x01e84800

080057d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f043 0201 	orr.w	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f023 0201 	bic.w	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d115      	bne.n	800586a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800584a:	2001      	movs	r0, #1
 800584c:	f7fb f9a0 	bl	8000b90 <HAL_Delay>
      ms++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3301      	adds	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fa45 	bl	8006ce6 <USB_GetMode>
 800585c:	4603      	mov	r3, r0
 800585e:	2b01      	cmp	r3, #1
 8005860:	d01e      	beq.n	80058a0 <USB_SetCurrentMode+0x84>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b31      	cmp	r3, #49	; 0x31
 8005866:	d9f0      	bls.n	800584a <USB_SetCurrentMode+0x2e>
 8005868:	e01a      	b.n	80058a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d115      	bne.n	800589c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800587c:	2001      	movs	r0, #1
 800587e:	f7fb f987 	bl	8000b90 <HAL_Delay>
      ms++;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f001 fa2c 	bl	8006ce6 <USB_GetMode>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <USB_SetCurrentMode+0x84>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b31      	cmp	r3, #49	; 0x31
 8005898:	d9f0      	bls.n	800587c <USB_SetCurrentMode+0x60>
 800589a:	e001      	b.n	80058a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e005      	b.n	80058ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b32      	cmp	r3, #50	; 0x32
 80058a4:	d101      	bne.n	80058aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058b4:	b084      	sub	sp, #16
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b086      	sub	sp, #24
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058ce:	2300      	movs	r3, #0
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	e009      	b.n	80058e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	3340      	adds	r3, #64	; 0x40
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	2200      	movs	r2, #0
 80058e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	3301      	adds	r3, #1
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b0e      	cmp	r3, #14
 80058ec:	d9f2      	bls.n	80058d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d11c      	bne.n	800592e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005902:	f043 0302 	orr.w	r3, r3, #2
 8005906:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	639a      	str	r2, [r3, #56]	; 0x38
 800592c:	e00b      	b.n	8005946 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800594c:	461a      	mov	r2, r3
 800594e:	2300      	movs	r3, #0
 8005950:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005958:	4619      	mov	r1, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005960:	461a      	mov	r2, r3
 8005962:	680b      	ldr	r3, [r1, #0]
 8005964:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10c      	bne.n	8005986 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005972:	2100      	movs	r1, #0
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f965 	bl	8005c44 <USB_SetDevSpeed>
 800597a:	e008      	b.n	800598e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800597c:	2101      	movs	r1, #1
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f960 	bl	8005c44 <USB_SetDevSpeed>
 8005984:	e003      	b.n	800598e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005986:	2103      	movs	r1, #3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f95b 	bl	8005c44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800598e:	2110      	movs	r1, #16
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f8f3 	bl	8005b7c <USB_FlushTxFifo>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f91f 	bl	8005be4 <USB_FlushRxFifo>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	461a      	mov	r2, r3
 80059c4:	2300      	movs	r3, #0
 80059c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ce:	461a      	mov	r2, r3
 80059d0:	2300      	movs	r3, #0
 80059d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d4:	2300      	movs	r3, #0
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	e043      	b.n	8005a62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059f0:	d118      	bne.n	8005a24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	461a      	mov	r2, r3
 8005a06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	e013      	b.n	8005a36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	e008      	b.n	8005a36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	461a      	mov	r2, r3
 8005a44:	2300      	movs	r3, #0
 8005a46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	461a      	mov	r2, r3
 8005a56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d3b7      	bcc.n	80059da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	e043      	b.n	8005af8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a86:	d118      	bne.n	8005aba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	e013      	b.n	8005acc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	e008      	b.n	8005acc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2300      	movs	r3, #0
 8005aca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2300      	movs	r3, #0
 8005adc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aea:	461a      	mov	r2, r3
 8005aec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005af0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	3301      	adds	r3, #1
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d3b7      	bcc.n	8005a70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	f043 0210 	orr.w	r2, r3, #16
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <USB_DevInit+0x2c4>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f043 0208 	orr.w	r2, r3, #8
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d107      	bne.n	8005b68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b60:	f043 0304 	orr.w	r3, r3, #4
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b74:	b004      	add	sp, #16
 8005b76:	4770      	bx	lr
 8005b78:	803c3800 	.word	0x803c3800

08005b7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <USB_FlushTxFifo+0x64>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e01b      	b.n	8005bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	daf2      	bge.n	8005b8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	019b      	lsls	r3, r3, #6
 8005bac:	f043 0220 	orr.w	r2, r3, #32
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <USB_FlushTxFifo+0x64>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e006      	b.n	8005bd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d0f0      	beq.n	8005bb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	00030d40 	.word	0x00030d40

08005be4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4a11      	ldr	r2, [pc, #68]	; (8005c40 <USB_FlushRxFifo+0x5c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d901      	bls.n	8005c02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e018      	b.n	8005c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	daf2      	bge.n	8005bf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2210      	movs	r2, #16
 8005c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <USB_FlushRxFifo+0x5c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e006      	b.n	8005c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d0f0      	beq.n	8005c14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	00030d40 	.word	0x00030d40

08005c44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c64:	4313      	orrs	r3, r2
 8005c66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b087      	sub	sp, #28
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0306 	and.w	r3, r3, #6
 8005c8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
 8005c9a:	e00a      	b.n	8005cb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d002      	beq.n	8005ca8 <USB_GetDevSpeed+0x32>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b06      	cmp	r3, #6
 8005ca6:	d102      	bne.n	8005cae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	75fb      	strb	r3, [r7, #23]
 8005cac:	e001      	b.n	8005cb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005cae:	230f      	movs	r3, #15
 8005cb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d13a      	bne.n	8005d52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	2101      	movs	r1, #1
 8005cee:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	68f9      	ldr	r1, [r7, #12]
 8005cf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d155      	bne.n	8005dc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	791b      	ldrb	r3, [r3, #4]
 8005d2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	059b      	lsls	r3, r3, #22
 8005d36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	e036      	b.n	8005dc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	2101      	movs	r1, #1
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d11a      	bne.n	8005dc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	791b      	ldrb	r3, [r3, #4]
 8005da4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005da6:	430b      	orrs	r3, r1
 8005da8:	4313      	orrs	r3, r2
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d161      	bne.n	8005eb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e02:	d11f      	bne.n	8005e44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	2101      	movs	r1, #1
 8005e56:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e64:	4013      	ands	r3, r2
 8005e66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	2101      	movs	r1, #1
 8005e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	43db      	mvns	r3, r3
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e88:	4013      	ands	r3, r2
 8005e8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	0159      	lsls	r1, r3, #5
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	440b      	add	r3, r1
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4b35      	ldr	r3, [pc, #212]	; (8005f80 <USB_DeactivateEndpoint+0x1b0>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	600b      	str	r3, [r1, #0]
 8005eae:	e060      	b.n	8005f72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec6:	d11f      	bne.n	8005f08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ee6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	2101      	movs	r1, #1
 8005f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1e:	041b      	lsls	r3, r3, #16
 8005f20:	43db      	mvns	r3, r3
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f28:	4013      	ands	r3, r2
 8005f2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	041b      	lsls	r3, r3, #16
 8005f44:	43db      	mvns	r3, r3
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	0159      	lsls	r1, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	440b      	add	r3, r1
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <USB_DeactivateEndpoint+0x1b4>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	ec337800 	.word	0xec337800
 8005f84:	eff37800 	.word	0xeff37800

08005f88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	f040 815c 	bne.w	8006262 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d132      	bne.n	8006018 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006010:	0cdb      	lsrs	r3, r3, #19
 8006012:	04db      	lsls	r3, r3, #19
 8006014:	6113      	str	r3, [r2, #16]
 8006016:	e074      	b.n	8006102 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	0cdb      	lsrs	r3, r3, #19
 8006034:	04db      	lsls	r3, r3, #19
 8006036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006052:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006056:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800605a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6999      	ldr	r1, [r3, #24]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	440b      	add	r3, r1
 8006074:	1e59      	subs	r1, r3, #1
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	fbb1 f3f3 	udiv	r3, r1, r3
 800607e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006080:	4b9d      	ldr	r3, [pc, #628]	; (80062f8 <USB_EPStartXfer+0x370>)
 8006082:	400b      	ands	r3, r1
 8006084:	69b9      	ldr	r1, [r7, #24]
 8006086:	0148      	lsls	r0, r1, #5
 8006088:	69f9      	ldr	r1, [r7, #28]
 800608a:	4401      	add	r1, r0
 800608c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006090:	4313      	orrs	r3, r2
 8006092:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060aa:	69b9      	ldr	r1, [r7, #24]
 80060ac:	0148      	lsls	r0, r1, #5
 80060ae:	69f9      	ldr	r1, [r7, #28]
 80060b0:	4401      	add	r1, r0
 80060b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060b6:	4313      	orrs	r3, r2
 80060b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	791b      	ldrb	r3, [r3, #4]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d11f      	bne.n	8006102 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006100:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d14b      	bne.n	80061a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d009      	beq.n	8006124 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	791b      	ldrb	r3, [r3, #4]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d128      	bne.n	800617e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d110      	bne.n	800615e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006156:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e00f      	b.n	800617e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	69fa      	ldr	r2, [r7, #28]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006198:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	e133      	b.n	8006408 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	791b      	ldrb	r3, [r3, #4]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d015      	beq.n	80061f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 811b 	beq.w	8006408 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	2101      	movs	r1, #1
 80061e4:	fa01 f303 	lsl.w	r3, r1, r3
 80061e8:	69f9      	ldr	r1, [r7, #28]
 80061ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ee:	4313      	orrs	r3, r2
 80061f0:	634b      	str	r3, [r1, #52]	; 0x34
 80061f2:	e109      	b.n	8006408 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006200:	2b00      	cmp	r3, #0
 8006202:	d110      	bne.n	8006226 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e00f      	b.n	8006246 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006244:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6919      	ldr	r1, [r3, #16]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781a      	ldrb	r2, [r3, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	b298      	uxth	r0, r3
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	4603      	mov	r3, r0
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fade 	bl	800681c <USB_WritePacket>
 8006260:	e0d2      	b.n	8006408 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800627c:	0cdb      	lsrs	r3, r3, #19
 800627e:	04db      	lsls	r3, r3, #19
 8006280:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d126      	bne.n	80062fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c4:	69b9      	ldr	r1, [r7, #24]
 80062c6:	0148      	lsls	r0, r1, #5
 80062c8:	69f9      	ldr	r1, [r7, #28]
 80062ca:	4401      	add	r1, r0
 80062cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062d0:	4313      	orrs	r3, r2
 80062d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062f2:	6113      	str	r3, [r2, #16]
 80062f4:	e03a      	b.n	800636c <USB_EPStartXfer+0x3e4>
 80062f6:	bf00      	nop
 80062f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	4413      	add	r3, r2
 8006306:	1e5a      	subs	r2, r3, #1
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	8afa      	ldrh	r2, [r7, #22]
 8006318:	fb03 f202 	mul.w	r2, r3, r2
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	8afb      	ldrh	r3, [r7, #22]
 8006330:	04d9      	lsls	r1, r3, #19
 8006332:	4b38      	ldr	r3, [pc, #224]	; (8006414 <USB_EPStartXfer+0x48c>)
 8006334:	400b      	ands	r3, r1
 8006336:	69b9      	ldr	r1, [r7, #24]
 8006338:	0148      	lsls	r0, r1, #5
 800633a:	69f9      	ldr	r1, [r7, #28]
 800633c:	4401      	add	r1, r0
 800633e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006342:	4313      	orrs	r3, r2
 8006344:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800635c:	69b9      	ldr	r1, [r7, #24]
 800635e:	0148      	lsls	r0, r1, #5
 8006360:	69f9      	ldr	r1, [r7, #28]
 8006362:	4401      	add	r1, r0
 8006364:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006368:	4313      	orrs	r3, r2
 800636a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d10d      	bne.n	800638e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	6919      	ldr	r1, [r3, #16]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	460a      	mov	r2, r1
 800638c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	791b      	ldrb	r3, [r3, #4]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d128      	bne.n	80063e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d110      	bne.n	80063c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e00f      	b.n	80063e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006402:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3720      	adds	r7, #32
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	1ff80000 	.word	0x1ff80000

08006418 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b01      	cmp	r3, #1
 8006436:	f040 80ce 	bne.w	80065d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d132      	bne.n	80064a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006460:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006464:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	440a      	add	r2, r1
 800647c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006484:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a0:	0cdb      	lsrs	r3, r3, #19
 80064a2:	04db      	lsls	r3, r3, #19
 80064a4:	6113      	str	r3, [r2, #16]
 80064a6:	e04e      	b.n	8006546 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c2:	0cdb      	lsrs	r3, r3, #19
 80064c4:	04db      	lsls	r3, r3, #19
 80064c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d903      	bls.n	8006500 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800651e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006536:	6939      	ldr	r1, [r7, #16]
 8006538:	0148      	lsls	r0, r1, #5
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	4401      	add	r1, r0
 800653e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006542:	4313      	orrs	r3, r2
 8006544:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d11e      	bne.n	800658a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d009      	beq.n	8006568 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	461a      	mov	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e097      	b.n	80066ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8083 	beq.w	80066ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	2101      	movs	r1, #1
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	6979      	ldr	r1, [r7, #20]
 80065cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065d0:	4313      	orrs	r3, r2
 80065d2:	634b      	str	r3, [r1, #52]	; 0x34
 80065d4:	e071      	b.n	80066ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f0:	0cdb      	lsrs	r3, r3, #19
 80065f2:	04db      	lsls	r3, r3, #19
 80065f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006610:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006614:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006618:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	0151      	lsls	r1, r2, #5
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	440a      	add	r2, r1
 8006648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800664c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006668:	6939      	ldr	r1, [r7, #16]
 800666a:	0148      	lsls	r0, r1, #5
 800666c:	6979      	ldr	r1, [r7, #20]
 800666e:	4401      	add	r1, r0
 8006670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006674:	4313      	orrs	r3, r2
 8006676:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10d      	bne.n	800669a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6919      	ldr	r1, [r3, #16]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	460a      	mov	r2, r1
 8006698:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d14a      	bne.n	800677c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066fe:	f040 8086 	bne.w	800680e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	7812      	ldrb	r2, [r2, #0]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006720:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006724:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	7812      	ldrb	r2, [r2, #0]
 800673a:	0151      	lsls	r1, r2, #5
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	440a      	add	r2, r1
 8006740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006748:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f242 7210 	movw	r2, #10000	; 0x2710
 8006756:	4293      	cmp	r3, r2
 8006758:	d902      	bls.n	8006760 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	75fb      	strb	r3, [r7, #23]
          break;
 800675e:	e056      	b.n	800680e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006778:	d0e7      	beq.n	800674a <USB_EPStopXfer+0x82>
 800677a:	e048      	b.n	800680e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006794:	d13b      	bne.n	800680e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	7812      	ldrb	r2, [r2, #0]
 80067aa:	0151      	lsls	r1, r2, #5
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	440a      	add	r2, r1
 80067b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d902      	bls.n	80067f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	75fb      	strb	r3, [r7, #23]
          break;
 80067f2:	e00c      	b.n	800680e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800680c:	d0e7      	beq.n	80067de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006810:	4618      	mov	r0, r3
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800681c:	b480      	push	{r7}
 800681e:	b089      	sub	sp, #36	; 0x24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	460b      	mov	r3, r1
 800682c:	71fb      	strb	r3, [r7, #7]
 800682e:	4613      	mov	r3, r2
 8006830:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800683a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	d123      	bne.n	800688a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006842:	88bb      	ldrh	r3, [r7, #4]
 8006844:	3303      	adds	r3, #3
 8006846:	089b      	lsrs	r3, r3, #2
 8006848:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	e018      	b.n	8006882 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	031a      	lsls	r2, r3, #12
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	4413      	add	r3, r2
 8006858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685c:	461a      	mov	r2, r3
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	3301      	adds	r3, #1
 8006868:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	3301      	adds	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	3301      	adds	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	3301      	adds	r3, #1
 800687a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	3301      	adds	r3, #1
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	429a      	cmp	r2, r3
 8006888:	d3e2      	bcc.n	8006850 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3724      	adds	r7, #36	; 0x24
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006898:	b480      	push	{r7}
 800689a:	b08b      	sub	sp, #44	; 0x2c
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068ae:	88fb      	ldrh	r3, [r7, #6]
 80068b0:	089b      	lsrs	r3, r3, #2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068be:	2300      	movs	r3, #0
 80068c0:	623b      	str	r3, [r7, #32]
 80068c2:	e014      	b.n	80068ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	3301      	adds	r3, #1
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	3301      	adds	r3, #1
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	3301      	adds	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	3301      	adds	r3, #1
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	3301      	adds	r3, #1
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	6a3a      	ldr	r2, [r7, #32]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d3e6      	bcc.n	80068c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068f6:	8bfb      	ldrh	r3, [r7, #30]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01e      	beq.n	800693a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006906:	461a      	mov	r2, r3
 8006908:	f107 0310 	add.w	r3, r7, #16
 800690c:	6812      	ldr	r2, [r2, #0]
 800690e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
 800691c:	b2da      	uxtb	r2, r3
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	701a      	strb	r2, [r3, #0]
      i++;
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	3301      	adds	r3, #1
 8006926:	623b      	str	r3, [r7, #32]
      pDest++;
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	3301      	adds	r3, #1
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800692e:	8bfb      	ldrh	r3, [r7, #30]
 8006930:	3b01      	subs	r3, #1
 8006932:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006934:	8bfb      	ldrh	r3, [r7, #30]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1ea      	bne.n	8006910 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800693c:	4618      	mov	r0, r3
 800693e:	372c      	adds	r7, #44	; 0x2c
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d12c      	bne.n	80069be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	db12      	blt.n	800699c <USB_EPSetStall+0x54>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00f      	beq.n	800699c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006996:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800699a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	e02b      	b.n	8006a16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	db12      	blt.n	80069f6 <USB_EPSetStall+0xae>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00f      	beq.n	80069f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	0151      	lsls	r1, r2, #5
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	440a      	add	r2, r1
 80069ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d128      	bne.n	8006a92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	791b      	ldrb	r3, [r3, #4]
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d003      	beq.n	8006a70 <USB_EPClearStall+0x4c>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	791b      	ldrb	r3, [r3, #4]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d138      	bne.n	8006ae2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	e027      	b.n	8006ae2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ab0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	791b      	ldrb	r3, [r3, #4]
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d003      	beq.n	8006ac2 <USB_EPClearStall+0x9e>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d10f      	bne.n	8006ae2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	0151      	lsls	r1, r2, #5
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006b24:	68f9      	ldr	r1, [r7, #12]
 8006b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b56:	f023 0303 	bic.w	r3, r3, #3
 8006b5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b6a:	f023 0302 	bic.w	r3, r3, #2
 8006b6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b98:	f023 0303 	bic.w	r3, r3, #3
 8006b9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bac:	f043 0302 	orr.w	r3, r3, #2
 8006bb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	4013      	ands	r3, r2
 8006c08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	0c1b      	lsrs	r3, r3, #16
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	b29b      	uxth	r3, r3
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b085      	sub	sp, #20
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	460b      	mov	r3, r1
 8006c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b087      	sub	sp, #28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	460b      	mov	r3, r1
 8006c94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cba:	01db      	lsls	r3, r3, #7
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cc4:	78fb      	ldrb	r3, [r7, #3]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d20:	f023 0307 	bic.w	r3, r3, #7
 8006d24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	460b      	mov	r3, r1
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	333c      	adds	r3, #60	; 0x3c
 8006d5e:	3304      	adds	r3, #4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	4a26      	ldr	r2, [pc, #152]	; (8006e00 <USB_EP0_OutStart+0xb8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d90a      	bls.n	8006d82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d7c:	d101      	bne.n	8006d82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e037      	b.n	8006df2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	461a      	mov	r2, r3
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006da0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db0:	f043 0318 	orr.w	r3, r3, #24
 8006db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006dc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dca:	7afb      	ldrb	r3, [r7, #11]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d10f      	bne.n	8006df0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006dee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	4f54300a 	.word	0x4f54300a

08006e04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <USB_CoreReset+0x64>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d901      	bls.n	8006e22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e01b      	b.n	8006e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	daf2      	bge.n	8006e10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f043 0201 	orr.w	r2, r3, #1
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a09      	ldr	r2, [pc, #36]	; (8006e68 <USB_CoreReset+0x64>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d901      	bls.n	8006e4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e006      	b.n	8006e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d0f0      	beq.n	8006e3a <USB_CoreReset+0x36>

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	00030d40 	.word	0x00030d40

08006e6c <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8006e78:	f643 4050 	movw	r0, #15440	; 0x3c50
 8006e7c:	f002 fbba 	bl	80095f4 <USBD_static_malloc>
 8006e80:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	32b0      	adds	r2, #176	; 0xb0
 8006e92:	2100      	movs	r1, #0
 8006e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e07e      	b.n	8006f9a <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	32b0      	adds	r2, #176	; 0xb0
 8006ea6:	68f9      	ldr	r1, [r7, #12]
 8006ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32b0      	adds	r2, #176	; 0xb0
 8006eb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	7c1b      	ldrb	r3, [r3, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10e      	bne.n	8006ee6 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8006ec8:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <USBD_AUDIO_Init+0x138>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	f003 020f 	and.w	r2, r3, #15
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	e00d      	b.n	8006f02 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8006ee6:	4b2f      	ldr	r3, [pc, #188]	; (8006fa4 <USBD_AUDIO_Init+0x138>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	f003 020f 	and.w	r2, r3, #15
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006efe:	2201      	movs	r2, #1
 8006f00:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8006f02:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <USBD_AUDIO_Init+0x138>)
 8006f04:	7819      	ldrb	r1, [r3, #0]
 8006f06:	23c0      	movs	r3, #192	; 0xc0
 8006f08:	2201      	movs	r2, #1
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f002 fa4f 	bl	80093ae <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8006f10:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <USBD_AUDIO_Init+0x138>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	f003 020f 	and.w	r2, r3, #15
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	440b      	add	r3, r1
 8006f24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f28:	2201      	movs	r2, #1
 8006f2a:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006f38:	2203      	movs	r2, #3
 8006f3a:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	33b0      	adds	r3, #176	; 0xb0
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2146      	movs	r1, #70	; 0x46
 8006f78:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8006f7c:	4798      	blx	r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e008      	b.n	8006f9a <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8006f88:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <USBD_AUDIO_Init+0x138>)
 8006f8a:	7819      	ldrb	r1, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	23c0      	movs	r3, #192	; 0xc0
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f002 fafa 	bl	800958c <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200000be 	.word	0x200000be

08006fa8 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8006fb4:	4b28      	ldr	r3, [pc, #160]	; (8007058 <USBD_AUDIO_DeInit+0xb0>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f002 fa1d 	bl	80093fa <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8006fc0:	4b25      	ldr	r3, [pc, #148]	; (8007058 <USBD_AUDIO_DeInit+0xb0>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	f003 020f 	and.w	r2, r3, #15
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fd8:	2200      	movs	r2, #0
 8006fda:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8006fdc:	4b1e      	ldr	r3, [pc, #120]	; (8007058 <USBD_AUDIO_DeInit+0xb0>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	32b0      	adds	r2, #176	; 0xb0
 8007002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d020      	beq.n	800704c <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	33b0      	adds	r3, #176	; 0xb0
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2000      	movs	r0, #0
 800701e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	32b0      	adds	r2, #176	; 0xb0
 800702a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702e:	4618      	mov	r0, r3
 8007030:	f002 faee 	bl	8009610 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	32b0      	adds	r2, #176	; 0xb0
 800703e:	2100      	movs	r1, #0
 8007040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	200000be 	.word	0x200000be

0800705c <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	32b0      	adds	r2, #176	; 0xb0
 8007078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707c:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007084:	2303      	movs	r3, #3
 8007086:	e0c1      	b.n	800720c <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01a      	beq.n	80070ca <USBD_AUDIO_Setup+0x6e>
 8007094:	2b20      	cmp	r3, #32
 8007096:	f040 80b1 	bne.w	80071fc <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	785b      	ldrb	r3, [r3, #1]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d006      	beq.n	80070b0 <USBD_AUDIO_Setup+0x54>
 80070a2:	2b81      	cmp	r3, #129	; 0x81
 80070a4:	d109      	bne.n	80070ba <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa91 	bl	80075d0 <AUDIO_REQ_GetCurrent>
          break;
 80070ae:	e00b      	b.n	80070c8 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fab8 	bl	8007628 <AUDIO_REQ_SetCurrent>
          break;
 80070b8:	e006      	b.n	80070c8 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fd1c 	bl	8008afa <USBD_CtlError>
          ret = USBD_FAIL;
 80070c2:	2303      	movs	r3, #3
 80070c4:	75fb      	strb	r3, [r7, #23]
          break;
 80070c6:	bf00      	nop
      }
      break;
 80070c8:	e09f      	b.n	800720a <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	2b0b      	cmp	r3, #11
 80070d0:	f200 8089 	bhi.w	80071e6 <USBD_AUDIO_Setup+0x18a>
 80070d4:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <USBD_AUDIO_Setup+0x80>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	0800710d 	.word	0x0800710d
 80070e0:	080071f5 	.word	0x080071f5
 80070e4:	080071e7 	.word	0x080071e7
 80070e8:	080071e7 	.word	0x080071e7
 80070ec:	080071e7 	.word	0x080071e7
 80070f0:	080071e7 	.word	0x080071e7
 80070f4:	08007137 	.word	0x08007137
 80070f8:	080071e7 	.word	0x080071e7
 80070fc:	080071e7 	.word	0x080071e7
 8007100:	080071e7 	.word	0x080071e7
 8007104:	0800717f 	.word	0x0800717f
 8007108:	080071a7 	.word	0x080071a7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b03      	cmp	r3, #3
 8007116:	d107      	bne.n	8007128 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007118:	f107 0308 	add.w	r3, r7, #8
 800711c:	2202      	movs	r2, #2
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fd5b 	bl	8008bdc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007126:	e068      	b.n	80071fa <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 fce5 	bl	8008afa <USBD_CtlError>
            ret = USBD_FAIL;
 8007130:	2303      	movs	r3, #3
 8007132:	75fb      	strb	r3, [r7, #23]
          break;
 8007134:	e061      	b.n	80071fa <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	0a1b      	lsrs	r3, r3, #8
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b21      	cmp	r3, #33	; 0x21
 8007140:	d15a      	bne.n	80071f8 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fadb 	bl	8007704 <USBD_AUDIO_GetAudioHeaderDesc>
 800714e:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00c      	beq.n	8007170 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	88db      	ldrh	r3, [r3, #6]
 800715a:	2b09      	cmp	r3, #9
 800715c:	bf28      	it	cs
 800715e:	2309      	movcs	r3, #9
 8007160:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8007162:	897b      	ldrh	r3, [r7, #10]
 8007164:	461a      	mov	r2, r3
 8007166:	68f9      	ldr	r1, [r7, #12]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 fd37 	bl	8008bdc <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800716e:	e043      	b.n	80071f8 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fcc1 	bl	8008afa <USBD_CtlError>
              ret = USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	75fb      	strb	r3, [r7, #23]
          break;
 800717c:	e03c      	b.n	80071f8 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b03      	cmp	r3, #3
 8007188:	d106      	bne.n	8007198 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2201      	movs	r2, #1
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 fd23 	bl	8008bdc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007196:	e030      	b.n	80071fa <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 fcad 	bl	8008afa <USBD_CtlError>
            ret = USBD_FAIL;
 80071a0:	2303      	movs	r3, #3
 80071a2:	75fb      	strb	r3, [r7, #23]
          break;
 80071a4:	e029      	b.n	80071fa <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d112      	bne.n	80071d8 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	885b      	ldrh	r3, [r3, #2]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d806      	bhi.n	80071ca <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	885b      	ldrh	r3, [r3, #2]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071c8:	e017      	b.n	80071fa <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 fc94 	bl	8008afa <USBD_CtlError>
              ret = USBD_FAIL;
 80071d2:	2303      	movs	r3, #3
 80071d4:	75fb      	strb	r3, [r7, #23]
          break;
 80071d6:	e010      	b.n	80071fa <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 fc8d 	bl	8008afa <USBD_CtlError>
            ret = USBD_FAIL;
 80071e0:	2303      	movs	r3, #3
 80071e2:	75fb      	strb	r3, [r7, #23]
          break;
 80071e4:	e009      	b.n	80071fa <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fc86 	bl	8008afa <USBD_CtlError>
          ret = USBD_FAIL;
 80071ee:	2303      	movs	r3, #3
 80071f0:	75fb      	strb	r3, [r7, #23]
          break;
 80071f2:	e002      	b.n	80071fa <USBD_AUDIO_Setup+0x19e>
          break;
 80071f4:	bf00      	nop
 80071f6:	e008      	b.n	800720a <USBD_AUDIO_Setup+0x1ae>
          break;
 80071f8:	bf00      	nop
      }
      break;
 80071fa:	e006      	b.n	800720a <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 fc7b 	bl	8008afa <USBD_CtlError>
      ret = USBD_FAIL;
 8007204:	2303      	movs	r3, #3
 8007206:	75fb      	strb	r3, [r7, #23]
      break;
 8007208:	bf00      	nop
  }

  return (uint8_t)ret;
 800720a:	7dfb      	ldrb	r3, [r7, #23]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	226d      	movs	r2, #109	; 0x6d
 8007220:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8007222:	4b03      	ldr	r3, [pc, #12]	; (8007230 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	20000044 	.word	0x20000044

08007234 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	32b0      	adds	r2, #176	; 0xb0
 8007260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007264:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	e02a      	b.n	80072c6 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007276:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 800727a:	2b01      	cmp	r3, #1
 800727c:	d122      	bne.n	80072c4 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007284:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 8007288:	2b02      	cmp	r3, #2
 800728a:	d11b      	bne.n	80072c4 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	33b0      	adds	r3, #176	; 0xb0
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80072a4:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 80072a8:	4610      	mov	r0, r2
 80072aa:	4798      	blx	r3
      haudio->control.cmd = 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <USBD_AUDIO_Sync>:
  * @param  pdev: device instance
  * @param  offset: audio offset
  * @retval status
  */
void USBD_AUDIO_Sync(USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	460b      	mov	r3, r1
 8007304:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint32_t BufferSize = AUDIO_TOTAL_BUF_SIZE / 2U;
 8007306:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800730a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	32b0      	adds	r2, #176	; 0xb0
 8007316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 80a3 	beq.w	8007466 <USBD_AUDIO_Sync+0x16c>
  {
    return;
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	32b0      	adds	r2, #176	; 0xb0
 800732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732e:	60bb      	str	r3, [r7, #8]

  haudio->offset = offset;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007336:	461a      	mov	r2, r3
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	f882 3c04 	strb.w	r3, [r2, #3076]	; 0xc04

  if (haudio->rd_enable == 1U)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007344:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8007348:	2b01      	cmp	r3, #1
 800734a:	d11b      	bne.n	8007384 <USBD_AUDIO_Sync+0x8a>
  {
    haudio->rd_ptr += (uint16_t)BufferSize;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007352:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	b29b      	uxth	r3, r3
 800735a:	4413      	add	r3, r2
 800735c:	b29a      	uxth	r2, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007364:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800736e:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8007372:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8007376:	d105      	bne.n	8007384 <USBD_AUDIO_Sync+0x8a>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800737e:	2200      	movs	r2, #0
 8007380:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
    }
  }

  if (haudio->rd_ptr > haudio->wr_ptr)
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800738a:	f8b3 2c06 	ldrh.w	r2, [r3, #3078]	; 0xc06
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007394:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007398:	429a      	cmp	r2, r3
 800739a:	d924      	bls.n	80073e6 <USBD_AUDIO_Sync+0xec>
  {
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073a2:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80073a6:	461a      	mov	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073ae:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2bbf      	cmp	r3, #191	; 0xbf
 80073b6:	dc03      	bgt.n	80073c0 <USBD_AUDIO_Sync+0xc6>
    {
      BufferSize += 4U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3304      	adds	r3, #4
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e036      	b.n	800742e <USBD_AUDIO_Sync+0x134>
    }
    else
    {
      if ((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073c6:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80073ca:	461a      	mov	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073d2:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 80073dc:	dd27      	ble.n	800742e <USBD_AUDIO_Sync+0x134>
      {
        BufferSize -= 4U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3b04      	subs	r3, #4
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e023      	b.n	800742e <USBD_AUDIO_Sync+0x134>
      }
    }
  }
  else
  {
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073ec:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80073f0:	461a      	mov	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80073f8:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2bbf      	cmp	r3, #191	; 0xbf
 8007400:	dc03      	bgt.n	800740a <USBD_AUDIO_Sync+0x110>
    {
      BufferSize -= 4U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3b04      	subs	r3, #4
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e011      	b.n	800742e <USBD_AUDIO_Sync+0x134>
    }
    else
    {
      if ((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007410:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007414:	461a      	mov	r2, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800741c:	f8b3 3c06 	ldrh.w	r3, [r3, #3078]	; 0xc06
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	f5b3 5f6d 	cmp.w	r3, #15168	; 0x3b40
 8007426:	dd02      	ble.n	800742e <USBD_AUDIO_Sync+0x134>
      {
        BufferSize += 4U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3304      	adds	r3, #4
 800742c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if (haudio->offset == AUDIO_OFFSET_FULL)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007434:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8007438:	2b02      	cmp	r3, #2
 800743a:	d115      	bne.n	8007468 <USBD_AUDIO_Sync+0x16e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	33b0      	adds	r3, #176	; 0xb0
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	1d10      	adds	r0, r2, #4
 8007452:	2202      	movs	r2, #2
 8007454:	68f9      	ldr	r1, [r7, #12]
 8007456:	4798      	blx	r3
                                                                        BufferSize, AUDIO_CMD_PLAY);
    haudio->offset = AUDIO_OFFSET_NONE;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
 8007464:	e000      	b.n	8007468 <USBD_AUDIO_Sync+0x16e>
    return;
 8007466:	bf00      	nop
  }
}
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32b0      	adds	r2, #176	; 0xb0
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e07c      	b.n	80075c4 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 80074ca:	4b40      	ldr	r3, [pc, #256]	; (80075cc <USBD_AUDIO_DataOut+0x128>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d176      	bne.n	80075c2 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 f878 	bl	80095ce <USBD_LL_GetRxDataSize>
 80074de:	4603      	mov	r3, r0
 80074e0:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	33b0      	adds	r3, #176	; 0xb0
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80074fa:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 80074fe:	4611      	mov	r1, r2
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	440a      	add	r2, r1
 8007504:	1d10      	adds	r0, r2, #4
 8007506:	8979      	ldrh	r1, [r7, #10]
 8007508:	2201      	movs	r2, #1
 800750a:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007512:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 8007516:	897b      	ldrh	r3, [r7, #10]
 8007518:	4413      	add	r3, r2
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007522:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800752c:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007530:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8007534:	d121      	bne.n	800757a <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800753c:	2200      	movs	r2, #0
 800753e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007548:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 800754c:	2b03      	cmp	r3, #3
 800754e:	d114      	bne.n	800757a <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	33b0      	adds	r3, #176	; 0xb0
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	1d10      	adds	r0, r2, #4
 8007566:	2201      	movs	r2, #1
 8007568:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800756c:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007580:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10d      	bne.n	80075a4 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800758e:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8007592:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8007596:	d105      	bne.n	80075a4 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80075a4:	4b09      	ldr	r3, [pc, #36]	; (80075cc <USBD_AUDIO_DataOut+0x128>)
 80075a6:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80075ae:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80075b2:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	1d1a      	adds	r2, r3, #4
 80075ba:	23c0      	movs	r3, #192	; 0xc0
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 ffe5 	bl	800958c <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	200000be 	.word	0x200000be

080075d0 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	32b0      	adds	r2, #176	; 0xb0
 80075e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e8:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d017      	beq.n	8007620 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80075f6:	330b      	adds	r3, #11
 80075f8:	2240      	movs	r2, #64	; 0x40
 80075fa:	2100      	movs	r1, #0
 80075fc:	4618      	mov	r0, r3
 80075fe:	f002 f861 	bl	80096c4 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007608:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	88d2      	ldrh	r2, [r2, #6]
 800760e:	2a40      	cmp	r2, #64	; 0x40
 8007610:	bf28      	it	cs
 8007612:	2240      	movcs	r2, #64	; 0x40
 8007614:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 fadf 	bl	8008bdc <USBD_CtlSendData>
 800761e:	e000      	b.n	8007622 <AUDIO_REQ_GetCurrent+0x52>
    return;
 8007620:	bf00      	nop
}
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	32b0      	adds	r2, #176	; 0xb0
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d02f      	beq.n	80076a8 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	88db      	ldrh	r3, [r3, #6]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02c      	beq.n	80076aa <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	88db      	ldrh	r3, [r3, #6]
 8007660:	2b3f      	cmp	r3, #63	; 0x3f
 8007662:	d803      	bhi.n	800766c <AUDIO_REQ_SetCurrent+0x44>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	88db      	ldrh	r3, [r3, #6]
 8007668:	b2da      	uxtb	r2, r3
 800766a:	e000      	b.n	800766e <AUDIO_REQ_SetCurrent+0x46>
 800766c:	2240      	movs	r2, #64	; 0x40
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007674:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	889b      	ldrh	r3, [r3, #4]
 800767c:	0a1b      	lsrs	r3, r3, #8
 800767e:	b29b      	uxth	r3, r3
 8007680:	b2da      	uxtb	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007688:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8007692:	330b      	adds	r3, #11
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800769a:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 fac7 	bl	8008c34 <USBD_CtlPrepareRx>
 80076a6:	e000      	b.n	80076aa <AUDIO_REQ_SetCurrent+0x82>
    return;
 80076a8:	bf00      	nop
  }
}
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	220a      	movs	r2, #10
 80076bc:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	200000b4 	.word	0x200000b4

080076d0 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e009      	b.n	80076f8 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	33b0      	adds	r3, #176	; 0xb0
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8007714:	2300      	movs	r3, #0
 8007716:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	885b      	ldrh	r3, [r3, #2]
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b29b      	uxth	r3, r3
 8007724:	429a      	cmp	r2, r3
 8007726:	d91c      	bls.n	8007762 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007730:	e011      	b.n	8007756 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007732:	f107 030a 	add.w	r3, r7, #10
 8007736:	4619      	mov	r1, r3
 8007738:	6978      	ldr	r0, [r7, #20]
 800773a:	f000 fbe0 	bl	8007efe <USBD_GetNextDesc>
 800773e:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	2b24      	cmp	r3, #36	; 0x24
 8007746:	d106      	bne.n	8007756 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800774c:	2b01      	cmp	r3, #1
 800774e:	d102      	bne.n	8007756 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	613b      	str	r3, [r7, #16]
        break;
 8007754:	e005      	b.n	8007762 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	885b      	ldrh	r3, [r3, #2]
 800775a:	b29a      	uxth	r2, r3
 800775c:	897b      	ldrh	r3, [r7, #10]
 800775e:	429a      	cmp	r2, r3
 8007760:	d8e7      	bhi.n	8007732 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 8007762:	693b      	ldr	r3, [r7, #16]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007780:	2303      	movs	r3, #3
 8007782:	e01f      	b.n	80077c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	79fa      	ldrb	r2, [r7, #7]
 80077b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f001 fd91 	bl	80092e0 <USBD_LL_Init>
 80077be:	4603      	mov	r3, r0
 80077c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e025      	b.n	8007830 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	32ae      	adds	r2, #174	; 0xae
 80077f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00f      	beq.n	8007820 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	32ae      	adds	r2, #174	; 0xae
 800780a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	f107 020e 	add.w	r2, r7, #14
 8007814:	4610      	mov	r0, r2
 8007816:	4798      	blx	r3
 8007818:	4602      	mov	r2, r0
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 fd99 	bl	8009378 <USBD_LL_Start>
 8007846:	4603      	mov	r3, r0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007858:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787c:	2b00      	cmp	r3, #0
 800787e:	d009      	beq.n	8007894 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	78fa      	ldrb	r2, [r7, #3]
 800788a:	4611      	mov	r1, r2
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	460b      	mov	r3, r1
 80078a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	4611      	mov	r1, r2
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4798      	blx	r3
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078c4:	2303      	movs	r3, #3
 80078c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 f8ce 	bl	8008a86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078f8:	461a      	mov	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2b02      	cmp	r3, #2
 800790c:	d01a      	beq.n	8007944 <USBD_LL_SetupStage+0x72>
 800790e:	2b02      	cmp	r3, #2
 8007910:	d822      	bhi.n	8007958 <USBD_LL_SetupStage+0x86>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <USBD_LL_SetupStage+0x4a>
 8007916:	2b01      	cmp	r3, #1
 8007918:	d00a      	beq.n	8007930 <USBD_LL_SetupStage+0x5e>
 800791a:	e01d      	b.n	8007958 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fb25 	bl	8007f74 <USBD_StdDevReq>
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]
      break;
 800792e:	e020      	b.n	8007972 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fb8d 	bl	8008058 <USBD_StdItfReq>
 800793e:	4603      	mov	r3, r0
 8007940:	73fb      	strb	r3, [r7, #15]
      break;
 8007942:	e016      	b.n	8007972 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fbef 	bl	8008130 <USBD_StdEPReq>
 8007952:	4603      	mov	r3, r0
 8007954:	73fb      	strb	r3, [r7, #15]
      break;
 8007956:	e00c      	b.n	8007972 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800795e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007962:	b2db      	uxtb	r3, r3
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 fd66 	bl	8009438 <USBD_LL_StallEP>
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]
      break;
 8007970:	bf00      	nop
  }

  return ret;
 8007972:	7bfb      	ldrb	r3, [r7, #15]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	460b      	mov	r3, r1
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800798e:	7afb      	ldrb	r3, [r7, #11]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d16e      	bne.n	8007a72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800799a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	f040 8098 	bne.w	8007ad8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d913      	bls.n	80079dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	1ad2      	subs	r2, r2, r3
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	4293      	cmp	r3, r2
 80079cc:	bf28      	it	cs
 80079ce:	4613      	movcs	r3, r2
 80079d0:	461a      	mov	r2, r3
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f001 f94a 	bl	8008c6e <USBD_CtlContinueRx>
 80079da:	e07d      	b.n	8007ad8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d014      	beq.n	8007a14 <USBD_LL_DataOutStage+0x98>
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d81d      	bhi.n	8007a2a <USBD_LL_DataOutStage+0xae>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <USBD_LL_DataOutStage+0x7c>
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d003      	beq.n	80079fe <USBD_LL_DataOutStage+0x82>
 80079f6:	e018      	b.n	8007a2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	75bb      	strb	r3, [r7, #22]
            break;
 80079fc:	e018      	b.n	8007a30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	4619      	mov	r1, r3
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fa5e 	bl	8007eca <USBD_CoreFindIF>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75bb      	strb	r3, [r7, #22]
            break;
 8007a12:	e00d      	b.n	8007a30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fa60 	bl	8007ee4 <USBD_CoreFindEP>
 8007a24:	4603      	mov	r3, r0
 8007a26:	75bb      	strb	r3, [r7, #22]
            break;
 8007a28:	e002      	b.n	8007a30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	75bb      	strb	r3, [r7, #22]
            break;
 8007a2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a30:	7dbb      	ldrb	r3, [r7, #22]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d119      	bne.n	8007a6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d113      	bne.n	8007a6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a42:	7dba      	ldrb	r2, [r7, #22]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	32ae      	adds	r2, #174	; 0xae
 8007a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00b      	beq.n	8007a6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a52:	7dba      	ldrb	r2, [r7, #22]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a5a:	7dba      	ldrb	r2, [r7, #22]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	32ae      	adds	r2, #174	; 0xae
 8007a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f001 f910 	bl	8008c90 <USBD_CtlSendStatus>
 8007a70:	e032      	b.n	8007ad8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fa31 	bl	8007ee4 <USBD_CoreFindEP>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a86:	7dbb      	ldrb	r3, [r7, #22]
 8007a88:	2bff      	cmp	r3, #255	; 0xff
 8007a8a:	d025      	beq.n	8007ad8 <USBD_LL_DataOutStage+0x15c>
 8007a8c:	7dbb      	ldrb	r3, [r7, #22]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d122      	bne.n	8007ad8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d117      	bne.n	8007ace <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a9e:	7dba      	ldrb	r2, [r7, #22]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	32ae      	adds	r2, #174	; 0xae
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00f      	beq.n	8007ace <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007aae:	7dba      	ldrb	r2, [r7, #22]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ab6:	7dba      	ldrb	r2, [r7, #22]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	32ae      	adds	r2, #174	; 0xae
 8007abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	7afa      	ldrb	r2, [r7, #11]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	4798      	blx	r3
 8007aca:	4603      	mov	r3, r0
 8007acc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	e000      	b.n	8007ada <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b086      	sub	sp, #24
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	460b      	mov	r3, r1
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007af0:	7afb      	ldrb	r3, [r7, #11]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d16f      	bne.n	8007bd6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3314      	adds	r3, #20
 8007afa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d15a      	bne.n	8007bbc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d914      	bls.n	8007b3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	1ad2      	subs	r2, r2, r3
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	461a      	mov	r2, r3
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f001 f872 	bl	8008c12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2200      	movs	r2, #0
 8007b32:	2100      	movs	r1, #0
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f001 fd29 	bl	800958c <USBD_LL_PrepareReceive>
 8007b3a:	e03f      	b.n	8007bbc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	68da      	ldr	r2, [r3, #12]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d11c      	bne.n	8007b82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d316      	bcc.n	8007b82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d20f      	bcs.n	8007b82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b62:	2200      	movs	r2, #0
 8007b64:	2100      	movs	r1, #0
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f001 f853 	bl	8008c12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b74:	2300      	movs	r3, #0
 8007b76:	2200      	movs	r2, #0
 8007b78:	2100      	movs	r1, #0
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f001 fd06 	bl	800958c <USBD_LL_PrepareReceive>
 8007b80:	e01c      	b.n	8007bbc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d10f      	bne.n	8007bae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bae:	2180      	movs	r1, #128	; 0x80
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f001 fc41 	bl	8009438 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f001 f87d 	bl	8008cb6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d03a      	beq.n	8007c3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7ff fe42 	bl	8007850 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bd4:	e032      	b.n	8007c3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bd6:	7afb      	ldrb	r3, [r7, #11]
 8007bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	4619      	mov	r1, r3
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f97f 	bl	8007ee4 <USBD_CoreFindEP>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
 8007bec:	2bff      	cmp	r3, #255	; 0xff
 8007bee:	d025      	beq.n	8007c3c <USBD_LL_DataInStage+0x15a>
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d122      	bne.n	8007c3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d11c      	bne.n	8007c3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c02:	7dfa      	ldrb	r2, [r7, #23]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	32ae      	adds	r2, #174	; 0xae
 8007c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d014      	beq.n	8007c3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c12:	7dfa      	ldrb	r2, [r7, #23]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c1a:	7dfa      	ldrb	r2, [r7, #23]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	32ae      	adds	r2, #174	; 0xae
 8007c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	7afa      	ldrb	r2, [r7, #11]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	4798      	blx	r3
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c32:	7dbb      	ldrb	r3, [r7, #22]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c38:	7dbb      	ldrb	r3, [r7, #22]
 8007c3a:	e000      	b.n	8007c3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d014      	beq.n	8007cac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00e      	beq.n	8007cac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6852      	ldr	r2, [r2, #4]
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cac:	2340      	movs	r3, #64	; 0x40
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fb7b 	bl	80093ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2240      	movs	r2, #64	; 0x40
 8007cc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cc8:	2340      	movs	r3, #64	; 0x40
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2180      	movs	r1, #128	; 0x80
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 fb6d 	bl	80093ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2240      	movs	r2, #64	; 0x40
 8007cde:	621a      	str	r2, [r3, #32]

  return ret;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2204      	movs	r2, #4
 8007d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d106      	bne.n	8007d58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d110      	bne.n	8007d9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	32ae      	adds	r2, #174	; 0xae
 8007dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e01c      	b.n	8007e02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d115      	bne.n	8007e00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	32ae      	adds	r2, #174	; 0xae
 8007dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	32ae      	adds	r2, #174	; 0xae
 8007df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	78fa      	ldrb	r2, [r7, #3]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	32ae      	adds	r2, #174	; 0xae
 8007e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e01c      	b.n	8007e66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d115      	bne.n	8007e64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	32ae      	adds	r2, #174	; 0xae
 8007e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	32ae      	adds	r2, #174	; 0xae
 8007e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00e      	beq.n	8007ec0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6852      	ldr	r2, [r2, #4]
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ed6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ef0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	881a      	ldrh	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	4413      	add	r3, r2
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4413      	add	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f56:	8a3b      	ldrh	r3, [r7, #16]
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	b21a      	sxth	r2, r3
 8007f5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	b21b      	sxth	r3, r3
 8007f64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f66:	89fb      	ldrh	r3, [r7, #14]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d005      	beq.n	8007f9a <USBD_StdDevReq+0x26>
 8007f8e:	2b40      	cmp	r3, #64	; 0x40
 8007f90:	d857      	bhi.n	8008042 <USBD_StdDevReq+0xce>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00f      	beq.n	8007fb6 <USBD_StdDevReq+0x42>
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	d153      	bne.n	8008042 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	32ae      	adds	r2, #174	; 0xae
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb4:	e04a      	b.n	800804c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	2b09      	cmp	r3, #9
 8007fbc:	d83b      	bhi.n	8008036 <USBD_StdDevReq+0xc2>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <USBD_StdDevReq+0x50>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08008019 	.word	0x08008019
 8007fc8:	0800802d 	.word	0x0800802d
 8007fcc:	08008037 	.word	0x08008037
 8007fd0:	08008023 	.word	0x08008023
 8007fd4:	08008037 	.word	0x08008037
 8007fd8:	08007ff7 	.word	0x08007ff7
 8007fdc:	08007fed 	.word	0x08007fed
 8007fe0:	08008037 	.word	0x08008037
 8007fe4:	0800800f 	.word	0x0800800f
 8007fe8:	08008001 	.word	0x08008001
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa3c 	bl	800846c <USBD_GetDescriptor>
          break;
 8007ff4:	e024      	b.n	8008040 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fba1 	bl	8008740 <USBD_SetAddress>
          break;
 8007ffe:	e01f      	b.n	8008040 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fbe0 	bl	80087c8 <USBD_SetConfig>
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]
          break;
 800800c:	e018      	b.n	8008040 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fc83 	bl	800891c <USBD_GetConfig>
          break;
 8008016:	e013      	b.n	8008040 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fcb4 	bl	8008988 <USBD_GetStatus>
          break;
 8008020:	e00e      	b.n	8008040 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fce3 	bl	80089f0 <USBD_SetFeature>
          break;
 800802a:	e009      	b.n	8008040 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fd07 	bl	8008a42 <USBD_ClrFeature>
          break;
 8008034:	e004      	b.n	8008040 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fd5e 	bl	8008afa <USBD_CtlError>
          break;
 800803e:	bf00      	nop
      }
      break;
 8008040:	e004      	b.n	800804c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fd58 	bl	8008afa <USBD_CtlError>
      break;
 800804a:	bf00      	nop
  }

  return ret;
 800804c:	7bfb      	ldrb	r3, [r7, #15]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop

08008058 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	d005      	beq.n	800807e <USBD_StdItfReq+0x26>
 8008072:	2b40      	cmp	r3, #64	; 0x40
 8008074:	d852      	bhi.n	800811c <USBD_StdItfReq+0xc4>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <USBD_StdItfReq+0x26>
 800807a:	2b20      	cmp	r3, #32
 800807c:	d14e      	bne.n	800811c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008084:	b2db      	uxtb	r3, r3
 8008086:	3b01      	subs	r3, #1
 8008088:	2b02      	cmp	r3, #2
 800808a:	d840      	bhi.n	800810e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	889b      	ldrh	r3, [r3, #4]
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d836      	bhi.n	8008104 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	889b      	ldrh	r3, [r3, #4]
 800809a:	b2db      	uxtb	r3, r3
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff ff13 	bl	8007eca <USBD_CoreFindIF>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	2bff      	cmp	r3, #255	; 0xff
 80080ac:	d01d      	beq.n	80080ea <USBD_StdItfReq+0x92>
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d11a      	bne.n	80080ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080b4:	7bba      	ldrb	r2, [r7, #14]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	32ae      	adds	r2, #174	; 0xae
 80080ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00f      	beq.n	80080e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080c4:	7bba      	ldrb	r2, [r7, #14]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080cc:	7bba      	ldrb	r2, [r7, #14]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32ae      	adds	r2, #174	; 0xae
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080e2:	e004      	b.n	80080ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80080e4:	2303      	movs	r3, #3
 80080e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080e8:	e001      	b.n	80080ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80080ea:	2303      	movs	r3, #3
 80080ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	88db      	ldrh	r3, [r3, #6]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d110      	bne.n	8008118 <USBD_StdItfReq+0xc0>
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10d      	bne.n	8008118 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fdc7 	bl	8008c90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008102:	e009      	b.n	8008118 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fcf7 	bl	8008afa <USBD_CtlError>
          break;
 800810c:	e004      	b.n	8008118 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fcf2 	bl	8008afa <USBD_CtlError>
          break;
 8008116:	e000      	b.n	800811a <USBD_StdItfReq+0xc2>
          break;
 8008118:	bf00      	nop
      }
      break;
 800811a:	e004      	b.n	8008126 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fceb 	bl	8008afa <USBD_CtlError>
      break;
 8008124:	bf00      	nop
  }

  return ret;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	889b      	ldrh	r3, [r3, #4]
 8008142:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d007      	beq.n	8008160 <USBD_StdEPReq+0x30>
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	f200 817f 	bhi.w	8008454 <USBD_StdEPReq+0x324>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d02a      	beq.n	80081b0 <USBD_StdEPReq+0x80>
 800815a:	2b20      	cmp	r3, #32
 800815c:	f040 817a 	bne.w	8008454 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff febd 	bl	8007ee4 <USBD_CoreFindEP>
 800816a:	4603      	mov	r3, r0
 800816c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800816e:	7b7b      	ldrb	r3, [r7, #13]
 8008170:	2bff      	cmp	r3, #255	; 0xff
 8008172:	f000 8174 	beq.w	800845e <USBD_StdEPReq+0x32e>
 8008176:	7b7b      	ldrb	r3, [r7, #13]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 8170 	bne.w	800845e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800817e:	7b7a      	ldrb	r2, [r7, #13]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008186:	7b7a      	ldrb	r2, [r7, #13]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	32ae      	adds	r2, #174	; 0xae
 800818c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8163 	beq.w	800845e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008198:	7b7a      	ldrb	r2, [r7, #13]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	32ae      	adds	r2, #174	; 0xae
 800819e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081ae:	e156      	b.n	800845e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d008      	beq.n	80081ca <USBD_StdEPReq+0x9a>
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	f300 8145 	bgt.w	8008448 <USBD_StdEPReq+0x318>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 809b 	beq.w	80082fa <USBD_StdEPReq+0x1ca>
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d03c      	beq.n	8008242 <USBD_StdEPReq+0x112>
 80081c8:	e13e      	b.n	8008448 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d002      	beq.n	80081dc <USBD_StdEPReq+0xac>
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d016      	beq.n	8008208 <USBD_StdEPReq+0xd8>
 80081da:	e02c      	b.n	8008236 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00d      	beq.n	80081fe <USBD_StdEPReq+0xce>
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b80      	cmp	r3, #128	; 0x80
 80081e6:	d00a      	beq.n	80081fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f923 	bl	8009438 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081f2:	2180      	movs	r1, #128	; 0x80
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 f91f 	bl	8009438 <USBD_LL_StallEP>
 80081fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081fc:	e020      	b.n	8008240 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc7a 	bl	8008afa <USBD_CtlError>
              break;
 8008206:	e01b      	b.n	8008240 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	885b      	ldrh	r3, [r3, #2]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10e      	bne.n	800822e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00b      	beq.n	800822e <USBD_StdEPReq+0xfe>
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	2b80      	cmp	r3, #128	; 0x80
 800821a:	d008      	beq.n	800822e <USBD_StdEPReq+0xfe>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	88db      	ldrh	r3, [r3, #6]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 f905 	bl	8009438 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fd2e 	bl	8008c90 <USBD_CtlSendStatus>

              break;
 8008234:	e004      	b.n	8008240 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fc5e 	bl	8008afa <USBD_CtlError>
              break;
 800823e:	bf00      	nop
          }
          break;
 8008240:	e107      	b.n	8008452 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d002      	beq.n	8008254 <USBD_StdEPReq+0x124>
 800824e:	2b03      	cmp	r3, #3
 8008250:	d016      	beq.n	8008280 <USBD_StdEPReq+0x150>
 8008252:	e04b      	b.n	80082ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00d      	beq.n	8008276 <USBD_StdEPReq+0x146>
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b80      	cmp	r3, #128	; 0x80
 800825e:	d00a      	beq.n	8008276 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 f8e7 	bl	8009438 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800826a:	2180      	movs	r1, #128	; 0x80
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f8e3 	bl	8009438 <USBD_LL_StallEP>
 8008272:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008274:	e040      	b.n	80082f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc3e 	bl	8008afa <USBD_CtlError>
              break;
 800827e:	e03b      	b.n	80082f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	885b      	ldrh	r3, [r3, #2]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d136      	bne.n	80082f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 f8ed 	bl	8009476 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fcf7 	bl	8008c90 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff fe1c 	bl	8007ee4 <USBD_CoreFindEP>
 80082ac:	4603      	mov	r3, r0
 80082ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082b0:	7b7b      	ldrb	r3, [r7, #13]
 80082b2:	2bff      	cmp	r3, #255	; 0xff
 80082b4:	d01f      	beq.n	80082f6 <USBD_StdEPReq+0x1c6>
 80082b6:	7b7b      	ldrb	r3, [r7, #13]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d11c      	bne.n	80082f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082bc:	7b7a      	ldrb	r2, [r7, #13]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082c4:	7b7a      	ldrb	r2, [r7, #13]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	32ae      	adds	r2, #174	; 0xae
 80082ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d010      	beq.n	80082f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082d4:	7b7a      	ldrb	r2, [r7, #13]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	32ae      	adds	r2, #174	; 0xae
 80082da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80082ea:	e004      	b.n	80082f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fc03 	bl	8008afa <USBD_CtlError>
              break;
 80082f4:	e000      	b.n	80082f8 <USBD_StdEPReq+0x1c8>
              break;
 80082f6:	bf00      	nop
          }
          break;
 80082f8:	e0ab      	b.n	8008452 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d002      	beq.n	800830c <USBD_StdEPReq+0x1dc>
 8008306:	2b03      	cmp	r3, #3
 8008308:	d032      	beq.n	8008370 <USBD_StdEPReq+0x240>
 800830a:	e097      	b.n	800843c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d007      	beq.n	8008322 <USBD_StdEPReq+0x1f2>
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b80      	cmp	r3, #128	; 0x80
 8008316:	d004      	beq.n	8008322 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fbed 	bl	8008afa <USBD_CtlError>
                break;
 8008320:	e091      	b.n	8008446 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008326:	2b00      	cmp	r3, #0
 8008328:	da0b      	bge.n	8008342 <USBD_StdEPReq+0x212>
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	3310      	adds	r3, #16
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	3304      	adds	r3, #4
 8008340:	e00b      	b.n	800835a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4413      	add	r3, r2
 8008358:	3304      	adds	r3, #4
 800835a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2202      	movs	r2, #2
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fc37 	bl	8008bdc <USBD_CtlSendData>
              break;
 800836e:	e06a      	b.n	8008446 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008374:	2b00      	cmp	r3, #0
 8008376:	da11      	bge.n	800839c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	f003 020f 	and.w	r2, r3, #15
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	3324      	adds	r3, #36	; 0x24
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d117      	bne.n	80083c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fbb0 	bl	8008afa <USBD_CtlError>
                  break;
 800839a:	e054      	b.n	8008446 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	f003 020f 	and.w	r2, r3, #15
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d104      	bne.n	80083c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fb9d 	bl	8008afa <USBD_CtlError>
                  break;
 80083c0:	e041      	b.n	8008446 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	da0b      	bge.n	80083e2 <USBD_StdEPReq+0x2b2>
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	3310      	adds	r3, #16
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	3304      	adds	r3, #4
 80083e0:	e00b      	b.n	80083fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	4413      	add	r3, r2
 80083f8:	3304      	adds	r3, #4
 80083fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <USBD_StdEPReq+0x2d8>
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b80      	cmp	r3, #128	; 0x80
 8008406:	d103      	bne.n	8008410 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e00e      	b.n	800842e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 f84d 	bl	80094b4 <USBD_LL_IsStallEP>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	e002      	b.n	800842e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2202      	movs	r2, #2
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fbd1 	bl	8008bdc <USBD_CtlSendData>
              break;
 800843a:	e004      	b.n	8008446 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fb5b 	bl	8008afa <USBD_CtlError>
              break;
 8008444:	bf00      	nop
          }
          break;
 8008446:	e004      	b.n	8008452 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fb55 	bl	8008afa <USBD_CtlError>
          break;
 8008450:	bf00      	nop
      }
      break;
 8008452:	e005      	b.n	8008460 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fb4f 	bl	8008afa <USBD_CtlError>
      break;
 800845c:	e000      	b.n	8008460 <USBD_StdEPReq+0x330>
      break;
 800845e:	bf00      	nop
  }

  return ret;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	885b      	ldrh	r3, [r3, #2]
 8008486:	0a1b      	lsrs	r3, r3, #8
 8008488:	b29b      	uxth	r3, r3
 800848a:	3b01      	subs	r3, #1
 800848c:	2b06      	cmp	r3, #6
 800848e:	f200 8128 	bhi.w	80086e2 <USBD_GetDescriptor+0x276>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <USBD_GetDescriptor+0x2c>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084b5 	.word	0x080084b5
 800849c:	080084cd 	.word	0x080084cd
 80084a0:	0800850d 	.word	0x0800850d
 80084a4:	080086e3 	.word	0x080086e3
 80084a8:	080086e3 	.word	0x080086e3
 80084ac:	08008683 	.word	0x08008683
 80084b0:	080086af 	.word	0x080086af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	7c12      	ldrb	r2, [r2, #16]
 80084c0:	f107 0108 	add.w	r1, r7, #8
 80084c4:	4610      	mov	r0, r2
 80084c6:	4798      	blx	r3
 80084c8:	60f8      	str	r0, [r7, #12]
      break;
 80084ca:	e112      	b.n	80086f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7c1b      	ldrb	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10d      	bne.n	80084f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084dc:	f107 0208 	add.w	r2, r7, #8
 80084e0:	4610      	mov	r0, r2
 80084e2:	4798      	blx	r3
 80084e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3301      	adds	r3, #1
 80084ea:	2202      	movs	r2, #2
 80084ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084ee:	e100      	b.n	80086f2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	f107 0208 	add.w	r2, r7, #8
 80084fc:	4610      	mov	r0, r2
 80084fe:	4798      	blx	r3
 8008500:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3301      	adds	r3, #1
 8008506:	2202      	movs	r2, #2
 8008508:	701a      	strb	r2, [r3, #0]
      break;
 800850a:	e0f2      	b.n	80086f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	885b      	ldrh	r3, [r3, #2]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b05      	cmp	r3, #5
 8008514:	f200 80ac 	bhi.w	8008670 <USBD_GetDescriptor+0x204>
 8008518:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <USBD_GetDescriptor+0xb4>)
 800851a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851e:	bf00      	nop
 8008520:	08008539 	.word	0x08008539
 8008524:	0800856d 	.word	0x0800856d
 8008528:	080085a1 	.word	0x080085a1
 800852c:	080085d5 	.word	0x080085d5
 8008530:	08008609 	.word	0x08008609
 8008534:	0800863d 	.word	0x0800863d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	7c12      	ldrb	r2, [r2, #16]
 8008550:	f107 0108 	add.w	r1, r7, #8
 8008554:	4610      	mov	r0, r2
 8008556:	4798      	blx	r3
 8008558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800855a:	e091      	b.n	8008680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 facb 	bl	8008afa <USBD_CtlError>
            err++;
 8008564:	7afb      	ldrb	r3, [r7, #11]
 8008566:	3301      	adds	r3, #1
 8008568:	72fb      	strb	r3, [r7, #11]
          break;
 800856a:	e089      	b.n	8008680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	7c12      	ldrb	r2, [r2, #16]
 8008584:	f107 0108 	add.w	r1, r7, #8
 8008588:	4610      	mov	r0, r2
 800858a:	4798      	blx	r3
 800858c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800858e:	e077      	b.n	8008680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fab1 	bl	8008afa <USBD_CtlError>
            err++;
 8008598:	7afb      	ldrb	r3, [r7, #11]
 800859a:	3301      	adds	r3, #1
 800859c:	72fb      	strb	r3, [r7, #11]
          break;
 800859e:	e06f      	b.n	8008680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	7c12      	ldrb	r2, [r2, #16]
 80085b8:	f107 0108 	add.w	r1, r7, #8
 80085bc:	4610      	mov	r0, r2
 80085be:	4798      	blx	r3
 80085c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085c2:	e05d      	b.n	8008680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fa97 	bl	8008afa <USBD_CtlError>
            err++;
 80085cc:	7afb      	ldrb	r3, [r7, #11]
 80085ce:	3301      	adds	r3, #1
 80085d0:	72fb      	strb	r3, [r7, #11]
          break;
 80085d2:	e055      	b.n	8008680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	7c12      	ldrb	r2, [r2, #16]
 80085ec:	f107 0108 	add.w	r1, r7, #8
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085f6:	e043      	b.n	8008680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa7d 	bl	8008afa <USBD_CtlError>
            err++;
 8008600:	7afb      	ldrb	r3, [r7, #11]
 8008602:	3301      	adds	r3, #1
 8008604:	72fb      	strb	r3, [r7, #11]
          break;
 8008606:	e03b      	b.n	8008680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	7c12      	ldrb	r2, [r2, #16]
 8008620:	f107 0108 	add.w	r1, r7, #8
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862a:	e029      	b.n	8008680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa63 	bl	8008afa <USBD_CtlError>
            err++;
 8008634:	7afb      	ldrb	r3, [r7, #11]
 8008636:	3301      	adds	r3, #1
 8008638:	72fb      	strb	r3, [r7, #11]
          break;
 800863a:	e021      	b.n	8008680 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00b      	beq.n	8008660 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	7c12      	ldrb	r2, [r2, #16]
 8008654:	f107 0108 	add.w	r1, r7, #8
 8008658:	4610      	mov	r0, r2
 800865a:	4798      	blx	r3
 800865c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800865e:	e00f      	b.n	8008680 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fa49 	bl	8008afa <USBD_CtlError>
            err++;
 8008668:	7afb      	ldrb	r3, [r7, #11]
 800866a:	3301      	adds	r3, #1
 800866c:	72fb      	strb	r3, [r7, #11]
          break;
 800866e:	e007      	b.n	8008680 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa41 	bl	8008afa <USBD_CtlError>
          err++;
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	3301      	adds	r3, #1
 800867c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800867e:	bf00      	nop
      }
      break;
 8008680:	e037      	b.n	80086f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	7c1b      	ldrb	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d109      	bne.n	800869e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008692:	f107 0208 	add.w	r2, r7, #8
 8008696:	4610      	mov	r0, r2
 8008698:	4798      	blx	r3
 800869a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800869c:	e029      	b.n	80086f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fa2a 	bl	8008afa <USBD_CtlError>
        err++;
 80086a6:	7afb      	ldrb	r3, [r7, #11]
 80086a8:	3301      	adds	r3, #1
 80086aa:	72fb      	strb	r3, [r7, #11]
      break;
 80086ac:	e021      	b.n	80086f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	7c1b      	ldrb	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10d      	bne.n	80086d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086be:	f107 0208 	add.w	r2, r7, #8
 80086c2:	4610      	mov	r0, r2
 80086c4:	4798      	blx	r3
 80086c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3301      	adds	r3, #1
 80086cc:	2207      	movs	r2, #7
 80086ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086d0:	e00f      	b.n	80086f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa10 	bl	8008afa <USBD_CtlError>
        err++;
 80086da:	7afb      	ldrb	r3, [r7, #11]
 80086dc:	3301      	adds	r3, #1
 80086de:	72fb      	strb	r3, [r7, #11]
      break;
 80086e0:	e007      	b.n	80086f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa08 	bl	8008afa <USBD_CtlError>
      err++;
 80086ea:	7afb      	ldrb	r3, [r7, #11]
 80086ec:	3301      	adds	r3, #1
 80086ee:	72fb      	strb	r3, [r7, #11]
      break;
 80086f0:	bf00      	nop
  }

  if (err != 0U)
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d11e      	bne.n	8008736 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	88db      	ldrh	r3, [r3, #6]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d016      	beq.n	800872e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008700:	893b      	ldrh	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00e      	beq.n	8008724 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	88da      	ldrh	r2, [r3, #6]
 800870a:	893b      	ldrh	r3, [r7, #8]
 800870c:	4293      	cmp	r3, r2
 800870e:	bf28      	it	cs
 8008710:	4613      	movcs	r3, r2
 8008712:	b29b      	uxth	r3, r3
 8008714:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008716:	893b      	ldrh	r3, [r7, #8]
 8008718:	461a      	mov	r2, r3
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fa5d 	bl	8008bdc <USBD_CtlSendData>
 8008722:	e009      	b.n	8008738 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f9e7 	bl	8008afa <USBD_CtlError>
 800872c:	e004      	b.n	8008738 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 faae 	bl	8008c90 <USBD_CtlSendStatus>
 8008734:	e000      	b.n	8008738 <USBD_GetDescriptor+0x2cc>
    return;
 8008736:	bf00      	nop
  }
}
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop

08008740 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	889b      	ldrh	r3, [r3, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d131      	bne.n	80087b6 <USBD_SetAddress+0x76>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	88db      	ldrh	r3, [r3, #6]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d12d      	bne.n	80087b6 <USBD_SetAddress+0x76>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	885b      	ldrh	r3, [r3, #2]
 800875e:	2b7f      	cmp	r3, #127	; 0x7f
 8008760:	d829      	bhi.n	80087b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	885b      	ldrh	r3, [r3, #2]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b03      	cmp	r3, #3
 8008778:	d104      	bne.n	8008784 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f9bc 	bl	8008afa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008782:	e01d      	b.n	80087c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	7bfa      	ldrb	r2, [r7, #15]
 8008788:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 febb 	bl	800950c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa7a 	bl	8008c90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087aa:	e009      	b.n	80087c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b4:	e004      	b.n	80087c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f99e 	bl	8008afa <USBD_CtlError>
  }
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	885b      	ldrh	r3, [r3, #2]
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	4b4e      	ldr	r3, [pc, #312]	; (8008918 <USBD_SetConfig+0x150>)
 80087de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087e0:	4b4d      	ldr	r3, [pc, #308]	; (8008918 <USBD_SetConfig+0x150>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d905      	bls.n	80087f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f985 	bl	8008afa <USBD_CtlError>
    return USBD_FAIL;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e08c      	b.n	800890e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d002      	beq.n	8008806 <USBD_SetConfig+0x3e>
 8008800:	2b03      	cmp	r3, #3
 8008802:	d029      	beq.n	8008858 <USBD_SetConfig+0x90>
 8008804:	e075      	b.n	80088f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008806:	4b44      	ldr	r3, [pc, #272]	; (8008918 <USBD_SetConfig+0x150>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d020      	beq.n	8008850 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800880e:	4b42      	ldr	r3, [pc, #264]	; (8008918 <USBD_SetConfig+0x150>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008818:	4b3f      	ldr	r3, [pc, #252]	; (8008918 <USBD_SetConfig+0x150>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff f821 	bl	8007866 <USBD_SetClassConfig>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d008      	beq.n	8008840 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f962 	bl	8008afa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2202      	movs	r2, #2
 800883a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800883e:	e065      	b.n	800890c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fa25 	bl	8008c90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2203      	movs	r2, #3
 800884a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800884e:	e05d      	b.n	800890c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fa1d 	bl	8008c90 <USBD_CtlSendStatus>
      break;
 8008856:	e059      	b.n	800890c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008858:	4b2f      	ldr	r3, [pc, #188]	; (8008918 <USBD_SetConfig+0x150>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d112      	bne.n	8008886 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008868:	4b2b      	ldr	r3, [pc, #172]	; (8008918 <USBD_SetConfig+0x150>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008872:	4b29      	ldr	r3, [pc, #164]	; (8008918 <USBD_SetConfig+0x150>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff f810 	bl	800789e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fa06 	bl	8008c90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008884:	e042      	b.n	800890c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008886:	4b24      	ldr	r3, [pc, #144]	; (8008918 <USBD_SetConfig+0x150>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d02a      	beq.n	80088ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7fe fffe 	bl	800789e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088a2:	4b1d      	ldr	r3, [pc, #116]	; (8008918 <USBD_SetConfig+0x150>)
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088ac:	4b1a      	ldr	r3, [pc, #104]	; (8008918 <USBD_SetConfig+0x150>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fe ffd7 	bl	8007866 <USBD_SetClassConfig>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00f      	beq.n	80088e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f918 	bl	8008afa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7fe ffe3 	bl	800789e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088e0:	e014      	b.n	800890c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f9d4 	bl	8008c90 <USBD_CtlSendStatus>
      break;
 80088e8:	e010      	b.n	800890c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f9d0 	bl	8008c90 <USBD_CtlSendStatus>
      break;
 80088f0:	e00c      	b.n	800890c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f900 	bl	8008afa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088fa:	4b07      	ldr	r3, [pc, #28]	; (8008918 <USBD_SetConfig+0x150>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7fe ffcc 	bl	800789e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008906:	2303      	movs	r3, #3
 8008908:	73fb      	strb	r3, [r7, #15]
      break;
 800890a:	bf00      	nop
  }

  return ret;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	200001f4 	.word	0x200001f4

0800891c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	88db      	ldrh	r3, [r3, #6]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d004      	beq.n	8008938 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f8e2 	bl	8008afa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008936:	e023      	b.n	8008980 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b02      	cmp	r3, #2
 8008942:	dc02      	bgt.n	800894a <USBD_GetConfig+0x2e>
 8008944:	2b00      	cmp	r3, #0
 8008946:	dc03      	bgt.n	8008950 <USBD_GetConfig+0x34>
 8008948:	e015      	b.n	8008976 <USBD_GetConfig+0x5a>
 800894a:	2b03      	cmp	r3, #3
 800894c:	d00b      	beq.n	8008966 <USBD_GetConfig+0x4a>
 800894e:	e012      	b.n	8008976 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3308      	adds	r3, #8
 800895a:	2201      	movs	r2, #1
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f93c 	bl	8008bdc <USBD_CtlSendData>
        break;
 8008964:	e00c      	b.n	8008980 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3304      	adds	r3, #4
 800896a:	2201      	movs	r2, #1
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f934 	bl	8008bdc <USBD_CtlSendData>
        break;
 8008974:	e004      	b.n	8008980 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f8be 	bl	8008afa <USBD_CtlError>
        break;
 800897e:	bf00      	nop
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	2b02      	cmp	r3, #2
 800899e:	d81e      	bhi.n	80089de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	88db      	ldrh	r3, [r3, #6]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d004      	beq.n	80089b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f8a5 	bl	8008afa <USBD_CtlError>
        break;
 80089b0:	e01a      	b.n	80089e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f043 0202 	orr.w	r2, r3, #2
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	330c      	adds	r3, #12
 80089d2:	2202      	movs	r2, #2
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f900 	bl	8008bdc <USBD_CtlSendData>
      break;
 80089dc:	e004      	b.n	80089e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f88a 	bl	8008afa <USBD_CtlError>
      break;
 80089e6:	bf00      	nop
  }
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	885b      	ldrh	r3, [r3, #2]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d107      	bne.n	8008a12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f940 	bl	8008c90 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a10:	e013      	b.n	8008a3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	885b      	ldrh	r3, [r3, #2]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d10b      	bne.n	8008a32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	889b      	ldrh	r3, [r3, #4]
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f930 	bl	8008c90 <USBD_CtlSendStatus>
}
 8008a30:	e003      	b.n	8008a3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f860 	bl	8008afa <USBD_CtlError>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d80b      	bhi.n	8008a72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	885b      	ldrh	r3, [r3, #2]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d10c      	bne.n	8008a7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f910 	bl	8008c90 <USBD_CtlSendStatus>
      }
      break;
 8008a70:	e004      	b.n	8008a7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f840 	bl	8008afa <USBD_CtlError>
      break;
 8008a7a:	e000      	b.n	8008a7e <USBD_ClrFeature+0x3c>
      break;
 8008a7c:	bf00      	nop
  }
}
 8008a7e:	bf00      	nop
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	781a      	ldrb	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	781a      	ldrb	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3301      	adds	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f7ff fa41 	bl	8007f38 <SWAPBYTE>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f7ff fa34 	bl	8007f38 <SWAPBYTE>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3301      	adds	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f7ff fa27 	bl	8007f38 <SWAPBYTE>
 8008aea:	4603      	mov	r3, r0
 8008aec:	461a      	mov	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	80da      	strh	r2, [r3, #6]
}
 8008af2:	bf00      	nop
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b04:	2180      	movs	r1, #128	; 0x80
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fc96 	bl	8009438 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fc92 	bl	8009438 <USBD_LL_StallEP>
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d036      	beq.n	8008ba0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b36:	6938      	ldr	r0, [r7, #16]
 8008b38:	f000 f836 	bl	8008ba8 <USBD_GetLen>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	3301      	adds	r3, #1
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	4413      	add	r3, r2
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	7812      	ldrb	r2, [r2, #0]
 8008b54:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4413      	add	r3, r2
 8008b62:	2203      	movs	r2, #3
 8008b64:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b6c:	e013      	b.n	8008b96 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	4413      	add	r3, r2
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	7812      	ldrb	r2, [r2, #0]
 8008b78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	613b      	str	r3, [r7, #16]
    idx++;
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	3301      	adds	r3, #1
 8008b84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	3301      	adds	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e7      	bne.n	8008b6e <USBD_GetString+0x52>
 8008b9e:	e000      	b.n	8008ba2 <USBD_GetString+0x86>
    return;
 8008ba0:	bf00      	nop
  }
}
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bb8:	e005      	b.n	8008bc6 <USBD_GetLen+0x1e>
  {
    len++;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f5      	bne.n	8008bba <USBD_GetLen+0x12>
  }

  return len;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	2100      	movs	r1, #0
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fca1 	bl	800954a <USBD_LL_Transmit>

  return USBD_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	2100      	movs	r1, #0
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 fc90 	bl	800954a <USBD_LL_Transmit>

  return USBD_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2203      	movs	r2, #3
 8008c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 fc94 	bl	800958c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	2100      	movs	r1, #0
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 fc83 	bl	800958c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fc4f 	bl	800954a <USBD_LL_Transmit>

  return USBD_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2205      	movs	r2, #5
 8008cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2100      	movs	r1, #0
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fc5d 	bl	800958c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4912      	ldr	r1, [pc, #72]	; (8008d2c <MX_USB_DEVICE_Init+0x50>)
 8008ce4:	4812      	ldr	r0, [pc, #72]	; (8008d30 <MX_USB_DEVICE_Init+0x54>)
 8008ce6:	f7fe fd41 	bl	800776c <USBD_Init>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cf0:	f7f7 fe28 	bl	8000944 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008cf4:	490f      	ldr	r1, [pc, #60]	; (8008d34 <MX_USB_DEVICE_Init+0x58>)
 8008cf6:	480e      	ldr	r0, [pc, #56]	; (8008d30 <MX_USB_DEVICE_Init+0x54>)
 8008cf8:	f7fe fd68 	bl	80077cc <USBD_RegisterClass>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d02:	f7f7 fe1f 	bl	8000944 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8008d06:	490c      	ldr	r1, [pc, #48]	; (8008d38 <MX_USB_DEVICE_Init+0x5c>)
 8008d08:	4809      	ldr	r0, [pc, #36]	; (8008d30 <MX_USB_DEVICE_Init+0x54>)
 8008d0a:	f7fe fce1 	bl	80076d0 <USBD_AUDIO_RegisterInterface>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d14:	f7f7 fe16 	bl	8000944 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d18:	4805      	ldr	r0, [pc, #20]	; (8008d30 <MX_USB_DEVICE_Init+0x54>)
 8008d1a:	f7fe fd8d 	bl	8007838 <USBD_Start>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d24:	f7f7 fe0e 	bl	8000944 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d28:	bf00      	nop
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	200000dc 	.word	0x200000dc
 8008d30:	200001f8 	.word	0x200001f8
 8008d34:	2000000c 	.word	0x2000000c
 8008d38:	200000c0 	.word	0x200000c0

08008d3c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8008d48:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
	Audio_Player_Stop();
 8008d5e:	f7f7 fbd5 	bl	800050c <Audio_Player_Stop>
  UNUSED(options);
  return (USBD_OK);
 8008d62:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	4613      	mov	r3, r2
 8008d78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d002      	beq.n	8008d86 <AUDIO_AudioCmd_FS+0x1a>
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d005      	beq.n	8008d90 <AUDIO_AudioCmd_FS+0x24>
 8008d84:	e009      	b.n	8008d9a <AUDIO_AudioCmd_FS+0x2e>
  {
    case AUDIO_CMD_START:
    	Audio_Player_Play(pbuf, size);
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7f7 fb9f 	bl	80004cc <Audio_Player_Play>
    break;
 8008d8e:	e004      	b.n	8008d9a <AUDIO_AudioCmd_FS+0x2e>

    case AUDIO_CMD_PLAY:
    	Audio_Player_Play(pbuf, size);
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7f7 fb9a 	bl	80004cc <Audio_Player_Play>
    break;
 8008d98:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008d9a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8008dae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8008dc6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8008de2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008de6:	4804      	ldr	r0, [pc, #16]	; (8008df8 <AUDIO_PeriodicTC_FS+0x24>)
 8008de8:	f7f9 f8a4 	bl	8001f34 <HAL_GPIO_TogglePin>
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008dec:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40020800 	.word	0x40020800

08008dfc <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008e00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 8008e10:	2102      	movs	r1, #2
 8008e12:	4802      	ldr	r0, [pc, #8]	; (8008e1c <TransferComplete_CallBack_FS+0x10>)
 8008e14:	f7fe fa71 	bl	80072fa <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 8008e18:	bf00      	nop
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	200001f8 	.word	0x200001f8

08008e20 <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 8008e24:	2101      	movs	r1, #1
 8008e26:	4802      	ldr	r0, [pc, #8]	; (8008e30 <HalfTransfer_CallBack_FS+0x10>)
 8008e28:	f7fe fa67 	bl	80072fa <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 8008e2c:	bf00      	nop
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	200001f8 	.word	0x200001f8

08008e34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	6039      	str	r1, [r7, #0]
 8008e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2212      	movs	r2, #18
 8008e44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e46:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	200000f8 	.word	0x200000f8

08008e58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2204      	movs	r2, #4
 8008e68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e6a:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	2000010c 	.word	0x2000010c

08008e7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	6039      	str	r1, [r7, #0]
 8008e86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d105      	bne.n	8008e9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	4907      	ldr	r1, [pc, #28]	; (8008eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e92:	4808      	ldr	r0, [pc, #32]	; (8008eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e94:	f7ff fe42 	bl	8008b1c <USBD_GetString>
 8008e98:	e004      	b.n	8008ea4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	4904      	ldr	r1, [pc, #16]	; (8008eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e9e:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ea0:	f7ff fe3c 	bl	8008b1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ea4:	4b02      	ldr	r3, [pc, #8]	; (8008eb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	200004d4 	.word	0x200004d4
 8008eb4:	08009880 	.word	0x08009880

08008eb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	4904      	ldr	r1, [pc, #16]	; (8008ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ec8:	4804      	ldr	r0, [pc, #16]	; (8008edc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008eca:	f7ff fe27 	bl	8008b1c <USBD_GetString>
  return USBD_StrDesc;
 8008ece:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	200004d4 	.word	0x200004d4
 8008edc:	0800989c 	.word	0x0800989c

08008ee0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	221a      	movs	r2, #26
 8008ef0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ef2:	f000 f843 	bl	8008f7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ef6:	4b02      	ldr	r3, [pc, #8]	; (8008f00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20000110 	.word	0x20000110

08008f04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d105      	bne.n	8008f22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	4907      	ldr	r1, [pc, #28]	; (8008f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f1a:	4808      	ldr	r0, [pc, #32]	; (8008f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f1c:	f7ff fdfe 	bl	8008b1c <USBD_GetString>
 8008f20:	e004      	b.n	8008f2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	4904      	ldr	r1, [pc, #16]	; (8008f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f26:	4805      	ldr	r0, [pc, #20]	; (8008f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f28:	f7ff fdf8 	bl	8008b1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f2c:	4b02      	ldr	r3, [pc, #8]	; (8008f38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	200004d4 	.word	0x200004d4
 8008f3c:	080098b0 	.word	0x080098b0

08008f40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d105      	bne.n	8008f5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4907      	ldr	r1, [pc, #28]	; (8008f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f56:	4808      	ldr	r0, [pc, #32]	; (8008f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f58:	f7ff fde0 	bl	8008b1c <USBD_GetString>
 8008f5c:	e004      	b.n	8008f68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	4904      	ldr	r1, [pc, #16]	; (8008f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f62:	4805      	ldr	r0, [pc, #20]	; (8008f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f64:	f7ff fdda 	bl	8008b1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f68:	4b02      	ldr	r3, [pc, #8]	; (8008f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	200004d4 	.word	0x200004d4
 8008f78:	080098c0 	.word	0x080098c0

08008f7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f82:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <Get_SerialNum+0x44>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f88:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <Get_SerialNum+0x48>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <Get_SerialNum+0x4c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4413      	add	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d009      	beq.n	8008fb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fa2:	2208      	movs	r2, #8
 8008fa4:	4909      	ldr	r1, [pc, #36]	; (8008fcc <Get_SerialNum+0x50>)
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 f814 	bl	8008fd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fac:	2204      	movs	r2, #4
 8008fae:	4908      	ldr	r1, [pc, #32]	; (8008fd0 <Get_SerialNum+0x54>)
 8008fb0:	68b8      	ldr	r0, [r7, #8]
 8008fb2:	f000 f80f 	bl	8008fd4 <IntToUnicode>
  }
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	1fff7a10 	.word	0x1fff7a10
 8008fc4:	1fff7a14 	.word	0x1fff7a14
 8008fc8:	1fff7a18 	.word	0x1fff7a18
 8008fcc:	20000112 	.word	0x20000112
 8008fd0:	20000122 	.word	0x20000122

08008fd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75fb      	strb	r3, [r7, #23]
 8008fea:	e027      	b.n	800903c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	0f1b      	lsrs	r3, r3, #28
 8008ff0:	2b09      	cmp	r3, #9
 8008ff2:	d80b      	bhi.n	800900c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	0f1b      	lsrs	r3, r3, #28
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	4619      	mov	r1, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	440b      	add	r3, r1
 8009004:	3230      	adds	r2, #48	; 0x30
 8009006:	b2d2      	uxtb	r2, r2
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	e00a      	b.n	8009022 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	0f1b      	lsrs	r3, r3, #28
 8009010:	b2da      	uxtb	r2, r3
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	4619      	mov	r1, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	440b      	add	r3, r1
 800901c:	3237      	adds	r2, #55	; 0x37
 800901e:	b2d2      	uxtb	r2, r2
 8009020:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	3301      	adds	r3, #1
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	4413      	add	r3, r2
 8009032:	2200      	movs	r2, #0
 8009034:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	3301      	adds	r3, #1
 800903a:	75fb      	strb	r3, [r7, #23]
 800903c:	7dfa      	ldrb	r2, [r7, #23]
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	429a      	cmp	r2, r3
 8009042:	d3d3      	bcc.n	8008fec <IntToUnicode+0x18>
  }
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08a      	sub	sp, #40	; 0x28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800905c:	f107 0314 	add.w	r3, r7, #20
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	605a      	str	r2, [r3, #4]
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	60da      	str	r2, [r3, #12]
 800906a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009074:	d13a      	bne.n	80090ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]
 800907a:	4b1e      	ldr	r3, [pc, #120]	; (80090f4 <HAL_PCD_MspInit+0xa0>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	4a1d      	ldr	r2, [pc, #116]	; (80090f4 <HAL_PCD_MspInit+0xa0>)
 8009080:	f043 0301 	orr.w	r3, r3, #1
 8009084:	6313      	str	r3, [r2, #48]	; 0x30
 8009086:	4b1b      	ldr	r3, [pc, #108]	; (80090f4 <HAL_PCD_MspInit+0xa0>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009092:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009098:	2302      	movs	r3, #2
 800909a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800909c:	2300      	movs	r3, #0
 800909e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090a0:	2303      	movs	r3, #3
 80090a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80090a4:	230a      	movs	r3, #10
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090a8:	f107 0314 	add.w	r3, r7, #20
 80090ac:	4619      	mov	r1, r3
 80090ae:	4812      	ldr	r0, [pc, #72]	; (80090f8 <HAL_PCD_MspInit+0xa4>)
 80090b0:	f7f8 fc2c 	bl	800190c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090b4:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <HAL_PCD_MspInit+0xa0>)
 80090b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b8:	4a0e      	ldr	r2, [pc, #56]	; (80090f4 <HAL_PCD_MspInit+0xa0>)
 80090ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090be:	6353      	str	r3, [r2, #52]	; 0x34
 80090c0:	2300      	movs	r3, #0
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	4b0b      	ldr	r3, [pc, #44]	; (80090f4 <HAL_PCD_MspInit+0xa0>)
 80090c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c8:	4a0a      	ldr	r2, [pc, #40]	; (80090f4 <HAL_PCD_MspInit+0xa0>)
 80090ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090ce:	6453      	str	r3, [r2, #68]	; 0x44
 80090d0:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <HAL_PCD_MspInit+0xa0>)
 80090d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090dc:	2200      	movs	r2, #0
 80090de:	2100      	movs	r1, #0
 80090e0:	2043      	movs	r0, #67	; 0x43
 80090e2:	f7f7 fe69 	bl	8000db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090e6:	2043      	movs	r0, #67	; 0x43
 80090e8:	f7f7 fe92 	bl	8000e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090ec:	bf00      	nop
 80090ee:	3728      	adds	r7, #40	; 0x28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	40023800 	.word	0x40023800
 80090f8:	40020000 	.word	0x40020000

080090fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f7fe fbdd 	bl	80078d2 <USBD_LL_SetupStage>
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	4613      	mov	r3, r2
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	440b      	add	r3, r1
 8009140:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	4619      	mov	r1, r3
 800914a:	f7fe fc17 	bl	800797c <USBD_LL_DataOutStage>
}
 800914e:	bf00      	nop
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	460b      	mov	r3, r1
 8009160:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	4613      	mov	r3, r2
 800916e:	00db      	lsls	r3, r3, #3
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	440b      	add	r3, r1
 8009176:	334c      	adds	r3, #76	; 0x4c
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	4619      	mov	r1, r3
 800917e:	f7fe fcb0 	bl	8007ae2 <USBD_LL_DataInStage>
}
 8009182:	bf00      	nop
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009198:	4618      	mov	r0, r3
 800919a:	f7fe fde4 	bl	8007d66 <USBD_LL_SOF>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091ae:	2301      	movs	r3, #1
 80091b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d102      	bne.n	80091c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]
 80091be:	e008      	b.n	80091d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d102      	bne.n	80091ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80091c8:	2301      	movs	r3, #1
 80091ca:	73fb      	strb	r3, [r7, #15]
 80091cc:	e001      	b.n	80091d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80091ce:	f7f7 fbb9 	bl	8000944 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091d8:	7bfa      	ldrb	r2, [r7, #15]
 80091da:	4611      	mov	r1, r2
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fd84 	bl	8007cea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe fd2c 	bl	8007c46 <USBD_LL_Reset>
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe fd7f 	bl	8007d0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800921e:	f043 0301 	orr.w	r3, r3, #1
 8009222:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d005      	beq.n	8009238 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800922c:	4b04      	ldr	r3, [pc, #16]	; (8009240 <HAL_PCD_SuspendCallback+0x48>)
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	4a03      	ldr	r2, [pc, #12]	; (8009240 <HAL_PCD_SuspendCallback+0x48>)
 8009232:	f043 0306 	orr.w	r3, r3, #6
 8009236:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	e000ed00 	.word	0xe000ed00

08009244 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fd6f 	bl	8007d36 <USBD_LL_Resume>
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	4611      	mov	r1, r2
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fdc7 	bl	8007e0a <USBD_LL_IsoOUTIncomplete>
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009296:	78fa      	ldrb	r2, [r7, #3]
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fd83 	bl	8007da6 <USBD_LL_IsoINIncomplete>
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fdd9 	bl	8007e6e <USBD_LL_DevConnected>
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fdd6 	bl	8007e84 <USBD_LL_DevDisconnected>
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d13c      	bne.n	800936a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092f0:	4a20      	ldr	r2, [pc, #128]	; (8009374 <USBD_LL_Init+0x94>)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a1e      	ldr	r2, [pc, #120]	; (8009374 <USBD_LL_Init+0x94>)
 80092fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009300:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <USBD_LL_Init+0x94>)
 8009302:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009306:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009308:	4b1a      	ldr	r3, [pc, #104]	; (8009374 <USBD_LL_Init+0x94>)
 800930a:	2204      	movs	r2, #4
 800930c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800930e:	4b19      	ldr	r3, [pc, #100]	; (8009374 <USBD_LL_Init+0x94>)
 8009310:	2202      	movs	r2, #2
 8009312:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009314:	4b17      	ldr	r3, [pc, #92]	; (8009374 <USBD_LL_Init+0x94>)
 8009316:	2200      	movs	r2, #0
 8009318:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800931a:	4b16      	ldr	r3, [pc, #88]	; (8009374 <USBD_LL_Init+0x94>)
 800931c:	2202      	movs	r2, #2
 800931e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009320:	4b14      	ldr	r3, [pc, #80]	; (8009374 <USBD_LL_Init+0x94>)
 8009322:	2200      	movs	r2, #0
 8009324:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009326:	4b13      	ldr	r3, [pc, #76]	; (8009374 <USBD_LL_Init+0x94>)
 8009328:	2200      	movs	r2, #0
 800932a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800932c:	4b11      	ldr	r3, [pc, #68]	; (8009374 <USBD_LL_Init+0x94>)
 800932e:	2200      	movs	r2, #0
 8009330:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009332:	4b10      	ldr	r3, [pc, #64]	; (8009374 <USBD_LL_Init+0x94>)
 8009334:	2200      	movs	r2, #0
 8009336:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009338:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <USBD_LL_Init+0x94>)
 800933a:	2200      	movs	r2, #0
 800933c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800933e:	480d      	ldr	r0, [pc, #52]	; (8009374 <USBD_LL_Init+0x94>)
 8009340:	f7f9 fe6e 	bl	8003020 <HAL_PCD_Init>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800934a:	f7f7 fafb 	bl	8000944 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800934e:	2180      	movs	r1, #128	; 0x80
 8009350:	4808      	ldr	r0, [pc, #32]	; (8009374 <USBD_LL_Init+0x94>)
 8009352:	f7fb f8d8 	bl	8004506 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009356:	2240      	movs	r2, #64	; 0x40
 8009358:	2100      	movs	r1, #0
 800935a:	4806      	ldr	r0, [pc, #24]	; (8009374 <USBD_LL_Init+0x94>)
 800935c:	f7fb f88c 	bl	8004478 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009360:	2280      	movs	r2, #128	; 0x80
 8009362:	2101      	movs	r1, #1
 8009364:	4803      	ldr	r0, [pc, #12]	; (8009374 <USBD_LL_Init+0x94>)
 8009366:	f7fb f887 	bl	8004478 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	200006d4 	.word	0x200006d4

08009378 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800938e:	4618      	mov	r0, r3
 8009390:	f7f9 ff76 	bl	8003280 <HAL_PCD_Start>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f942 	bl	8009624 <USBD_Get_USB_Status>
 80093a0:	4603      	mov	r3, r0
 80093a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	4608      	mov	r0, r1
 80093b8:	4611      	mov	r1, r2
 80093ba:	461a      	mov	r2, r3
 80093bc:	4603      	mov	r3, r0
 80093be:	70fb      	strb	r3, [r7, #3]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70bb      	strb	r3, [r7, #2]
 80093c4:	4613      	mov	r3, r2
 80093c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093d6:	78bb      	ldrb	r3, [r7, #2]
 80093d8:	883a      	ldrh	r2, [r7, #0]
 80093da:	78f9      	ldrb	r1, [r7, #3]
 80093dc:	f7fa fc47 	bl	8003c6e <HAL_PCD_EP_Open>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f91c 	bl	8009624 <USBD_Get_USB_Status>
 80093ec:	4603      	mov	r3, r0
 80093ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009414:	78fa      	ldrb	r2, [r7, #3]
 8009416:	4611      	mov	r1, r2
 8009418:	4618      	mov	r0, r3
 800941a:	f7fa fc90 	bl	8003d3e <HAL_PCD_EP_Close>
 800941e:	4603      	mov	r3, r0
 8009420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	4618      	mov	r0, r3
 8009426:	f000 f8fd 	bl	8009624 <USBD_Get_USB_Status>
 800942a:	4603      	mov	r3, r0
 800942c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800942e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009452:	78fa      	ldrb	r2, [r7, #3]
 8009454:	4611      	mov	r1, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f7fa fd68 	bl	8003f2c <HAL_PCD_EP_SetStall>
 800945c:	4603      	mov	r3, r0
 800945e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	4618      	mov	r0, r3
 8009464:	f000 f8de 	bl	8009624 <USBD_Get_USB_Status>
 8009468:	4603      	mov	r3, r0
 800946a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800946c:	7bbb      	ldrb	r3, [r7, #14]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f7fa fdad 	bl	8003ff4 <HAL_PCD_EP_ClrStall>
 800949a:	4603      	mov	r3, r0
 800949c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 f8bf 	bl	8009624 <USBD_Get_USB_Status>
 80094a6:	4603      	mov	r3, r0
 80094a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da0b      	bge.n	80094e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094d0:	78fb      	ldrb	r3, [r7, #3]
 80094d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094d6:	68f9      	ldr	r1, [r7, #12]
 80094d8:	4613      	mov	r3, r2
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	333e      	adds	r3, #62	; 0x3e
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	e00b      	b.n	8009500 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ee:	68f9      	ldr	r1, [r7, #12]
 80094f0:	4613      	mov	r3, r2
 80094f2:	00db      	lsls	r3, r3, #3
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80094fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009526:	78fa      	ldrb	r2, [r7, #3]
 8009528:	4611      	mov	r1, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f7fa fb7a 	bl	8003c24 <HAL_PCD_SetAddress>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f874 	bl	8009624 <USBD_Get_USB_Status>
 800953c:	4603      	mov	r3, r0
 800953e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009540:	7bbb      	ldrb	r3, [r7, #14]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b086      	sub	sp, #24
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	603b      	str	r3, [r7, #0]
 8009556:	460b      	mov	r3, r1
 8009558:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009568:	7af9      	ldrb	r1, [r7, #11]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	f7fa fc93 	bl	8003e98 <HAL_PCD_EP_Transmit>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f853 	bl	8009624 <USBD_Get_USB_Status>
 800957e:	4603      	mov	r3, r0
 8009580:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009582:	7dbb      	ldrb	r3, [r7, #22]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	607a      	str	r2, [r7, #4]
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	460b      	mov	r3, r1
 800959a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095aa:	7af9      	ldrb	r1, [r7, #11]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	f7fa fc0f 	bl	8003dd2 <HAL_PCD_EP_Receive>
 80095b4:	4603      	mov	r3, r0
 80095b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f832 	bl	8009624 <USBD_Get_USB_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fa fc3f 	bl	8003e68 <HAL_PCD_EP_GetRxCount>
 80095ea:	4603      	mov	r3, r0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095fc:	4b03      	ldr	r3, [pc, #12]	; (800960c <USBD_static_malloc+0x18>)
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	20000be0 	.word	0x20000be0

08009610 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]

}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	2b03      	cmp	r3, #3
 8009636:	d817      	bhi.n	8009668 <USBD_Get_USB_Status+0x44>
 8009638:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <USBD_Get_USB_Status+0x1c>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009651 	.word	0x08009651
 8009644:	08009657 	.word	0x08009657
 8009648:	0800965d 	.word	0x0800965d
 800964c:	08009663 	.word	0x08009663
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
    break;
 8009654:	e00b      	b.n	800966e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009656:	2303      	movs	r3, #3
 8009658:	73fb      	strb	r3, [r7, #15]
    break;
 800965a:	e008      	b.n	800966e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800965c:	2301      	movs	r3, #1
 800965e:	73fb      	strb	r3, [r7, #15]
    break;
 8009660:	e005      	b.n	800966e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009662:	2303      	movs	r3, #3
 8009664:	73fb      	strb	r3, [r7, #15]
    break;
 8009666:	e002      	b.n	800966e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009668:	2303      	movs	r3, #3
 800966a:	73fb      	strb	r3, [r7, #15]
    break;
 800966c:	bf00      	nop
  }
  return usb_status;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <__libc_init_array>:
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	4d0d      	ldr	r5, [pc, #52]	; (80096b4 <__libc_init_array+0x38>)
 8009680:	4c0d      	ldr	r4, [pc, #52]	; (80096b8 <__libc_init_array+0x3c>)
 8009682:	1b64      	subs	r4, r4, r5
 8009684:	10a4      	asrs	r4, r4, #2
 8009686:	2600      	movs	r6, #0
 8009688:	42a6      	cmp	r6, r4
 800968a:	d109      	bne.n	80096a0 <__libc_init_array+0x24>
 800968c:	4d0b      	ldr	r5, [pc, #44]	; (80096bc <__libc_init_array+0x40>)
 800968e:	4c0c      	ldr	r4, [pc, #48]	; (80096c0 <__libc_init_array+0x44>)
 8009690:	f000 f820 	bl	80096d4 <_init>
 8009694:	1b64      	subs	r4, r4, r5
 8009696:	10a4      	asrs	r4, r4, #2
 8009698:	2600      	movs	r6, #0
 800969a:	42a6      	cmp	r6, r4
 800969c:	d105      	bne.n	80096aa <__libc_init_array+0x2e>
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a4:	4798      	blx	r3
 80096a6:	3601      	adds	r6, #1
 80096a8:	e7ee      	b.n	8009688 <__libc_init_array+0xc>
 80096aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ae:	4798      	blx	r3
 80096b0:	3601      	adds	r6, #1
 80096b2:	e7f2      	b.n	800969a <__libc_init_array+0x1e>
 80096b4:	080098f0 	.word	0x080098f0
 80096b8:	080098f0 	.word	0x080098f0
 80096bc:	080098f0 	.word	0x080098f0
 80096c0:	080098f4 	.word	0x080098f4

080096c4 <memset>:
 80096c4:	4402      	add	r2, r0
 80096c6:	4603      	mov	r3, r0
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d100      	bne.n	80096ce <memset+0xa>
 80096cc:	4770      	bx	lr
 80096ce:	f803 1b01 	strb.w	r1, [r3], #1
 80096d2:	e7f9      	b.n	80096c8 <memset+0x4>

080096d4 <_init>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	bf00      	nop
 80096d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096da:	bc08      	pop	{r3}
 80096dc:	469e      	mov	lr, r3
 80096de:	4770      	bx	lr

080096e0 <_fini>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	bf00      	nop
 80096e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	469e      	mov	lr, r3
 80096ea:	4770      	bx	lr
